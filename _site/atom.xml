<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>姬小光 の 乱码人生</title>
 <link href="http://44ux.com/atom.xml" rel="self"/>
 <link href="http://44ux.com"/>
 <updated>2013-02-26T14:42:51+08:00</updated>
 <id>http://44ux.com</id>
 <author>
   <name>JiGuang</name>
   <email>jiguang1984@gmail.com</email>
 </author>

 
 <entry>
   <title>善用 Web 调试代理工具</title>
   <link href="http://44ux.com/blog/2013/02/25/using-web-debugging-proxies"/>
   <updated>2013-02-25T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2013/02/25/using-web-debugging-proxies</id>
   <content type="html">&lt;p&gt;原文地址：&lt;a href='http://net.tutsplus.com/tutorials/using-web-debugging-proxies/'&gt;Using Web Debugging Proxies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当我们调试前端代码的时候，通常会在检查CSS和JavaScript如何渲染页面上花费大量时间，但是了解网络请求对页面的影响也同等重要。很多情况下由于我们在本地开发，可能会忽略页面的大小、延迟以及脚本的载入和阻塞对网站用户体验的巨大影响。因此，一套得心应手的网络流量检查工具是必不可少的。&lt;/p&gt;

&lt;p&gt;幸运的是，所有主流浏览器都提供了可以查看网络流量的调试工具，而且第三方工具比如 Fiddler 和 Charles 不仅允许查看网络请求，而且还提供了可以跟网站交互的扩展功能。&lt;/p&gt;

&lt;p&gt;下面我们会对两种类型的工具分别进行介绍。&lt;/p&gt;

&lt;h2 id='id9'&gt;基于浏览器的流量嗅探&lt;/h2&gt;

&lt;p&gt;正如我提过的，每个主流浏览器都有内置的调试工具。它们包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Internet Explorer 的 F12 开发者工具&lt;/li&gt;

&lt;li&gt;Firefox 的 Web开发者工具以及 Firebug 附加组件&lt;/li&gt;

&lt;li&gt;Chrome 的 开发者工具&lt;/li&gt;

&lt;li&gt;Opera 的 Dragonfly&lt;/li&gt;

&lt;li&gt;Safari 的 Web检查器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（&lt;a href='http://44ux.com'&gt;译者&lt;/a&gt;注：关于这些工具，还可参见译者的&lt;a href='http://44ux.com/blog/2012/04/07/smashing-css-sample-chapter2/'&gt;另一篇文章&lt;/a&gt;。）&lt;/p&gt;

&lt;p&gt;每个工具集都有自己独特的功能，并且它们都有搜集网络流量信息的能力。看一下下面几张图，你会发现尽管UI不尽相同，但搜集和显示的数据却非常相像。&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-network-ie.png' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-network-chrome.png' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-network-opera.png' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-network-firebug.png' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-network-firefox.png' /&gt;&lt;/p&gt;

&lt;p&gt;最终的结果就是，一个由浏览器下载的资源或数据而产生的网络请求所组成的列表。网络工具可以截获这些请求并将主要的数据展示给你：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;请求类型（GET，POST 等等） * 请求的是什么&lt;/li&gt;

&lt;li&gt;URI * 状态 * 大小 * 完成请求所耗时间&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，如果我们在 Firebug 中查看结果，可以看到这些请求拉回了主页面以及相关的CSS和JavaScript文件，包括亚马逊AWS上的资源。由于图片的限制，我无法向你展示全部加载内容，不过这里也还返回了图片和Flash swf文件。&lt;/p&gt;

&lt;h2 id='id10'&gt;深入研究&lt;/h2&gt;

&lt;p&gt;有了这些信息后，就可以深入查看特定的请求，确定是否接收到了正确的数据，以及查看为什么会有耗时很长的请求。假设我查看Webtrend的JavaScript文件请求。它耗时1.2秒下载，并且我想看看请求是如何被处理的。我可以展开该请求，看看它是使用gzip压缩（是的）：&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-webtrend.png' /&gt;&lt;/p&gt;

&lt;p&gt;和是否被最小化压缩（minified）：&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-webtrend-min.png' /&gt;&lt;/p&gt;

&lt;p&gt;本例中的文件并没有被最小化压缩，然后我就可以找开发人员跟进看这样做是否合理。诚然，这只是个2k的文件，不过每个字节其实都很重要，这些信息可以让我们更好地优化网站。&lt;/p&gt;

&lt;h2 id='id11'&gt;网络计时&lt;/h2&gt;

&lt;p&gt;网络延时可以成为致命杀手，尤其是对于那些依赖外部API或者多个脚本文件来实现功能的单页面应用（single-page apps）。大部分浏览器会尽可能地异步加载资源，但是有些资源比如JavaScript文件，可以触发阻塞事件。尽可能地限制这些文件，并以此来优化资源加载至关重要。如果我们看一下这张图，就会发现这个文件花费了1.4秒用来加载：&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-load-graphic.png' /&gt;&lt;/p&gt;

&lt;p&gt;当悬停在时间轴上的时候，会出现一个对话框，展示了请求被处理的分解信息：&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-load.png' /&gt;&lt;/p&gt;

&lt;p&gt;部分原因是由于它被阻塞了760毫秒。如果这是个普遍存在的问题，你可以尝试使用脚本加载器（比如 &lt;a href='http://requirejs.org/'&gt;RequireJS&lt;/a&gt;）来更好地管理脚本加载和依赖关系。&lt;/p&gt;

&lt;h2 id='ajax'&gt;Ajax请求&lt;/h2&gt;

&lt;p&gt;由于动态应用无处不在，因此能够查看XHR调用就至关重要了。之前你已经见识过无数的网络请求，试图过滤这些请求并从中找出XHR调用并不高效。因此，大部分工具允许你按请求类型查看。这里我是根据XHR请求过滤的，因此我可以评估请求和响应：&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-chrome-xhr.png' /&gt;&lt;/p&gt;

&lt;p&gt;通过深入查看请求信息，我可以获得请求的重要细节，比如请求头、状态、请求方法、cookies，更重要的是可以看到该请求返回的数据：&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-chrome-xhr-response.png' /&gt;&lt;/p&gt;

&lt;p&gt;本例中返回的是HTML，不过响应可以是包括文本、JSON或XML在内的任何内容。更棒的是在我遇到任何问题时，都可以充分地查看请求细节。&lt;/p&gt;

&lt;h2 id='cokkies'&gt;Cokkies&lt;/h2&gt;

&lt;p&gt;Cookies真的非常有用，由于我们会广泛地用到它，因此一个方便地查看Cookie值的方法将使生活变得更轻松。开发者工具即可轻松实现这些，它可以展示哪些Cookies被发送或者接收了。&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-cookies.png' /&gt;&lt;/p&gt;

&lt;p&gt;如果你曾经做过服务器端开发而没有客户端工具相伴，你就会知道这有多爽了。&lt;/p&gt;

&lt;p&gt;总之，最棒的就是这些功能都内置在你的浏览器中，使开启工具调试和查看细节都变得无比便捷。然而，有时你还需要多一点马力。&lt;/p&gt;

&lt;h2 id='http'&gt;第三方HTTP代理工具&lt;/h2&gt;

&lt;p&gt;HTTP代理程序如 &lt;a href='http://www.fiddler2.com/'&gt;Fiddler&lt;/a&gt; 和 the &lt;a href='http://www.charlesproxy.com/'&gt;Charles Web Debugging Proxy&lt;/a&gt; 是基于浏览器的网络流量嗅探工具的老大哥。它们不仅能截获来自浏览器的网络请求，也能截获你机器上其他程序的网络请求，这使得它们在调试方面用途广泛。通常它们也会提供更丰富的特性，比如：&lt;/p&gt;

&lt;p&gt;* 带宽限制 * 特定请求的自动响应 * 传输过程中的资源替换 * SSL代理 * 插件生态系统 * 可自定义的脚本 * 记录和回放测试场景&lt;/p&gt;

&lt;p&gt;我常用基于Windows的、功能丰富的 Fiddler（免费的！）。由于其强大的特性集合，在微软内部的使用也很广泛。Fiddler的开发者 Eric Lawrence 之前就在微软工作，并且仍然维护着该软件。&lt;/p&gt;

&lt;p&gt;如果我们看下界面，就会发现与那些浏览器工具类似的输出。所有的网络请求都按照关键信息显示。&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-fiddler.png' /&gt;&lt;/p&gt;

&lt;p&gt;深入查看某个请求，可以看到更多的细节，包括压缩后jQuery源代码：&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-fiddler-drill.png' /&gt;&lt;/p&gt;

&lt;p&gt;大部分这种信息也可以通过基于浏览器的工具获取到，但是当你想确定是不是某个库搞垮了你的网站的时候怎么办？你可以直接换掉这些库来进行定位。一个较好的路径就是创建一个Fiddler自动响应器（AutoResponder），拦截并替换掉生产环境中的库。Fiddler会接收这个请求并将其替换为本地文件。下面我们就来一探究竟。&lt;/p&gt;

&lt;p&gt;首先，我需要标识出需要替换的URI。在本例中，我看到我的博客主题使用了jQuery v1.2.6。真是疯了，不过在我丢掉它之前，需要看一下jQuery v1.8.3是否能如预期一样正常工作。&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-jquery-126.png' /&gt;&lt;/p&gt;

&lt;p&gt;我点击 jQuery v1.2.6 这条记录，在 Fiddler 的右栏中，选择“AutoResponder”页卡并选择“Enable automatic responses”。可以直接将URI拖拽到规则编辑器中。你会发现规则是从比较URI开始的。如果匹配，它将以你选择的某个事件作为响应。&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-fiddler-autorule1.png' /&gt;&lt;/p&gt;

&lt;p&gt;由于我想测试的是 jQuery 1.8.3，我希望这条规则可以用我本地的jQuery副本替换生产环境的版本。&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-fiddler-autorule2.png' /&gt;&lt;/p&gt;

&lt;p&gt;保存这条规则并刷新我的页面。最终结果是，尽管URI可能看上去相同，检查结果可以验证 jQuery v1.8.3 实际上已经嵌入了。这样我就可以在不对网站进行任何更改的情况下直接测试了。&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-fiddler-autorule3.png' /&gt;&lt;/p&gt;

&lt;p&gt;从调试的角度来讲，这种功能无比实用，尤其是当你想定位一个藏在老版本框架或库中的bug时候。&lt;/p&gt;

&lt;h2 id='id12'&gt;附加组件生态系统&lt;/h2&gt;

&lt;p&gt;Fiddler从它的&lt;a href='http://www.fiddler2.com/Fiddler2/extensions.asp'&gt;附件组件生态系统&lt;/a&gt;中获益良多，这个系统通过&lt;a href='http://www.fiddler2.com/fiddler/dev/IFiddlerExtension.asp'&gt;iFiddlerExtension接口&lt;/a&gt;为Fiddler扩展功能。目前有如下功能的附加组件：&lt;/p&gt;

&lt;p&gt;* 压力测试 * 安全审计 * 流量对比用来对比概况 * JavaScript格式化&lt;/p&gt;

&lt;p&gt;对于它本身来说，Fiddler拥有无数特性，实在无法在本文一一列举。这就是为啥有个&lt;a href='http://www.fiddler2.com/book/'&gt;330页的书&lt;/a&gt;来教你如何用好它的原因了。这本书只有10美元，即可让你从内到外掌握这个伟大的工具。&lt;/p&gt;

&lt;h2 id='osx__linux'&gt;OSX 和 Linux&lt;/h2&gt;

&lt;p&gt;如果你在用OSX或者Linux，那么最佳选择就是Charles Web调试代理工具。该工具支持广泛并且商业化成熟，每一分钱都花得很值得。我曾寻找过专注于web开发的替代品，而Charles却脱颖而出。&lt;/p&gt;

&lt;p&gt;界面跟Fiddler很类似，不过它提供了两种不同的方式查看网络流量：&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-charles-struct.png' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-charles-seq.png' /&gt;&lt;/p&gt;

&lt;p&gt;样式完全随你，我更倾向于结构化视图，因为感觉它更有条理，不过搜寻特定的URI就稍有不便。&lt;/p&gt;

&lt;p&gt;与Fiddler类似，Charles也提供了自动响应功能，叫做“Map Local…”，可以通过鼠标右击某个URI呼出。该功能允许你选择一个本地文件进行工作。&lt;/p&gt;

&lt;p&gt;当刷新页面后，我的jQuery v1.2.6就被我本机上的jQuery v1.9替换掉了。&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-charles-autoresp.png' /&gt;&lt;/p&gt;

&lt;p&gt;Charles另外一个极好的特性就是，它可以抑制网络请求来模拟特定的带宽速度。仍记得使用56K猫时的那些令人捉急的日子，使用这个功能可以让你尽情追忆似水年华：&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://44ux.com/content/uploads/2013/02/debug-proxies-charles-throttle.png' /&gt;&lt;/p&gt;

&lt;p&gt;Chares也提供了一个跨平台的界面，因此也可以在Windows上工作。&lt;/p&gt;

&lt;h2 id='id13'&gt;该用哪一个&lt;/h2&gt;

&lt;p&gt;所有这些工具我每时每刻都在用，因为我需要测试每个主流的浏览器，有了这些功能着实可以使问题定位更容易些。当然，是选择基于浏览器的嗅探工具，还是基于应用程序的代理工具完全取决于你的调试需要。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果你只需要检查某些流量并查看结果，那么基于浏览器的嗅探工具可能是你的最佳选择。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;另一方面，如果你需要精确控制URI如何响应，或者希望可以灵活地创建自定义脚本，那么像Fiddler或Charles这种工具才是你需要的。令人欣慰的是，我们有稳定的备选方案可以帮助我们实现这些功能，尤其是当项目复杂度日益增加时，也不会感到无力。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Sizzle 各版本中数组去重方法 Sizzle.uniqueSort 的演变</title>
   <link href="http://44ux.com/blog/2012/10/23/array-duplicate-removal-in-sizzle"/>
   <updated>2012-10-23T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/10/23/array-duplicate-removal-in-sizzle</id>
   <content type="html">&lt;p&gt;关于 JavaScript 中的数组去重，网上有许多文章，这里就不再赘述。今天恰好有机会用到 &lt;a href='http://jquery.com/'&gt;jQuery&lt;/a&gt; 中的 &lt;code&gt;$.unique&lt;/code&gt;，所以就翻看了一下源码整理下来。&lt;/p&gt;

&lt;p&gt;我们知道 jQuery 是使用 &lt;a href='http://sizzlejs.com/'&gt;Sizzle&lt;/a&gt; 作为选择器的基础类库的，其中也包含了基本的排序方法 &lt;code&gt;Sizzle.uniqueSort&lt;/code&gt;，而 jQuery 的 &lt;code&gt;unique&lt;/code&gt; 方法则为这个方法的一个别名：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;jQuery&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;unique&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;Sizzle&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;uniqueSort&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 jQuery 1.7 以前 &lt;code&gt;Sizzle.uniqueSort&lt;/code&gt; 的实现方式如下：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;Sizzle&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;uniqueSort&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;results&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;sortOrder&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
		&lt;span class='nx'&gt;hasDuplicate&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;baseHasDuplicate&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
		&lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;sort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;sortOrder&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;

		&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;hasDuplicate&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;length&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
				&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
					&lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;splice&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='o'&gt;--&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
				&lt;span class='p'&gt;}&lt;/span&gt;
			&lt;span class='p'&gt;}&lt;/span&gt;
		&lt;span class='p'&gt;}&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;

	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该方法首先对数组进行排序，然后循环比较数组中的当前项与前一项，若全等，则删除当前项，并将索引置回。若不等，则继续在数组中前进。&lt;/p&gt;

&lt;p&gt;在 jQuery 1.8 中 &lt;code&gt;Sizzle.uniqueSort&lt;/code&gt; 的实现方式如下：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;Sizzle&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;uniqueSort&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;results&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;elem&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
		&lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

	&lt;span class='nx'&gt;hasDuplicate&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;baseHasDuplicate&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;sort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;sortOrder&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;

	&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;hasDuplicate&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
		&lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;elem&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;elem&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
				&lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;splice&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='o'&gt;--&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
			&lt;span class='p'&gt;}&lt;/span&gt;
		&lt;span class='p'&gt;}&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;

	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相对于 jQuery 1.7 中的实现，该方法不再访问数组的 &lt;code&gt;length&lt;/code&gt; 属性，提高了运行效率。每次以 &lt;code&gt;elem = results[i]&lt;/code&gt; 赋值后是否存在为循环判定条件。&lt;/p&gt;

&lt;p&gt;在 2012-10-09 &lt;a href='https://github.com/jquery/sizzle/commit/2a7c8b352198b3f42a1a54ff0097565499f5b6e4'&gt;提交到 Sizzle 的代码&lt;/a&gt;中，&lt;a href='http://44ux.com'&gt;笔者&lt;/a&gt;发现其实现方法又有些变化：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='c1'&gt;// October 09, 2012 Fix jQuery #12671: quasi-array duplicate removal in oldIE&lt;/span&gt;
&lt;span class='nx'&gt;Sizzle&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;uniqueSort&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;results&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;elem&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
		&lt;span class='nx'&gt;duplicates&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[],&lt;/span&gt;
		&lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
		&lt;span class='nx'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

	&lt;span class='nx'&gt;hasDuplicate&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;baseHasDuplicate&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;sort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;sortOrder&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;

	&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;hasDuplicate&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
		&lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;elem&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;elem&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
				&lt;span class='nx'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;duplicates&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;push&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
			&lt;span class='p'&gt;}&lt;/span&gt;
		&lt;span class='p'&gt;}&lt;/span&gt;
		&lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;j&lt;/span&gt;&lt;span class='o'&gt;--&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
			&lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;splice&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;duplicates&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='nx'&gt;j&lt;/span&gt; &lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
		&lt;span class='p'&gt;}&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;

	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;results&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提交的注释是修复老版IE中准数组（quasi-array）去重的问题，至于这个 oldIE 估计是指 IE6 以下。&lt;/p&gt;

&lt;p&gt;与这部分代码同时提交的还有&lt;a href='https://github.com/gibson042/sizzle/commit/5f2d508cfdeaf71a00f5b0dd8bda34b0246f5ec5'&gt;测试用例的更改&lt;/a&gt;：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;deepEqual&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;Sizzle&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;uniqueSort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;arrDup&lt;/span&gt; &lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;slice&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='nx'&gt;el1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;el2&lt;/span&gt; &lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Duplicates array&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='nx'&gt;deepEqual&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;Sizzle&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;uniqueSort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;objDup&lt;/span&gt; &lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;slice&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='nx'&gt;el1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;el2&lt;/span&gt; &lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Duplicates quasi-array&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种方法的好处是可以兼容类数组的对象，如果你每次都能保证是对真正的数组排序的话，就不需要做这种处理了。&lt;/p&gt;

&lt;p&gt;该提交目前还没有体现在最新的 jQuery 版本中，估计下一个小版本就会包含了。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>深入理解浏览器兼容性模式</title>
   <link href="http://44ux.com/blog/2012/10/17/understand-the-browser-compatibility-mode"/>
   <updated>2012-10-17T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/10/17/understand-the-browser-compatibility-mode</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; 本文已被 &lt;a href='http://www.csdn.net/article/2012-10-22/2811049-Understanding-the-browser-compatibility-'&gt;CSDN&lt;/a&gt; 转载，可惜木有稿费，还把作者链接去掉了&amp;#8230;&lt;/p&gt;

&lt;p&gt;关于各种浏览器模式，网上已经有许多文档和资料了，但是很少有能够完全将几个概念阐述清楚的。大部分的资料稍显过时，有些内容可能已经不再适用了。本文中&lt;a href='http://44ux.com'&gt;笔者&lt;/a&gt;将尽可能将几个概念阐述清楚，并去掉一些过时的内容，仅保留必要的干货。&lt;/p&gt;

&lt;p&gt;想必你一定知道浏览器有个标准（Standards）模式和一个怪异（Quirks）模式，或许你还听说过有个“准标准（Almost Standards）”模式。而当你打开 Internet Explorer 的时候，又看到了什么浏览器模式、文档模式，还有什么兼容性视图等等&amp;#8230;&lt;/p&gt;

&lt;p&gt;这些都是什么？啥是浏览器模式，啥是文档模式？标准模式和准标准的模式有什么区别？IE9兼容性视图和真正的IE9有什么区别？什么情况下会触发这些模式，又该怎样才能检测到浏览器当前处于哪种模式中呢？本文将详细为你解答这些疑问。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三种模式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先我们要知道，为什么会有这么多模式。其实这是个历史遗留问题，在&lt;a href='http://en.wikipedia.org/wiki/Browser_wars'&gt;浏览器大战&lt;/a&gt;时期，网景浏览器（Netscape Navigator）和微软的IE浏览器（Microsoft Internet Explorer）对网页分别有不同的实现方式，那个时候的网页要针对这两种浏览器分别开发不同的版本。而到了 &lt;a href='http://www.w3.org/'&gt;W3C&lt;/a&gt; 制定标准之后，这些浏览器就不能继续使用这种页面了，因而会导致大部分现有站点都不能使用。基于这个原因，浏览器才引入两种模式来处理一些遗留的站点。&lt;/p&gt;

&lt;p&gt;现在的浏览器排版引擎支持三种模式：怪异（Quirks）模式、准标准（Almost Standards）和标准（Standards）模式。在怪异模式中，排版引擎会模拟 网景4 和 Windows 中的 IE5 的行为；在完全标准的模式中，会尽量执行 HTML 和 CSS 规范所指定的行为；而在准标准模式中，则只包含很少的一部分怪异模式中的行为。&lt;/p&gt;

&lt;p&gt;那么所谓标准模式，就一定都“标准”吗？答案当然是否定的，因为各个浏览器厂商实现标准的阶段不同，所以各个浏览器的“标准模式”之间也会有很大的不同。&lt;/p&gt;

&lt;p&gt;Firefox、Safari、Chrome、Opera (自 7.5 以后)、 IE8 和 IE9 都有一个准标准模式。那么既然标准模式都不那么标准，准标准的模式肯定就更不标准了。&lt;a href='http://meyerweb.com/eric/thoughts/2008/01/24/almost-target/'&gt;最初的准标准模式&lt;/a&gt;只会&lt;a href='https://developer.mozilla.org/en-US/docs/Images,_Tables,_and_Mysterious_Gaps'&gt;影响表格中的图像&lt;/a&gt;，而后来各个浏览器又或多或少地进行了修改。那么什么情况下会触发准标准模式呢？是的，正如你所想到的，某些 &lt;a href='http://en.wikipedia.org/wiki/Document_Type_Declaration'&gt;DOCTYPE&lt;/a&gt; 会触发准标准模式，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;quot;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;amp;quot;
&amp;amp;quot;-//W3C//DTD XHTML 1.0 Frameset//EN&amp;amp;quot;
&amp;amp;quot;-//W3C//DTD HTML 4.01 Transitional//EN&amp;amp;quot;
&amp;amp;quot;-//W3C//DTD HTML 4.01 Frameset//EN&amp;amp;quot;
&amp;amp;quot;http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd&amp;amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个完整的 DOCTYPE 例子如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;!DOCTYPE HTML PUBLIC &amp;amp;quot;-//W3C//DTD HTML 4.01 Transitional//EN&amp;amp;quot;
                      &amp;amp;quot;http://www.w3.org/TR/html4/loose.dtd&amp;amp;quot;&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果在 &lt;a href='http://www.mozilla.org/en-US/firefox/new/'&gt;Firefox&lt;/a&gt; 中插入这种 DOCTYPE，并在页面中插入一个空的 &lt;code&gt;span&lt;/code&gt; 标签，那么在 &lt;a href='https://getfirebug.com/'&gt;Firebug&lt;/a&gt; 中查看元素的布局就会发现不同：&lt;/p&gt;

&lt;p&gt;准标准模式中元素的 line-height 被忽略了，元素既没有宽度也没有高度：&lt;/p&gt;

&lt;p&gt;&lt;img alt='Almost Standards' src='http://44ux.com/content/uploads/2012/10/almost-standards.png' /&gt;&lt;/p&gt;

&lt;p&gt;标准模式中元素仍然保留了 line-height，拥有 18px 的高度：&lt;/p&gt;

&lt;p&gt;&lt;img alt='Standards' src='http://44ux.com/content/uploads/2012/10/full-standards.png' /&gt;&lt;/p&gt;

&lt;p&gt;在 Firefox 浏览器中，使用鼠标右键 -&amp;gt; 查看页面信息 可以看到当前浏览器运行在何种模式（只能看到“混杂模式”和“标准规范模式”两种表示）：&lt;/p&gt;

&lt;p&gt;&lt;img alt='mozilla-standard-mode' src='http://44ux.com/content/uploads/2012/10/mozilla-standard-mode.png' /&gt;&lt;/p&gt;

&lt;p&gt;有位大神 &lt;a href='http://hsivonen.iki.fi/author/'&gt;Henri Sivonen&lt;/a&gt; 曾写过一篇文章叫做 &lt;a href='http://hsivonen.iki.fi/doctype/'&gt;Activating Browser Modes with Doctype&lt;/a&gt;，里面包含了一个完整的表格，展示了各种 DOCTYPE 设置将会使浏览器以何种方式渲染。这里还有一篇 &lt;a href='http://dancewithnet.com'&gt;秦歌&lt;/a&gt; 的译文 &lt;a href='http://dancewithnet.com/2009/06/14/activating-browser-modes-with-doctype/'&gt;《用doctype激活浏览器模式》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;鉴于目前一些最新版本的浏览器已经放弃了准标准模式，所以关于准标准模式的细节这里就不再赘述了，感兴趣的同学可以详细阅读以下资料：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href='https://developer.mozilla.org/en-US/docs/Gecko&amp;apos;s_Almost_Standards_Mode?redirectlocale=en-US&amp;amp;redirectslug=Gecko%27s_%22Almost_Standards%22_Mode'&gt;Gecko&amp;#8217;s &amp;#8220;Almost Standards&amp;#8221; Mode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://msdn.microsoft.com/en-us/library/ff405794%28v=vs.85%29'&gt;Line Height Calculations in Almost Standards Mode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='https://developer.mozilla.org/en-US/docs/Images,_Tables,_and_Mysterious_Gaps'&gt;Images, Tables, and Mysterious Gaps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://meyerweb.com/eric/css/tests/almost-standards.html'&gt;almost-standards test&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.opera.com/docs/specs/doctype/'&gt;DOCTYPE Switches support in Opera Presto 2.10&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么，既然这么多的 DOCTYPE 都会触发非标准的模式，那么如何才能触发标准模式呢？对了！要使用 &lt;a href='http://dev.w3.org/html5/spec/#the-doctype'&gt;HTML5 DOCTYPE&lt;/a&gt;，即：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;!DOCTYPE html&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：如果文档中没有包含 DOCTYPE 或者包含了一个无法识别的 DOCTYPE，则浏览器就会进入怪异模式。&lt;/p&gt;

&lt;p&gt;下面简单说一下怪异模式。怪异模式有许多“怪异”的行为，主要是为了兼容那些遗留的古老页面而保留的模式。不同浏览器的怪异模式也不尽相同，它们都有自己的实现方式。怪异模式与标准模式的差异主要体现在 &lt;a href='http://www.w3.org/TR/CSS2/box.html'&gt;盒模型（box model）&lt;/a&gt;、表格单元格高度的处理等。例如 IE 的怪异模式中，元素的 width 包含了 padding 和 border，而标准模式中 padding 和 border 并不属于宽度的一部分。&lt;/p&gt;

&lt;p&gt;若想详细了解浏览器在怪异模式下的行为，可以参看下面两篇文章。不过不建议在这上面花太多的精力，这是个历史遗留问题，而且我们也尽量保证新开发的页面不要进入到怪异模式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href='https://developer.mozilla.org/en-US/docs/Mozilla_Quirks_Mode_Behavior'&gt;Mozilla Quirks Mode Behavior&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://www.cs.tut.fi/~jkorpela/quirks-mode.html'&gt;What happens in Quirks Mode?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;a href='http://hixie.ch/tests/adhoc/compat/mozilla/001.cgi?DOCTYPE=%3C!DOCTYPE+HTML%3E&amp;amp;MODE=full&amp;amp;EXPECT=standards%20mode'&gt;Compatability Mode Test&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;小结：&lt;/strong&gt; 至此我们需要了解，浏览器有三种运行模式，即标准模式、准标准模式和怪异模式，要使用 &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; 来正确地触发标准模式。千万不要丢掉 DOCTYPE 声明，因为这会导致浏览器进入怪异模式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IE的浏览器模式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IE8有4种模式：IE5.5怪异模式、IE7标准模式、IE8 准标准模式和IE8标准模式，而IE9有7种模式: IE5.5怪异模式、IE7标准模式、IE8准标准模式、IE8标准模式、IE9准标准模式、IE9标准模式、XML模式。&lt;/p&gt;

&lt;p&gt;其中 XML模式 是针对 XML 文档的，这里不打算阐述，细节可以看这篇文章&lt;a href='http://msdn.microsoft.com/en-us/library/cc288325(v=vs.85\'&gt;Defining Document Compatibility&lt;/a&gt;.aspx) 中有详细阐述。&lt;/p&gt;

&lt;p&gt;在 IE8 及以后的的 IE 浏览器中，支持 &lt;code&gt;X-UA-Compatible&lt;/code&gt; 头，可以通过在服务器端设置 HTTP 头，或者在页面中插入 &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; 标签来实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP:
Header set X-UA-Compatible &amp;quot;IE=8&amp;quot;

Meta:
&amp;amp;lt;meta http-equiv=&amp;amp;quot;X-UA-Compatible&amp;amp;quot; content=&amp;amp;quot;IE=EmulateIE7&amp;amp;quot; /&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种方法主要是防止老的页面在较新的浏览器中显示不正常的情况的， 比如上面的代码可以强制 IE8 以上版本的浏览器以IE7的模式进行渲染。&lt;/p&gt;

&lt;p&gt;注意，不要在新开发的网页中使用这种技术，这种技术只应该作为新老网页更替过程中的过渡方案。由于目前新开发的网页都是尽量支持最新版本的浏览器的，所以这种技术也会慢慢被淘汰，感兴趣的同学可以详细阅读 &lt;a href='http://msdn.microsoft.com/en-us/library/cc288325(VS.85).aspx' target='_blank'&gt;微软的这篇文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;小结：&lt;/strong&gt; 这里我们需要知道有这种方式可以强制浏览器以某种模式运行，但只应作为过渡方案，不应在新开发的网页中使用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IE9 兼容性视图 与 IE9 标准视图&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你使用的是 IE9，那么按下 F12 键就会出现开发者工具，上面有两个下拉菜单：浏览器模式 和 文档模式。那么什么是浏览器模式？什么又是文档模式？二者有何区别？&lt;/p&gt;

&lt;p&gt;浏览器模式用于切换IE针对该网页的默认文档模式、对不同版本浏览器的条件注释解析、以及发送给网站服务器的用户代理（User-Agent）字符串的值。网站可以根据浏览器返回的不同用户代理字符串判断浏览器的版本和及安装的功能，这样就可以根据不同的浏览器返回不同的页面内容了。&lt;/p&gt;

&lt;p&gt;文档模式用于指定IE的页面排版引擎（Trident）以哪个版本的方式来解析并渲染网页代码。切换文档模式会导致网页被刷新，但不会更改用户代理字符串中的版本号，也不会从服务器重新下载网页。切换浏览器模式的同时，浏览器也会自动切换到相应的文档模式。&lt;/p&gt;

&lt;p&gt;一言以蔽之，浏览器模式会影响服务器端对客户端浏览器版本的判断，对条件注释也有影响；而文档模式会影响IE的排版引擎，对网页渲染会有影响，对 CSS hack 也会产生影响。因此，通过条件注释可以判断浏览器模式，而使用 CSS hack 可以判断文档模式。&lt;/p&gt;

&lt;p&gt;如果我们使用一句简单的 JavaScript 语句来查看用户代理（User-Agent）字符串的值，则可以看到 IE9 兼容性视图 与 IE9 的区别：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;script type=&amp;amp;quot;text/javascript&amp;amp;quot;&amp;amp;gt;
    alert(&amp;#39;UA:&amp;#39;+navigator.userAgent);
&amp;amp;lt;/script&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果如下所示，注意其中的 MSIE 版本号已经不同。判断浏览器模式就是判断 User-Agent 中的版本号，即 MSIE 后面的数值：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='c1'&gt;// IE9&lt;/span&gt;
&lt;span class='nx'&gt;UA&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='nx'&gt;Mozilla&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='mf'&gt;5.0&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;compatible&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;MSIE&lt;/span&gt; &lt;span class='mf'&gt;9.0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;Windows&lt;/span&gt; &lt;span class='nx'&gt;NT&lt;/span&gt; &lt;span class='mf'&gt;6.1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;Trident&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='mf'&gt;5.0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;SLCC2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;NET&lt;/span&gt; &lt;span class='nx'&gt;CLR&lt;/span&gt; &lt;span class='mf'&gt;2.0&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;50727&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;NET&lt;/span&gt; &lt;span class='nx'&gt;CLR&lt;/span&gt; &lt;span class='mf'&gt;3.5&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;30729&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;NET&lt;/span&gt; &lt;span class='nx'&gt;CLR&lt;/span&gt; &lt;span class='mf'&gt;3.0&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;30729&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;Media&lt;/span&gt; &lt;span class='nx'&gt;Center&lt;/span&gt; &lt;span class='nx'&gt;PC&lt;/span&gt; &lt;span class='mf'&gt;6.0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;NET4&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='nx'&gt;C&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;NET4&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='nx'&gt;E&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;Tablet&lt;/span&gt; &lt;span class='nx'&gt;PC&lt;/span&gt; &lt;span class='mf'&gt;2.0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='c1'&gt;// IE9 兼容性视图&lt;/span&gt;
&lt;span class='nx'&gt;UA&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='nx'&gt;Mozilla&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='mf'&gt;4.0&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;compatible&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;MSIE&lt;/span&gt; &lt;span class='mf'&gt;7.0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;Windows&lt;/span&gt; &lt;span class='nx'&gt;NT&lt;/span&gt; &lt;span class='mf'&gt;6.1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;Trident&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='mf'&gt;5.0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;SLCC2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;NET&lt;/span&gt; &lt;span class='nx'&gt;CLR&lt;/span&gt; &lt;span class='mf'&gt;2.0&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;50727&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;NET&lt;/span&gt; &lt;span class='nx'&gt;CLR&lt;/span&gt; &lt;span class='mf'&gt;3.5&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;30729&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;NET&lt;/span&gt; &lt;span class='nx'&gt;CLR&lt;/span&gt; &lt;span class='mf'&gt;3.0&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;30729&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;Media&lt;/span&gt; &lt;span class='nx'&gt;Center&lt;/span&gt; &lt;span class='nx'&gt;PC&lt;/span&gt; &lt;span class='mf'&gt;6.0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;NET4&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='nx'&gt;C&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;NET4&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='nx'&gt;E&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;Tablet&lt;/span&gt; &lt;span class='nx'&gt;PC&lt;/span&gt; &lt;span class='mf'&gt;2.0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;话说 IE9 兼容性视图 是模拟IE7的行为，那么 IE9 兼容性视图 与 IE7 有没有区别呢？肯定是有区别的，即使是 IE9 中的 IE7标准模式，与原生的IE7在渲染上也是有区别的，具体我们暂不去深究。&lt;/p&gt;

&lt;p&gt;那么既然 IE9 兼容性视图 的版本号跟 IE7 相同，如何才能判断当前是 IE9 兼容性视图，还是纯正的 IE7 呢？其实很简单，只需要判断浏览器的用户代理（User-Agent）字符串中是否包含 Trident 即可。首先检测 MSIE 的版本号是否为 7.0，然后再判断是否含有 Trident 字串，若包含则为 IE9 兼容性视图，否则则为纯正的 IE7。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;小结：&lt;/strong&gt; 至此，你应该了解了什么是浏览器模式、什么是文档模式以及它们之间的区别了，另外还了解了 IE9 兼容性视图 与 IE9 以及 IE7 的区别。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;控制默认的渲染方式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当 Internet Explorer 9 遇到未包含 &lt;code&gt;X-UA-Compatible&lt;/code&gt; 标头的网页时，它将使用 &lt;code&gt;&amp;lt;!DOCTYPE&amp;gt;&lt;/code&gt; 指令来确定如何显示该网页。 如果该指令丢失或未指定基于标准的文档类型，则 Internet Explorer 9 将以 IE5 模式（怪异模式）来显示该网页。&lt;/p&gt;

&lt;p&gt;如果 &lt;code&gt;&amp;amp;lt;!DOCTYPE&amp;amp;gt;&lt;/code&gt; 指令指定了基于标准的文档类型，则 Internet Explorer 9 将以 IE9 模式显示该网页，但出现以下情况时除外：&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;为该网页启用了兼容性视图。&lt;/li&gt;
    &lt;li&gt;该网页是在 Intranet 区域中加载的，并且已将 Internet Explorer 9 配置为使用兼容性视图来显示 Intranet 区域中的网页。&lt;/li&gt;
    &lt;li&gt;已将 Internet Explorer 9 配置为使用兼容性视图来显示所有网站。&lt;/li&gt;
    &lt;li&gt;已将 Internet Explorer 9 配置为使用&lt;a href='http://msdn.microsoft.com/en-us/library/dd567845(v=VS.85).aspx' target='_blank'&gt;兼容性视图列表（其实是个黑名单，其中指定了一组始终使用兼容性视图显示的网站）&lt;/a&gt;。&lt;/li&gt;
    &lt;li&gt;已使用开发人员工具覆盖在该网页中指定的设置。&lt;/li&gt;
    &lt;li&gt;该网页遇到了页面布局错误，并且已将 Internet Explorer 9 配置为，通过在兼容性视图中重新打开网页来自动从此类错误中恢复。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，可以使用下面的注册表项来控制 Internet Explorer 对未包含 X-UA-Compatible 标头的页面的处理方式。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HKEY_LOCAL_MACHINE (or HKEY_CURRENT_USER)
     SOFTWARE
          Microsoft
               Internet Explorer
                    Main
                         FeatureControl
                              FEATURE_BROWSER_EMULATION
                                   iexplore.exe = (DWORD)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;DWORD&lt;/code&gt; 值必须等于下列值之一：&lt;/p&gt;
&lt;table class='table' style='margin:10px 0;font-size:12px;'&gt;
	&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;值&lt;/td&gt;&lt;td&gt;说明&lt;/td&gt;&lt;/tr&gt;
		&lt;tr&gt;&lt;td&gt;7000&lt;/td&gt;&lt;td&gt;包含基于标准的 &amp;lt;!DOCTYPE&amp;gt; 指令的页面将以 IE7 模式显示。&lt;/td&gt;&lt;/tr&gt;
		&lt;tr&gt;&lt;td&gt;8000&lt;/td&gt;&lt;td&gt;包含基于标准的 &amp;lt;!DOCTYPE&amp;gt; 指令的页面以 IE8 模式显示。&lt;/td&gt;&lt;/tr&gt;
		&lt;tr&gt;&lt;td&gt;8888&lt;/td&gt;&lt;td&gt;页面始终以 IE8 模式显示，而不考虑 &amp;lt;!DOCTYPE&amp;gt; 指令。 （这可绕过前面列出的例外情况。）&lt;/td&gt;&lt;/tr&gt;
	&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;关于IE浏览器确定文档模式的整个流程，可以参看这篇文章 &lt;a href='http://blogs.msdn.com/b/ie/archive/2010/03/02/how-ie8-determines-document-mode.aspx'&gt;How IE8 Determines Document Mode&lt;/a&gt;，文中详细阐述了整个流程与内部机制。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;小结：&lt;/strong&gt; 仍然坚持使用 &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;，可最大程度减小发生错误的几率。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文档模式的检测&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在 JavaScript 中可以通过 &lt;code&gt;documentMode&lt;/code&gt; 来检测文档模式，在 IE6 和 IE7 中是使用 &lt;code&gt;compatMode&lt;/code&gt; 来确定文档模式的，这个属性自 IE8 开始已经被 &lt;code&gt;documentMode&lt;/code&gt; 所替代。&lt;/p&gt;

&lt;p&gt;那么，如果需要兼容 IE6 和 IE7 的话（必须的 &amp;#8230;），则相应的检测代码大致如下：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;engine&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kc'&gt;null&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;window&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;navigator&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;appName&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Microsoft Internet Explorer&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
   &lt;span class='c1'&gt;// This is an IE browser. What mode is the engine in?&lt;/span&gt;
   &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;documentMode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='c1'&gt;// IE8 or later&lt;/span&gt;
      &lt;span class='nx'&gt;engine&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;documentMode&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
   &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='c1'&gt;// IE 5-7&lt;/span&gt;
   &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nx'&gt;engine&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;// Assume quirks mode unless proven otherwise&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;compatMode&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='p'&gt;{&lt;/span&gt;
         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;compatMode&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;CSS1Compat&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
            &lt;span class='nx'&gt;engine&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;// standards mode&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='c1'&gt;// There is no test for IE6 standards mode because that mode&lt;/span&gt;
      &lt;span class='c1'&gt;// was replaced by IE7 standards mode; there is no emulation.&lt;/span&gt;
   &lt;span class='p'&gt;}&lt;/span&gt;
   &lt;span class='c1'&gt;// the engine variable now contains the document compatibility mode.&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;IE6 和 IE7 中的 &lt;code&gt;compatMode&lt;/code&gt; 有两个可能的值“CSS1Compat”和“BackCompat ”，分别对应了 IE6 和 IE7 中的标准模式和怪异模式。上面的代码首先假定是怪异模式，然后再试图推翻假设。这里没有包含“IE6 标准模式”，因为它已经被 IE7标准模式 所替代，没有模拟的情况。&lt;/p&gt;

&lt;p&gt;这里要注意，不同的文档模式对 JavaScript 也有&lt;a href='http://blogs.msdn.com/b/ie/archive/2011/03/24/ie9-s-document-modes-and-javascript.aspx'&gt;一些影响&lt;/a&gt;，我们不必去深究不同文档模式对 JavaScript 有何种不同影响，只需要在编码时进行特定的 &lt;a href='http://kangax.github.com/cft/'&gt;特性检测&lt;/a&gt; 即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;小结：&lt;/strong&gt; 一般情况下是没必要进行文档模式检测的，对于样式兼容我们可以写 CSS hack，而对于 JavaScript 来说，则更加推荐特性检测，而不是检测浏览器本身。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;浏览器模式与文档模式之间的关系&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;浏览器模式可以决定页面默认的文档模式，但文档模式可能会受其他因素影响而改变，如上文所述。如果浏览器模式与文档模式设置不同的话，会不会有什么影响呢？&lt;/p&gt;

&lt;p&gt;我们已经知道浏览器模式主要用于标识浏览器本身，原则上不会对页面渲染产生影响。但是我们又知道，浏览器模式可以影响条件注释，所以如果你的页面中有条件注释的话，那么浏览器模式的变化就会影响到页面渲染。&lt;/p&gt;

&lt;p&gt;服务器端只能通过浏览器模式所标识的版本来确定客户端浏览器的版本，如果你将浏览器模式标识为IE9，但文档模式选择为IE7标准的话，就可能会有问题。不过这还要看服务器端是否有针对不同浏览器的处理策略，如果服务器端并未对不同浏览器的输出做差异化处理的话，那么这两个模式选项不同就不会有问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;小结：&lt;/strong&gt; 如果服务器端对不同浏览器的输出做了差异化处理，那么浏览器模式和文档模式不一致就可能产生问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;结语&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本文参考了大量现有文献，详细阐述了各种模式的区别以及它们之间的关系。相信通过上面的叙述，你已经能够区分这些浏览器模式或者文档模式以及它们之间的关系了，每节的结论在小结中已有阐述，希望能够对你有所帮助。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考文献&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href='http://en.wikipedia.org/wiki/Browser_wars'&gt;http://en.wikipedia.org/wiki/Browser_wars&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://meyerweb.com/eric/thoughts/2008/01/24/almost-target/'&gt;http://meyerweb.com/eric/thoughts/2008/01/24/almost-target/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://developer.mozilla.org/en-US/docs/Images,_Tables,_and_Mysterious_Gaps'&gt;https://developer.mozilla.org/en-US/docs/Images,_Tables,_and_Mysterious_Gaps&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://en.wikipedia.org/wiki/Document_Type_Declaration'&gt;http://en.wikipedia.org/wiki/Document_Type_Declaration&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://dev.w3.org/html5/spec/#the-doctype'&gt;http://dev.w3.org/html5/spec/#the-doctype&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://blogs.msdn.com/b/ie/archive/2010/03/02/how-ie8-determines-document-mode.aspx'&gt;http://blogs.msdn.com/b/ie/archive/2010/03/02/how-ie8-determines-document-mode.aspx&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://kangax.github.com/cft/'&gt;http://kangax.github.com/cft/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://blogs.msdn.com/b/ie/archive/2011/03/24/ie9-s-document-modes-and-javascript.aspx'&gt;http://blogs.msdn.com/b/ie/archive/2011/03/24/ie9-s-document-modes-and-javascript.aspx&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://msdn.microsoft.com/en-us/library/cc288325(v=vs.85).aspx'&gt;http://msdn.microsoft.com/en-us/library/cc288325(v=vs.85).aspx&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://developer.mozilla.org/en-US/docs/Quirks_Mode_and_Standards_Mode'&gt;https://developer.mozilla.org/en-US/docs/Quirks_Mode_and_Standards_Mode&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://developer.mozilla.org/en-US/docs/Gecko&amp;apos;s_Almost_Standards_Mode'&gt;https://developer.mozilla.org/en-US/docs/Gecko's_Almost_Standards_Mode&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://blogs.msdn.com/b/ie/archive/2009/02/16/just-the-facts-recap-of-compatibility-view.aspx'&gt;http://blogs.msdn.com/b/ie/archive/2009/02/16/just-the-facts-recap-of-compatibility-view.aspx&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://www.quirksmode.org/css/quirksmode.html'&gt;http://www.quirksmode.org/css/quirksmode.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://hsivonen.iki.fi/doctype/'&gt;http://hsivonen.iki.fi/doctype/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://blogs.msdn.com/b/ie/archive/2011/03/24/ie9-s-document-modes-and-javascript.aspx'&gt;http://blogs.msdn.com/b/ie/archive/2011/03/24/ie9-s-document-modes-and-javascript.aspx&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://developer.mozilla.org/en-US/docs/Mozilla_Quirks_Mode_Behavior'&gt;https://developer.mozilla.org/en-US/docs/Mozilla_Quirks_Mode_Behavior&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='https://developer.mozilla.org/en-US/docs/Gecko&amp;apos;s_Almost_Standards_Mode'&gt;https://developer.mozilla.org/en-US/docs/Gecko's_Almost_Standards_Mode&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://meyerweb.com/eric/css/tests/almost-standards.html'&gt;http://meyerweb.com/eric/css/tests/almost-standards.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href='http://www.opera.com/docs/specs/doctype/'&gt;http://www.opera.com/docs/specs/doctype/&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Jekyll 中如何保存文章草稿</title>
   <link href="http://44ux.com/blog/2012/10/17/jekyll-post-draft"/>
   <updated>2012-10-17T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/10/17/jekyll-post-draft</id>
   <content type="html">&lt;p&gt;当我们写文章博客时，经常需要保存未完成的草稿，但是 &lt;a href='https://github.com/mojombo/jekyll'&gt;Jekyll&lt;/a&gt; 生成站点时，默认会遍历 &lt;code&gt;_post&lt;/code&gt; 目录下的所有 &lt;code&gt;.md&lt;/code&gt; 类型的文件。其实，通过一点简单的设置，就可以达到保存草稿的目的。&lt;/p&gt;

&lt;p&gt;首先我们来熟悉一下 Jekyll 中使用的 &lt;a href='http://yaml.org/'&gt;YAML&lt;/a&gt; 格式的头信息，任何包含 YAML 头信息的文件都会被 Jekyll 特殊处理，这些头信息必须在文件内容的最顶端，用三个中划线分隔：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
title: Blogging Like a Hacker
---&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当使用 UTF-8 编码时，要确保文件是无 BOM 格式的，尤其是 Windows 用户，否则还可能导致&lt;a href='http://44ux.com/blog/2012/10/10/invalid-byte-sequence-in-gbk/'&gt;Jekyll在Windows下生成_site目录为空&lt;/a&gt;的错误。&lt;/p&gt;

&lt;p&gt;Jekyll 中有以下几个预定义的全局变量：&lt;/p&gt;
&lt;table class='table' style='font-size:12px;margin:10px 0;'&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 变量 &lt;/td&gt;
		&lt;td&gt; 描述 &lt;/td&gt;
	&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; &lt;code&gt;layout&lt;/code&gt; &lt;/td&gt;
		&lt;td&gt; 如果设置了，则指定了所使用的布局文件，使用不带后缀名的布局文件名作为值。布局文件必须放在&lt;code&gt;_layouts&lt;/code&gt; 目录中。&lt;/td&gt;
	&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; &lt;code&gt;permalink&lt;/code&gt; &lt;/td&gt;
		&lt;td&gt; 如果你希望当前文章的永久链接不同于默认的 /year/month/day/title.html 形式，则可设置该变量，它将作为最后生成文章的 &lt;span class='caps'&gt;URL&lt;/span&gt;。&lt;/td&gt;
	&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; &lt;code&gt;published&lt;/code&gt; &lt;/td&gt;
		&lt;td&gt; 如果你不想让某篇文章在生成的站点中出现，可将此变量设置为 false。&lt;/td&gt;
	&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; &lt;code&gt;category&lt;/code&gt;/&lt;code&gt;categories&lt;/code&gt; &lt;/td&gt;
		&lt;td&gt;可以指定一个或多个该文章所属的类别，可以以  &lt;a href='http://en.wikipedia.org/wiki/YAML#Lists' target='_blank'&gt;YAML 列表&lt;/a&gt;的形式指定。&lt;/td&gt;
	&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; &lt;code&gt;tags&lt;/code&gt; &lt;/td&gt;
		&lt;td&gt; 与文章类别类似，也可以为文章指定一个或多个标签，同样适用 &lt;span class='caps'&gt;YAML&lt;/span&gt; 列表或空格分隔的字符串。 &lt;/td&gt;
	&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;任何其他非预定义的变量，都将在转换时被发送到 &lt;a href='http://liquidmarkup.org/'&gt;Liquid&lt;/a&gt; 模板引擎中，例如设置文章标题的话可以在布局模板中使用下面的代码进行设置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;Jekyll 中如何保存文章草稿&amp;lt;/title&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们已经熟悉了 Jekyll 中的这些配置选项的作用了，那么保存草稿的话就是将 &lt;code&gt;published&lt;/code&gt; 属性设置为 &lt;code&gt;false&lt;/code&gt; 即可，这个文件就不会生成文章页面了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
title: Blogging Like a Hacker
published: false
---&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过需要注意的是，只要你的文件提交到了 &lt;a href='http://github.com/'&gt;Github&lt;/a&gt;，那么还是有可能被人看到的（如果你的粉丝经常关注你所提交的代码的话）。所以保存草稿时还是要酌情处理，看草稿阶段是否能够见人接客。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Git 每次提交时总是要求输入用户名和密码</title>
   <link href="http://44ux.com/blog/2012/10/13/why-is-git-always-asking-for-my-password"/>
   <updated>2012-10-13T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/10/13/why-is-git-always-asking-for-my-password</id>
   <content type="html">&lt;p&gt;在使用 &lt;a href='http://44ux.com/tags.html#Git-ref'&gt;Git&lt;/a&gt; 的时候，经常会遇到需要频繁输入密码的情况，在每次 commit 的时候都要求输入你的用户名和密码，如果提交频繁的话甚是不便。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE：&lt;/strong&gt; 如果你在用 Mac 并且刚刚升级到 Mountain Lion，那么会导致 &lt;code&gt;git&lt;/code&gt; 命令找不到的错误，请参见这篇文章&lt;a href='http://44ux.com/blog/2012/08/27/mountain-lion-git-fix/'&gt;《Mountain Lion 中 Git “Command Not Found” 错误的解决办法》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;那么，究竟为什么会出现这种情况呢？答案就是，你在克隆（clone）分支时使用了 HTTPS 的地址，如图所示：&lt;/p&gt;

&lt;p&gt;&lt;img alt='clone https' src='http://www.44ux.com/content/uploads/2012/10/clone-https.png' /&gt;&lt;/p&gt;

&lt;p&gt;HTTPS 的地址是做什么用的呢？其实它主要是用在一些防火墙或者代理服务器设置比较严格的情况下的，比如有些公司是禁止使用 SSH 连接外网，那么在这种情况下要想使用 Git 的话，就只能用 HTTPS 的方式了。&lt;/p&gt;

&lt;p&gt;使用 HTTPS 的方式，也有储存密码的方式，本文后面会讲到。我们这里首推的方式是切换到 SSH，如果你的网络环境支持的话。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;切换到 SSH 方式（推荐）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你之前没有设置过 SSH 的话，可以参考&lt;a href='https://help.github.com/articles/generating-ssh-keys'&gt;官方文档&lt;/a&gt;，虽然是英文的，不过结合截图仔细看看都可以理解的，这里就不翻译了。&lt;/p&gt;

&lt;p&gt;通过命令行工具切换 URL 的步骤如下：&lt;/p&gt;

&lt;p&gt;打开你在 github.com 上的 repo&lt;/p&gt;

&lt;p&gt;&lt;img alt='clone https' src='http://www.44ux.com/content/uploads/2012/10/ssh-clone-url.png' /&gt;&lt;/p&gt;

&lt;p&gt;选择 SSH 克隆 URL，点击 URL 右侧的复制按钮将其复制到剪贴板&lt;/p&gt;

&lt;p&gt;&lt;img alt='clone https' src='http://www.44ux.com/content/uploads/2012/10/clone-url-clippy.png' /&gt;&lt;/p&gt;

&lt;p&gt;打开命令行工具，运行 &lt;code&gt;git remote set-url origin&lt;/code&gt; 例如：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;git remote &lt;span class='nb'&gt;set&lt;/span&gt;-url origin git@github.com:user/repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后再次 commit，如果出现类似：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;Permission denied &lt;span class='o'&gt;(&lt;/span&gt;publickey&lt;span class='o'&gt;)&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字样，那么说明你的 SSH key 没有设置或已经失效（譬如升级到 Mountain Lion 系统后），请重新参照上文的&lt;a href='https://help.github.com/articles/generating-ssh-keys'&gt;官方文档&lt;/a&gt;进行设置即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTPS 方式保存密码&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OSX 用户&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你的网络环境中只能使用 HTTPS 的方式，那么可以尝试安装 osxkeychain 凭据助手，并在 Git 中设置使用。注意：Git 版本要在 1.7.9 及以上才可使用。&lt;/p&gt;

&lt;p&gt;如果你装了 &lt;a href='http://mxcl.github.com/homebrew/'&gt;homebrew&lt;/a&gt; 的话，那么应该已经自带了 osxkeychain，可以通过下面的命令验证：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;git credential-osxkeychain
&lt;span class='c'&gt;# Test for the cred helper&lt;/span&gt;
Usage: git credential-osxkeychain &amp;lt;get|store|erase&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果没有安装，那么可以使用 &lt;code&gt;curl&lt;/code&gt; 下载并安装：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;git credential-osxkeychain
&lt;span class='c'&gt;# Test for the cred helper&lt;/span&gt;
git: &lt;span class='s1'&gt;&amp;#39;credential-osxkeychain&amp;#39;&lt;/span&gt; is not a git command. See &lt;span class='s1'&gt;&amp;#39;git --help&amp;#39;&lt;/span&gt;.

&lt;span class='nv'&gt;$ &lt;/span&gt;curl -s -O http://github-media-downloads.s3.amazonaws.com/osx/git-credential-osxkeychain
&lt;span class='c'&gt;# Download the helper&lt;/span&gt;

&lt;span class='nv'&gt;$ &lt;/span&gt;chmod u+x git-credential-osxkeychain
&lt;span class='c'&gt;# Fix the permissions on the file so it can be run&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在，你需要将助手安装到与 Git 的安装目录相同的位置：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;which git
&lt;span class='c'&gt;# Find where git is installed&lt;/span&gt;
/usr/local/git/bin/git

&lt;span class='nv'&gt;$ &lt;/span&gt;sudo mv git-credential-osxkeychain /usr/local/git/bin/
&lt;span class='c'&gt;# Move the file so git can access it&lt;/span&gt;
Password: &lt;span class='o'&gt;[&lt;/span&gt;enter your password&lt;span class='o'&gt;]&lt;/span&gt;

&lt;span class='c'&gt;# NOTE: the path /usr/local/git/bin may vary based on your OS version or where&lt;/span&gt;
&lt;span class='c'&gt;# you have installed Git. If `which git` showed a different value, you should&lt;/span&gt;
&lt;span class='c'&gt;# adjust the location to which you `mv` the file.  For example, if `which git`&lt;/span&gt;
&lt;span class='c'&gt;# said &amp;quot;/usr/bin/git&amp;quot;, use `sudo mv git-credential-osxkeychain /usr/bin`.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;若想让 Git 使用 osxkeychain，可以在 Git 的全局设置中进行设置：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;git config --global credential.helper osxkeychain
&lt;span class='c'&gt;# Set git to use the osxkeychain credential helper&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经过这样的设置之后，下次再克隆 HTTPS 地址时会询问你的用户名和密码，并授权给 OSX keychain。完成这些之后你的用户名和密码就会存储到 keychain 中，再也不会在 Git 中询问了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows 用户&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你是 Windows 用户，那么首先可以考虑使用 &lt;a href='http://github-windows.s3.amazonaws.com/GitHubSetup.exe'&gt;GitHub for Windows&lt;/a&gt;，它已经包含了该助手。&lt;/p&gt;

&lt;p&gt;如果你是钟爱命令行的话，可以下载对应系统的版本：&lt;/p&gt;

&lt;p&gt;&lt;a href='http://github-media-downloads.s3.amazonaws.com/windows/GitWindowsExtras.zip'&gt;Windows Vista &amp;amp; 7 版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://github-media-downloads.s3.amazonaws.com/windows/GitWindowsExtras-Fx4.zip'&gt;Windows 8 版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='https://github.com/anurse/git-credential-winstore'&gt;Source 版本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解压缩文件并将里面的 git-credential-winstore.exe 放到 git 所在的目录运行即可，下次再 commit 的时候，会弹出个窗口询问用户名和密码，填写一次即可永久保存了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE：&lt;/strong&gt; 一定要将 git-credential-winstore.exe 复制到 git 所在目录才行，比如我的目录是在 &lt;code&gt;D:\Program Files\Git\bin&lt;/code&gt; 中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux 用户&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Linux 用户可以使用 &amp;#8216;cache&amp;#8217; 认证助手包来缓存认证信息，运行下面的命令来启用凭据缓存，启用后每次输入密码将保存一小时（3600秒）：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;git config --global credential.helper &lt;span class='s1'&gt;&amp;#39;cache --timeout 3600&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面的命令可以查看 &amp;#8216;cache&amp;#8217; 认证助手的所有配置：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;git &lt;span class='nb'&gt;help &lt;/span&gt;credential-cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了这些方法之外，还有一种使用 .netrc 文件的方式，感兴趣的同学可以看看参考资料中的第一篇文章。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='https://confluence.atlassian.com/display/STASH/Permanently+authenticating+with+Git+repositories'&gt;https://confluence.atlassian.com/display/STASH/Permanently+authenticating+with+Git+repositories&lt;/a&gt; &lt;a href='https://help.github.com/articles/set-up-git'&gt;https://help.github.com/articles/set-up-git&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>CMD 和 Git 中的代理设置</title>
   <link href="http://44ux.com/blog/2012/10/13/proxy-setting-in-cmd"/>
   <updated>2012-10-13T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/10/13/proxy-setting-in-cmd</id>
   <content type="html">&lt;p&gt;前些天在公司配置 &lt;a href='https://github.com/mojombo/jekyll'&gt;Jekyll&lt;/a&gt; 的时候用到 CMD 的代理设置，这里记录一下，另附上 Git 的代理设置，以备查阅。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CMD 设置代理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在 &lt;a href='http://baike.baidu.com/view/65856.htm'&gt;cmd&lt;/a&gt; 环境下设置代理可能不是很常用，但是某些情况下还是可能会用到，比如公司的电脑只能通过设置代理访问外网，而你需要在 cmd 环境下使用 &lt;code&gt;gem&lt;/code&gt; 命令更新文件时。&lt;/p&gt;

&lt;p&gt;当然，如果你使用某些代理软件为所有通讯设置了代理，那就不需要这些设置了。&lt;/p&gt;

&lt;p&gt;为 cmd 设置代理很简单，首先打开 cmd （win + R，输入 cmd，然后按 enter 键），然后输入如下命令：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nb'&gt;set &lt;/span&gt;&lt;span class='nv'&gt;http_proxy&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;http://proxy.yourname.com:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中 &lt;code&gt;http://proxy.yourname.com&lt;/code&gt; 是你的代理服务器地址，而 &lt;code&gt;8080&lt;/code&gt; 是端口号，如果有则设置。另外，如果你的代理服务器要求用户名和密码的话，那么还需要：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nb'&gt;set &lt;/span&gt;&lt;span class='nv'&gt;http_proxy_user&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&amp;amp;lt;&amp;amp;amp;#20320;&amp;amp;amp;#30340;&amp;amp;amp;#29992;&amp;amp;amp;#25143;&amp;amp;amp;#21517;&amp;amp;gt;
&lt;span class='nb'&gt;set &lt;/span&gt;&lt;span class='nv'&gt;http_proxy_pass&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&amp;amp;lt;&amp;amp;amp;#20320;&amp;amp;amp;#30340;&amp;amp;amp;#23494;&amp;amp;amp;#30721;&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置完成后，就可以在 &lt;code&gt;cmd&lt;/code&gt; 下正常使用网络了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git 设置代理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://44ux.com/tags.html#Git-ref'&gt;Git&lt;/a&gt; 的代理设置也非常简单，一句话就搞定了：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;git config --global http://proxy.yourname.com:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果需要用户名密码的话，则设置：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;git config –global http.proxy http://user:password@proxy.yourname.com:8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中 &lt;code&gt;user&lt;/code&gt; 和 &lt;code&gt;password&lt;/code&gt; 分别为你的用户名和密码。&lt;/p&gt;

&lt;p&gt;设置完成后，可以通过如下命令来查看设置是否生效：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;git config –get –global http.proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果某一天你不喜欢她了，需要删除代理设置，那么可以使用：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;git config --system &lt;span class='o'&gt;(&lt;/span&gt;或 --global 或 --local&lt;span class='o'&gt;)&lt;/span&gt; --unset http.proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;来删除设置。&lt;/p&gt;

&lt;p&gt;PS：有些同学可能使用的 Git 的客户端，比如界面很上流的 &lt;a href='http://windows.github.com/'&gt;Github for Windows&lt;/a&gt;，里面可能并没有代理设置的选项，不过别着急，这些客户端一般在底层都是调用的命令行工具，所以同样按照上述步骤进行设置即可。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Jekyll在Windows下生成_site目录为空的解决方案</title>
   <link href="http://44ux.com/blog/2012/10/10/invalid-byte-sequence-in-gbk"/>
   <updated>2012-10-10T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/10/10/invalid-byte-sequence-in-gbk</id>
   <content type="html">&lt;p&gt;Mac 下安装 &lt;a href='https://github.com/mojombo/jekyll'&gt;Jekyll&lt;/a&gt; 非常简单，几乎不会遇到问题，但是一到了 Windows 就各种纠结。如果你不知道什么是 Jekyll 和 Github Pages，可以看一下&lt;a href='http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html'&gt;阮老师的这篇文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;本文讲述的是 _site 目录生成内容为空的解决方案，前提是你已经在 Windows 下&lt;a href='https://github.com/mojombo/jekyll/wiki/install'&gt;安装&lt;/a&gt;好了 Jekyll。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;基本症状：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在 cmd 中运行：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;jekyll --server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时命令会很快结束，但是查看站点目录中的 _site 目录却没有内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先使用：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;jekyll --server --no-auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;命令查看 Ruby 报错（也可以将 _config.yml 中的 &lt;code&gt;auto: true&lt;/code&gt; 改为 &lt;code&gt;auto: false&lt;/code&gt;），可能会出现一坨错误，其中可能包含&lt;code&gt;invalid byte sequence in GBK&lt;/code&gt;字样。&lt;/p&gt;

&lt;p&gt;那么很明显这是个编码问题，请仔细查看报错的文件位置，如果是 Ruby 本身的问题，那么有两种解决方案：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ruby代码的编码格式有问题：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;解决方案是在该ruby文件头声明正确的编码&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='c'&gt;# encoding: GB2312&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2. 读取的文件编码不对：&lt;/p&gt;

&lt;p&gt;解决方案：Ruby 在 window 中默认的文件读取编码是GBK, 因此只要在打开文件时改变编码即可。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;File.open&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;scroll.js&amp;quot;&lt;/span&gt;, &lt;span class='s1'&gt;&amp;#39;r:utf-8&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果报错位置是在 Jekyll 的目录中，例如：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;C:&lt;span class='se'&gt;\R&lt;/span&gt;uby193&lt;span class='se'&gt;\l&lt;/span&gt;ib&lt;span class='se'&gt;\r&lt;/span&gt;uby&lt;span class='se'&gt;\g&lt;/span&gt;ems&lt;span class='se'&gt;\1&lt;/span&gt;.9.1&lt;span class='se'&gt;\g&lt;/span&gt;ems&lt;span class='se'&gt;\j&lt;/span&gt;ekyll-0.11.2&lt;span class='se'&gt;\l&lt;/span&gt;ib&lt;span class='se'&gt;\j&lt;/span&gt;ekyll&lt;span class='se'&gt;\c&lt;/span&gt;onvertible.rb:27:in &lt;span class='sb'&gt;`&lt;/span&gt;read_yaml&lt;span class='sb'&gt;`&lt;/span&gt;: invalid byte sequence in US-ASCII &lt;span class='o'&gt;(&lt;/span&gt;ArgumentError&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么我们可以看到，在 convertible.rb 文件中第27行出现错误（具体行号见实际报错提示），那么我们找到这一行：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;self.content &lt;span class='o'&gt;=&lt;/span&gt; File.read&lt;span class='o'&gt;(&lt;/span&gt;File.join&lt;span class='o'&gt;(&lt;/span&gt;base, name&lt;span class='o'&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将其修改为：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;self.content &lt;span class='o'&gt;=&lt;/span&gt; File.read&lt;span class='o'&gt;(&lt;/span&gt;File.join&lt;span class='o'&gt;(&lt;/span&gt;base, name&lt;span class='o'&gt;)&lt;/span&gt;, :encoding &lt;span class='o'&gt;=&lt;/span&gt;&amp;gt; &lt;span class='s2'&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即可解决。同时，一定要确保你的文章要保存为 &lt;a href='http://wenwen.soso.com/z/q118420256.htm'&gt;UTF-8 无 BOM 格式&lt;/a&gt;才行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;也有些同学在 Win7 下还需要设置环境变量：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nb'&gt;export &lt;/span&gt;&lt;span class='nv'&gt;LC_ALL&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;zh_CN.UTF-8
&lt;span class='nb'&gt;export &lt;/span&gt;&lt;span class='nv'&gt;LANG&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;zh_CN.UTF-8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 gitbash 下直接执行即可。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Insert iframe into Markdown</title>
   <link href="http://44ux.com/blog/2012/10/10/insert-iframe-into-markdown"/>
   <updated>2012-10-10T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/10/10/insert-iframe-into-markdown</id>
   <content type="html">&lt;p&gt;&lt;a href='http://en.wikipedia.org/wiki/Markdown'&gt;Markdown&lt;/a&gt; 是一种非常简洁的标记语言，目前已经非常流行，并且获得了许多大网站的支持。关于 Markdown 的简介，可以查看&lt;a href='http://ued.taobao.com/blog/2012/07/03/getting-started-with-markdown/'&gt;这篇文章&lt;/a&gt;，网上也有很多教程，这里不再赘述。&lt;/p&gt;

&lt;p&gt;Markdown 虽然很简洁，但也有一些小瑕疵，比如不支持 &amp;#8220;target=&amp;#8217;_blank&amp;#8217;&amp;#8221; 的链接等，不过这些都可以用原生的 html 来解决，因为 Markdown 中可以直接嵌入 html。&lt;/p&gt;

&lt;p&gt;Markdown 中解析 html 相对比较严格，如果不合规矩就可能会遇到问题。&lt;/p&gt;

&lt;p&gt;例如我们要在 Markdown 格式的文章中插入 &lt;a href='http://www.slideshare.net'&gt;SlideShare&lt;/a&gt; 中的 PPT， SlideShare 网站给出的代码如下：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;iframe src=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;http://www.slideshare.net/slideshow/embed_code/8911052&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; width=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;427&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; height=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;356&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; frameborder=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;0&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; marginwidth=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;0&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; marginheight=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;0&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; scrolling=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;no&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; style=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; allowfullscreen&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt; &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;/iframe&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt; &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;div style=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;margin-bottom:5px&lt;span class='ni'&gt;&amp;amp;quot;&amp;amp;gt;&lt;/span&gt; &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;strong&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt; &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;a href=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;http://www.slideshare.net/jiguang/javascript-8911052&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; title=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;Javascript&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#27491;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#21017;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#34920;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#36798;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#24335;&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; target=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;_blank&lt;span class='ni'&gt;&amp;amp;quot;&amp;amp;gt;&lt;/span&gt;Javascript&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#27491;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#21017;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#34920;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#36798;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#24335;&lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;/a&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt; &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;/strong&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt; from &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;strong&lt;span class='ni'&gt;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;a href=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;http://www.slideshare.net/jiguang&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; target=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;_blank&lt;span class='ni'&gt;&amp;amp;quot;&amp;amp;gt;&lt;/span&gt;ji guang&lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;/a&lt;span class='ni'&gt;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;/strong&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt; &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;/div&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段内容发布之后就会出现解析错误：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;REXML could not parse this XML/HTML:
&lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;iframe src=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;http://www.slideshare.net/slideshow/embed_code/8911052&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; width=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;427&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; height=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;356&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; frameborder=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;0&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; marginwidth=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;0&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; marginheight=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;0&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; scrolling=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;no&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; style=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; allowfullscreen&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt; &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;/iframe&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt; &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;div style=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;margin-bottom:5px&lt;span class='ni'&gt;&amp;amp;quot;&amp;amp;gt;&lt;/span&gt; &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;strong&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt; &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;a href=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;http://www.slideshare.net/jiguang/javascript-8911052&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; title=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;Javascript&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#27491;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#21017;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#34920;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#36798;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#24335;&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; target=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;_blank&lt;span class='ni'&gt;&amp;amp;quot;&amp;amp;gt;&lt;/span&gt;Javascript&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#27491;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#21017;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#34920;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#36798;&lt;span class='ni'&gt;&amp;amp;amp;&lt;/span&gt;#24335;&lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;/a&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt; &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;/strong&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt; from &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;strong&lt;span class='ni'&gt;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;a href=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;http://www.slideshare.net/jiguang&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt; target=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;_blank&lt;span class='ni'&gt;&amp;amp;quot;&amp;amp;gt;&lt;/span&gt;ji guang&lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;/a&lt;span class='ni'&gt;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;/strong&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt; &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;/div&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么解决办法就是，让代码符合 XHTML 的规范，即将代码中的 allowfullscreen 属性修改为：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;allowfullscreen=&amp;quot;allowfullscreen&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即可。同样，如果要嵌入其他网站的代码，比如 Youtube 等，也会有类似的问题，解决办法相同。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Canvas toDataURL decoded by PHP</title>
   <link href="http://44ux.com/blog/2012/10/09/canvas-todataurl-decode-by-php"/>
   <updated>2012-10-09T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/10/09/canvas-todataurl-decode-by-php</id>
   <content type="html">&lt;p&gt;我们知道 Canvas 的 &lt;a href='https://developer.mozilla.org/en-US/docs/DOM/HTMLCanvasElement'&gt;toDataURL&lt;/a&gt; 方法可以生成 base64 编码的 dataURL 形式的图片到页面中，例如：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;test&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
     &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;canvas&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;getElementById&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;canvas&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
     &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;url&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;canvas&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;toDataURL&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;

     &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;newImg&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;createElement&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;img&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
     &lt;span class='nx'&gt;newImg&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;src&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;url&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
     &lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;body&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;appendChild&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;newImg&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么，如何将生成后的图片保存下来呢？&lt;/p&gt;

&lt;p&gt;如果在客户端的话，最简单的方式就是鼠标右键-&amp;gt;另存为，那么在服务器端如何保存呢？&lt;/p&gt;

&lt;p&gt;假设服务器端使用的是PHP，那么可以使用PHP的 &lt;a href='http://php.net/manual/en/function.base64-decode.php'&gt;base64_decode&lt;/a&gt; 方法，不过有几点需要注意：&lt;/p&gt;

&lt;p&gt;1，需要将空格转换为加号：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='x'&gt;$encodedData = str_replace(&amp;#39; &amp;#39;,&amp;#39;+&amp;#39;,$encodedData);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2，需要去掉前面的前缀：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='x'&gt;$encodedData = preg_replace(&amp;#39;/^data:image\/(png|jpg);base64,/&amp;#39;,&amp;#39;&amp;#39;,$encodedData);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3，前两步都可以在客户端使用 JavaScript 完成，然后将处理完的数据 post 给 PHP 页面，再调用 base64_decode 即可：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='x'&gt;$decocedData = base64_decode($encodedData);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4，解码后，可以将图片直接显示出来：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='x'&gt;header(&amp;quot;Content-type: image/png&amp;quot;);&lt;/span&gt;
&lt;span class='x'&gt;echo $decocedData;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Normalize.css 支持 HTML5 的CSS Reset</title>
   <link href="http://44ux.com/blog/2012/08/27/normalize-css-reset-for-html5"/>
   <updated>2012-08-27T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/08/27/normalize-css-reset-for-html5</id>
   <content type="html">&lt;p&gt;&lt;a href='http://necolas.github.com/normalize.css/'&gt;Nomalize.css&lt;/a&gt; 是一个支持 &lt;a href='http://jiguang.github.com/index.php/tag/html5/' title='html5'&gt;html5&lt;/a&gt; 标准的 CSS Rest，可以页面中的元素在各浏览器中表现尽量一致。目前 &lt;a href='http://necolas.github.com/normalize.css/'&gt;nomalize.css&lt;/a&gt; 有两个版本，一个版本包含了支持旧浏览器的 reset，另外一个版本只支持 IE 8+, Firefox 4+, Safari 5+, Opera, Chrome，这两个版本都可以在 &lt;a href='http://necolas.github.com/normalize.css/'&gt;官方网站&lt;/a&gt; 上下载。&lt;/p&gt;

&lt;p&gt;这里 &lt;a href='http://jiguang.github.com' title='姬光'&gt;laser&lt;/a&gt; 取最新的2.0.1版本，将其中的注释简单翻译一下，方便大家学习。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;    &lt;span class='c'&gt;/*! normalize.css v2.0.1 | MIT License | [git][4].io/normalize */&lt;/span&gt;

    &lt;span class='c'&gt;/* ==========================================================================&lt;/span&gt;
&lt;span class='c'&gt;       HTML5 display definitions&lt;/span&gt;
&lt;span class='c'&gt;       ========================================================================== */&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 更正IE 8/9中未定义的‘block’元素显示。&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;article&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;aside&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;details&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;figcaption&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;figure&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;footer&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;header&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;hgroup&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;nav&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;section&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;summary&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;display&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;block&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 更正IE 8/9中未定义的‘inline-block’元素显示&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;audio&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;canvas&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;video&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;display&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;inline&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='k'&gt;block&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 防止现代浏览器将没有controls属性的的‘audio’元素显示出来&lt;/span&gt;
&lt;span class='c'&gt;     * 移除 iOS 5 设备中多余的高度&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;audio&lt;/span&gt;&lt;span class='nd'&gt;:not&lt;/span&gt;&lt;span class='o'&gt;([&lt;/span&gt;&lt;span class='nt'&gt;controls&lt;/span&gt;&lt;span class='o'&gt;])&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;display&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;none&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;height&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 校正IE 8/9中‘hidden’属性不起作用的问题&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='nt'&gt;hidden&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;display&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;none&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/* ==========================================================================&lt;/span&gt;
&lt;span class='c'&gt;       基本&lt;/span&gt;
&lt;span class='c'&gt;       ========================================================================== */&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 1. 将默认字体设置为 sans-serif&lt;/span&gt;
&lt;span class='c'&gt;     * 2. 在不禁止用户缩放的情况下避免iOS设备方向调整后自动校正字体大小&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;html&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;font-family&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;sans-serif&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 1 */&lt;/span&gt;
        &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='k'&gt;text&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='k'&gt;size&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;adjust&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;100&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 2 */&lt;/span&gt;
        &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;ms&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='k'&gt;text&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='k'&gt;size&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;adjust&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;100&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 2 */&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 移除缺省的外边距&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;body&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;margin&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/* ==========================================================================&lt;/span&gt;
&lt;span class='c'&gt;       Links&lt;/span&gt;
&lt;span class='c'&gt;       ========================================================================== */&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 校正‘outline’在Chrome和其他浏览器间的不一致&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;a&lt;/span&gt;&lt;span class='nd'&gt;:focus&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;outline&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;thin&lt;/span&gt; &lt;span class='k'&gt;dotted&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 增强在所有浏览器中聚焦和鼠标悬停时的可读性&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;a&lt;/span&gt;&lt;span class='nd'&gt;:active&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;a&lt;/span&gt;&lt;span class='nd'&gt;:hover&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;outline&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/* ==========================================================================&lt;/span&gt;
&lt;span class='c'&gt;       排版&lt;/span&gt;
&lt;span class='c'&gt;       ========================================================================== */&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 校正 Firefox 4+，Safari 5 和 Chrome 中‘section’和‘article’内的‘h1’字体大小&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;h1&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;font-size&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;2em&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 校正IE 8/9， Safari 5 和 Chrome中样式不呈现的问题&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;abbr&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='nt'&gt;title&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;border-bottom&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;1px&lt;/span&gt; &lt;span class='k'&gt;dotted&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 校正 Firefox 4+， Safari 5 和 Chrome 中‘bolder’的样式&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;b&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;strong&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;font-weight&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;bold&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 校正 Safari 5 和 Chrome 中样式不呈现的问题&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;dfn&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;font-style&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;italic&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 校正 IE 8/9 中样式不呈现的问题&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;mark&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;background&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;#ff0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;color&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;#000&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 更正 Safari 5 和 Chrome 中奇怪的字体设置&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;code&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;kbd&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;pre&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;samp&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;font-family&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;monospace&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt; &lt;span class='k'&gt;serif&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;font-size&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;1em&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 增强所有浏览器中预格式化文本的可读性&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;pre&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;white-space&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;pre&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;white-space&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;pre&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;wrap&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='n'&gt;word&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;wrap&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;break&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;word&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 设置一致的引用类型&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;q&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;quotes&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;\201C&amp;quot;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;\201D&amp;quot;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;\2018&amp;quot;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;\2019&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 校正所有浏览器中易变且不一致的字体大小&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;small&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;font-size&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;80&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 防止所有浏览器中的‘sub’和‘sup’影响到行高（line-height）&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;sub&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;sup&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;font-size&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;75&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;line-height&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;position&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;relative&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;vertical-align&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;baseline&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='nt'&gt;sup&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;top&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;-0.5em&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='nt'&gt;sub&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;bottom&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;-0.25em&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/* ==========================================================================&lt;/span&gt;
&lt;span class='c'&gt;       嵌入内容&lt;/span&gt;
&lt;span class='c'&gt;       ========================================================================== */&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 移除在 IE 8/9 中嵌入到‘a’元素时的边框&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;img&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;border&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 更正 IE 9 中奇怪的‘overflow’表现&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;svg&lt;/span&gt;&lt;span class='nd'&gt;:not&lt;/span&gt;&lt;span class='o'&gt;(&lt;/span&gt;&lt;span class='nd'&gt;:root&lt;/span&gt;&lt;span class='o'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;overflow&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;hidden&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/* ==========================================================================&lt;/span&gt;
&lt;span class='c'&gt;       Figures&lt;/span&gt;
&lt;span class='c'&gt;       ========================================================================== */&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 更正 IE 8/9 和 Safari 5 中外边距不展示的问题&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;figure&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;margin&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/* ==========================================================================&lt;/span&gt;
&lt;span class='c'&gt;       表单&lt;/span&gt;
&lt;span class='c'&gt;       ========================================================================== */&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 定义一致的边框、外边距和内边距&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;fieldset&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;border&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;1px&lt;/span&gt; &lt;span class='k'&gt;solid&lt;/span&gt; &lt;span class='m'&gt;#c0c0c0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;margin&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt; &lt;span class='m'&gt;2px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;padding&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0.35em&lt;/span&gt; &lt;span class='m'&gt;0.625em&lt;/span&gt; &lt;span class='m'&gt;0.75em&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 1. 更正 IE 8/9 中颜色不继承的问题&lt;/span&gt;
&lt;span class='c'&gt;     * 2. 移除内边距确保人们在将fieldset设置为0时不会大跌眼镜&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;legend&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;border&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 1 */&lt;/span&gt;
        &lt;span class='k'&gt;padding&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 2 */&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 1. 更正所有浏览器中字体不继承的问题&lt;/span&gt;
&lt;span class='c'&gt;     * 2. 更正所有浏览器中字号不继承的问题&lt;/span&gt;
&lt;span class='c'&gt;     * 3. 更正 Firefox 4+， Safari 5 和 Chrome 中外边距不同的问题&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;button&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;input&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;select&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;textarea&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;font-family&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;inherit&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 1 */&lt;/span&gt;
        &lt;span class='k'&gt;font-size&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;100&lt;/span&gt;&lt;span class='o'&gt;%&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 2 */&lt;/span&gt;
        &lt;span class='k'&gt;margin&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 3 */&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 更正 Firefox 4+ 用户代理样式表（UA stylesheet）中在‘input’上&lt;/span&gt;
&lt;span class='c'&gt;     * 设置‘line-height’时使用‘!important’的问题&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;button&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;input&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;line-height&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;normal&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 1. 避免 Android 4.0.* 中的 WebKit bug ，该bug会破坏原生的‘audio&lt;/span&gt;
&lt;span class='c'&gt;     *    和‘video’控制器&lt;/span&gt;
&lt;span class='c'&gt;     * 2. 更正 iOS 中无法设置可点击的‘input’的问题&lt;/span&gt;
&lt;span class='c'&gt;     * 3. 增强图片类型以及其他类型的‘input’中指针的可用性以及样式的一致性&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;button&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;html&lt;/span&gt; &lt;span class='nt'&gt;input&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='nt'&gt;type&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;],&lt;/span&gt; &lt;span class='c'&gt;/* 1 */&lt;/span&gt;
    &lt;span class='nt'&gt;input&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='nt'&gt;type&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;reset&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;],&lt;/span&gt;
    &lt;span class='nt'&gt;input&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='nt'&gt;type&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;appearance&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;button&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 2 */&lt;/span&gt;
        &lt;span class='k'&gt;cursor&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;pointer&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 3 */&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 重置disabled元素的默认指针样式&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;button&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='nt'&gt;disabled&lt;/span&gt;&lt;span class='o'&gt;],&lt;/span&gt;
    &lt;span class='nt'&gt;input&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='nt'&gt;disabled&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;cursor&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;default&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 1. 调整 IE 8/9 box sizing 被设置为 ‘content-box’ 的问题&lt;/span&gt;
&lt;span class='c'&gt;     * 2. 移除 IE 8/9 中多余的内边距&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;input&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='nt'&gt;type&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;],&lt;/span&gt;
    &lt;span class='nt'&gt;input&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='nt'&gt;type&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;radio&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='n'&gt;box&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;sizing&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;border&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;box&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 1 */&lt;/span&gt;
        &lt;span class='k'&gt;padding&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 2 */&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 1. 校正 Safari 5 和 Chrome 中 ‘appearance’ 被设置为 ‘searchfield’ 的问题&lt;/span&gt;
&lt;span class='c'&gt;     * 2. 校正 Safari 5 和 Chrome 中 ‘box-sizing’ 被设置为 `‘border-box’ 的问题&lt;/span&gt;
&lt;span class='c'&gt;     * (include `-moz` to future-proof)&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;input&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='nt'&gt;type&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;search&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;appearance&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;textfield&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 1 */&lt;/span&gt;
        &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;moz&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;box&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;sizing&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;content&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;box&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;box&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;sizing&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;content&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;box&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 2 */&lt;/span&gt;
        &lt;span class='n'&gt;box&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;sizing&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;content&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;box&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 移除 OS X 中 Safari 5 和 Chrome 内部的内边距以及搜索框的取消按钮&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;input&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='nt'&gt;type&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;search&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]:&lt;/span&gt;&lt;span class='nd'&gt;:-webkit-search-cancel-button&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;input&lt;/span&gt;&lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='nt'&gt;type&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;search&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]:&lt;/span&gt;&lt;span class='nd'&gt;:-webkit-search-decoration&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;appearance&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;none&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 移除 Firefox 4+ 内部的内边距&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;button&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='nd'&gt;:-moz-focus-inner&lt;/span&gt;&lt;span class='o'&gt;,&lt;/span&gt;
    &lt;span class='nt'&gt;input&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='nd'&gt;:-moz-focus-inner&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;border&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;padding&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 1. 移除 IE 8/9 中默认的垂直滚动条&lt;/span&gt;
&lt;span class='c'&gt;     * 2. 增强所有浏览器中的对对齐以及可读性&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;textarea&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;overflow&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;auto&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 1 */&lt;/span&gt;
        &lt;span class='k'&gt;vertical-align&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;top&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c'&gt;/* 2 */&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
    
    &lt;span class='c'&gt;/* ==========================================================================&lt;/span&gt;
&lt;span class='c'&gt;       表格&lt;/span&gt;
&lt;span class='c'&gt;       ========================================================================== */&lt;/span&gt;
    
    &lt;span class='c'&gt;/*&lt;/span&gt;
&lt;span class='c'&gt;     * 移除单元格间大部分的间距&lt;/span&gt;
&lt;span class='c'&gt;     */&lt;/span&gt;
    
    &lt;span class='nt'&gt;table&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;border-collapse&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;collapse&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;border-spacing&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个版本并没有包含IE6/7等古老的浏览器，感兴趣的同学可以&lt;a href='http://necolas.github.com/normalize.css/1.0.1/normalize.css'&gt;下载1.0.1版&lt;/a&gt;。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mountain Lion 中 Git “Command Not Found” 错误的解决办法</title>
   <link href="http://44ux.com/blog/2012/08/27/mountain-lion-git-fix"/>
   <updated>2012-08-27T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/08/27/mountain-lion-git-fix</id>
   <content type="html">&lt;p&gt;如果在之前的 Lion 系统中安装了 &lt;a href='http://jiguang.github.com/index.php/tag/git/' title='git'&gt;git&lt;/a&gt;，且升级到了 Mountain Lion 的话，就会出现 git 命令丢失的错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;quot;-bash: git: command not found&amp;amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当在终端中执行 git 命令时则会出现下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img alt='Git not found' src='http://jiguang.github.com/content/uploads/2012/08/git-not-found.jpeg' /&gt;&lt;/p&gt;

&lt;p&gt;不过不用担心，修复这个问题只需要两步（不过对于国内用户时间可能比较漫长）。&lt;/p&gt;

&lt;p&gt;Step 1&lt;/p&gt;

&lt;p&gt;打开 App Store 下载/更新 XCode，使其为最新版，&lt;a href='http://jiguang.github.com' title='笔者'&gt;笔者&lt;/a&gt;这里显示为 4.4.1（4F1003）。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Install command line tools' src='http://jiguang.github.com/content/uploads/2012/08/install-xcode.jpeg' /&gt;&lt;/p&gt;

&lt;p&gt;Step 2&lt;/p&gt;

&lt;p&gt;安装 Xcode 并运行，使用 Command + , 快捷键呼出 Preference 面板，转到 Downloads 面板并找到 Command Line Tools ，然后点击 Install。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Install xcode' src='http://jiguang.github.com/content/uploads/2012/08/install-command-line-tools.jpeg' /&gt;&lt;/p&gt;

&lt;p&gt;这时可能会要求你输入一个 Apple Developer ID，如果没有的话注册一个即可。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Login with apple dev id' src='http://jiguang.github.com/content/uploads/2012/08/login-with-apple-dev-id.jpeg' /&gt;&lt;/p&gt;

&lt;p&gt;Step 3&lt;/p&gt;

&lt;p&gt;好吧，其实到这步已经完成了，再次打开终端，输入 git 就可以看到熟悉的文字啦。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Test git in terminal' src='http://jiguang.github.com/content/uploads/2012/08/test-git-in-terminal.jpeg' /&gt;&lt;/p&gt;

&lt;p&gt;PS：上面几步看上去比较简单，但是对于国内用户来说 XCode 的下载和更新真是煎熬啊~&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>彻底删除 Cydia 中删不掉的无效源</title>
   <link href="http://44ux.com/blog/2012/08/22/delete-cydia-wrong-repos"/>
   <updated>2012-08-22T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/08/22/delete-cydia-wrong-repos</id>
   <content type="html">&lt;p&gt;在为 Cydia 添加源时偶尔可能手误输入错误，比如 &lt;a href='http://jiguang.github.com' title='姬光'&gt;laser&lt;/a&gt; 这次就是不小心把百度搜索结果的地址粘贴到里面，结果还悲剧的添加成功了。然后在点“编辑”就死活没有作用了。&lt;/p&gt;

&lt;p&gt;如果你也遇到这种情况，有几种解决方案可以尝试（试验机 iOS 5.1.1）：&lt;/p&gt;

&lt;p&gt;1，如果你点“编辑”时，错误的源可以直接删除，那你就太幸运了！&lt;/p&gt;

&lt;p&gt;2，使用 iFile 打开 &lt;strong&gt;/etc/apt/sources.list.d/&lt;/strong&gt; 目录，找到 &lt;strong&gt;Cydia.list&lt;/strong&gt;这个文件，用文本编辑器打开，编辑里面的内容，将出错的无效源删除并保存，然后打开 Cydia ，如果无效源被删除了，那你也是比较幸运的。&lt;/p&gt;

&lt;p&gt;3，如果上面两种都没有解决问题的话，那么就要进行如下操作了：&lt;/p&gt;

&lt;p&gt;* 首先，同第一步操作，将无效源删除&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;然后到  &lt;strong&gt;/var/lib/apt/list/&lt;/strong&gt; 目录中，将跟无效源有关的都删除，或者完全删除&lt;/li&gt;

&lt;li&gt;进到 partial 文件夹进行同样操作，注意，如果删除了 &lt;strong&gt;partial&lt;/strong&gt; 文件夹可能会导致 Cydia 闪退&lt;/li&gt;

&lt;li&gt;最后，找到  &lt;strong&gt;/var/lib/cydia/metadata.plist&lt;/strong&gt; 这个文件并删除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;完成这些操作以后，再打开 Cydia，应该可以看到问题已经解决了。另外，还有个专门修复错误源的软件包叫做 CyFix ，laser 没有去尝试，感兴趣的同学可以试试。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;附录：常用 Cydia 中文源&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、178源—号称中文第一源&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;源地址：apt.178.com&lt;/p&gt;

&lt;p&gt;包含内容：Cydia软件、铃声、字体&lt;/p&gt;

&lt;p&gt;支持设备：iPhone、iPad等iOS设备（不包括Apple TV）&lt;/p&gt;

&lt;p&gt;源管理员：丛林狼 &lt;a href='http://weibo.com/178apt?s=6cm7D0'&gt;微博@ta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;推荐理由：中文，能看懂，更新快，资料全，并且是Baidu输入法和搜狗输入法的官方镜像地址，安全性没的说，每日更新，服务器速度快，基本不会卡Cydia。不愧是成为第一中文源。&lt;/p&gt;

&lt;p&gt;使用小技巧：&lt;/p&gt;

&lt;p&gt;快捷查看清单：&lt;a href='http://apt.178.com/applist/category/'&gt;http://apt.178.com/applist/category/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;每日更新软件：&lt;a href='http://apt.178.com/new/'&gt;http://apt.178.com/new/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、威锋源&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;源地址：&lt;a href='http://apt.weiphone.com/' title='http://apt.weiphone.com/'&gt;apt.weiphone.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;包含内容：Cydia软件、铃声、某些ipa软件的deb格式&lt;/p&gt;

&lt;p&gt;支持设备：iPhone、iPad等iOS设备&lt;/p&gt;

&lt;p&gt;管理员：weiphone管理&lt;/p&gt;

&lt;p&gt;推荐理由：背靠大山威锋论坛，技术支持能力很强，源内容更新速度较快，凭借强大的论坛提供的CDN加速，基本不卡Cydia，不过美中不足的是感觉比较乱，更新软件不太及时，不过依然很不错，推荐和178一起添加，有很多互补的地方。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3、Saurik源&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;源地址：apt.saurik.com&lt;/p&gt;

&lt;p&gt;包含软件：系统级Cydia软件，Cydia整个程序，Linux移植到iOS程序&lt;/p&gt;

&lt;p&gt;支持设备：所有iOS设备&lt;/p&gt;

&lt;p&gt;管理员：&lt;a href='http://www.saurik.com/'&gt;saurik&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;推荐理由：没有理由，Cydia自带的源，少了还真不行，里面简直是个大宝库，各种系统级软件保证让你的iOS变成Linux服务器。&lt;/p&gt;

&lt;p&gt;小技巧：直接下载deb文件，请到：&lt;a href='http://apt.saurik.com/debs/' title='http://apt.saurik.com/debs/'&gt;http://apt.saurik.com/debs/&lt;/a&gt;，后直接用系统自带搜索，开足马力迅雷下载。都是deb文件，直接安装。&lt;/p&gt;

&lt;p&gt;结余：按说这三个就够了，不过对于发烧级iOS用户肯定是不够的，所以以后会慢慢更新这个文章的，敬请关注吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4、hackulo源&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;说到这个源，大家都很陌生吧，但是我告诉你这个源的一款软件，名字叫做&lt;a href='http://www.52cydia.com/cydia-course/www.52cydia.com/debs/55.html'&gt;AppSync&lt;/a&gt;，大家肯定不会陌生了吧。没错，我们装机率最高的这个cydia软件就是Hackulo这个源里开发的。与此同时这个源还有一款叫做&lt;a href='http://cydia.hackulo.us/installous-4.3.deb'&gt;installous&lt;/a&gt;的软件。如果您是从iPhone 3G时代过来的，我想您一定不会陌生吧？顶级的XX软件中心，堪比现在的同步推那玩意儿，绝对是D版天堂的开山鼻祖，在国外臭名昭著，不过在国内一段时间曾是香饽饽呢。&lt;/p&gt;

&lt;p&gt;源地址：cydia.hackulo.us&lt;/p&gt;

&lt;p&gt;包含软件：&lt;a href='http://www.52cydia.com/debs/145.html' title='AppSync 5+'&gt;AppSync&lt;/a&gt;、installous 、&lt;a href='http://cydia.hackulo.us/crackulous-1.0.0.5.deb'&gt;crackulous&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;管理员:hackulo论坛（很大的一个外国论坛，堪比威风）&lt;/p&gt;

&lt;p&gt;推荐理由：曾经的龙头老大地位，必装&lt;a href='http://www.52cydia.com/tag/patch/' title='更多有关补丁的Cydia插件'&gt;补丁&lt;/a&gt;源地址，资源大宝库。不过目前在国内比更加凶猛的威锋源和178源取代了位置。&lt;/p&gt;

&lt;p&gt;小技巧：同样开放了deb文件直接下载功能，链接到这里，您可以直接下载那些&lt;a href='http://cydia.hackulo.us/'&gt;deb工具&lt;/a&gt;离线安装。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5、Dev Team源&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个不多说了吧，有锁机iPhone用户必备的cydia源，因为解锁要到这里下载ultrasn0w（中文名：超雪），这款解锁软件。用来解基带锁的。国行机用户可无视（国行无所）。&lt;/p&gt;

&lt;p&gt;源地址：repo666.ultrasn0w.com&lt;/p&gt;

&lt;p&gt;包含软件：ultrasn0w&lt;/p&gt;

&lt;p&gt;管理员：Dev team&lt;/p&gt;

&lt;p&gt;推荐理由：有锁机的最爱。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6、BigBoss源&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;重量级的综合型大软件源，支持cydia商店购买，都是纯正版的。&lt;/p&gt;

&lt;p&gt;源地址：apt.thebigboss.org/repofiles/cydia/&lt;/p&gt;

&lt;p&gt;包含软件：多了去了，都是正版，有各种主题，N多常用软件的官方地址。&lt;/p&gt;

&lt;p&gt;管理员：Bigboss论坛&lt;/p&gt;

&lt;p&gt;推荐理由：真正的大型软件源，cydia app的仓库，可惜是英文，不过看懂应该没问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7、ModMyi源&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;也是一个综合性的大cydia源，不过更多的是偏重于主题啊，字体啊，还有Sbsetting的主题等等，应该是文艺青年的最爱。&lt;/p&gt;

&lt;p&gt;源地址：apt.modmyi.com&lt;/p&gt;

&lt;p&gt;包含软件：多种多样，主题，美化，铃声为主&lt;/p&gt;

&lt;p&gt;管理员：ModMyi&lt;/p&gt;

&lt;p&gt;推荐理由：花样多，内容丰富，不过要注意了，收费软件极多，国外很注重版权的。也同时提醒国人并不是cydia软件都是免费的，他们也是有版权的。使用需购买。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Ember.js 中文文档</title>
   <link href="http://44ux.com/blog/2012/08/21/ember-js-doc-cn"/>
   <updated>2012-08-21T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/08/21/ember-js-doc-cn</id>
   <content type="html">&lt;p&gt;前段时间我写了&lt;a href='http://jiguang.github.com/index.php/2012/06/javascript-mvc-with-emberjs/'&gt;《JavaScript MVC with Ember.js》&lt;/a&gt;，里面提到有时间时要将文档翻译出来，但诺言一直没有兑现，最近终于把它赶了出来，希望对学习Ember.js的人有所帮助。&lt;/p&gt;

&lt;p&gt;译文比较匆忙，故保留了英文原文，以便遇到晦涩之处时可以参照原文。&lt;/p&gt;

&lt;p&gt;下面是Ember.js的官方网站以及中文文档的地址：&lt;/p&gt;

&lt;p&gt;EmberJs 官方网站：&lt;a href='http://emberjs.com/'&gt;http://emberjs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;EmberJs Github地址：&lt;a href='https://github.com/emberjs/ember.js'&gt;https://github.com/emberjs/ember.js&lt;/a&gt; （欢迎Fork指正错误）&lt;/p&gt;

&lt;p&gt;EmberJs 中文版文档访问地址：&lt;a href='http://ued.github.com/emberjs-doc-cn/'&gt;http://ued.github.com/emberjs-doc-cn/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里的文档并不包含API文档，是官方Doc的中文译本，全人工翻译。&lt;/p&gt;

&lt;p&gt;下面复制一些内容，方便大家预览：&lt;/p&gt;

&lt;h3 id='toc_what-is-ember-js'&gt;Ember.js 是什么?&lt;/h3&gt;

&lt;p&gt;Ember is a JavaScript framework for creating ambitious web applications that eliminates boilerplate and provides a standard application architecture.&lt;/p&gt;

&lt;p&gt;Ember 是一个旨在创建非凡web应用的JavaScript框架，它消除了样板（boilerplate）并提供了标准的应用程序架构。&lt;/p&gt;

&lt;h4 id='toc_eliminate-boilerplate'&gt;消除样板&lt;/h4&gt;

&lt;p&gt;There are some tasks that are common to every web application. For example, taking data from the server, rendering it to the screen, then updating that information when it changes.&lt;/p&gt;

&lt;p&gt;每个web应用中都会有些常规的任务。例如，从服务器取数据、将数据渲染到屏幕、然后当数据变更时更新信息。&lt;/p&gt;

&lt;p&gt;Since the tools provided to do this by the browser are quite primitive, you end up writing the same code over and over. Ember.js provides tools that let you focus on your app instead of writing the same code you’ve written a hundred times.&lt;/p&gt;

&lt;p&gt;由于浏览器能够提供的完成该任务的工具太过原始，致使你一遍一遍地书写相同的代码。Ember.js提供的工具可以让你专注于你的app，而不是重复地编写已经写过无数次的代码。&lt;/p&gt;

&lt;p&gt;Because we’ve built dozens of applications ourselves, we’ve gone beyond the obvious low-level event-driven abstractions, eliminating much of the boilerplate associated with propagating changes throughout your application, and especially into the DOM itself.&lt;/p&gt;

&lt;p&gt;因为我们自己已经创建过数十个应用，我们已经远远超越了明显低级的事件驱动（event-driven）的抽象概念，消除了大量贯穿于应用当中的、与传播变化相关联的样板，尤其是DOM本身。&lt;/p&gt;

&lt;p&gt;To help manage changes in the view, Ember.js comes with a templating engine that will automatically update the DOM when the underlying objects change.&lt;/p&gt;

&lt;p&gt;为了帮助你管理视图（view）中的变更，Ember.js内置了一个模板引擎，当底层的对象发生改变时它可以自动地更新DOM。&lt;/p&gt;

&lt;p&gt;For a simple example, consider this template of a Person:&lt;/p&gt;

&lt;p&gt;作为一个简单的例子，考虑这个Person的模板:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; is .&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As with any templating system, when the template is initially rendered, it will reflect the current state of the person. To avoid boilerplate, though, Ember.js will also update the DOM automatically for you if the person’s name or age changes.&lt;/p&gt;

&lt;p&gt;与其他任何的模板系统类似，模板初始渲染时会影响到person的当前状态。然而，为了避免样板，当person的name更新时Ember.js也会为你自动更新DOM。&lt;/p&gt;

&lt;p&gt;You specify your template once, and Ember.js makes sure it’s always up to date.&lt;/p&gt;

&lt;p&gt;一次性指定模板，Ember.js就会确保它实时更新。&lt;/p&gt;

&lt;h4 id='toc_provides-architecture'&gt;提供架构&lt;/h4&gt;

&lt;p&gt;Since web applications evolved from web pages, which were nothing more than static documents, browsers give you just enough rope to hang yourself with.&lt;/p&gt;

&lt;p&gt;由于web应用是由web页面演变而来，其不过是静态文档而已，浏览器已赋予你充分的能力去做任何想做的事。&lt;/p&gt;

&lt;p&gt;Ember makes it easy to divide your application into models, views, and controllers, which improves testability, makes code more modular, and helps new developers on the project quickly understand how everything fits together. The days of callback spaghetti are over.&lt;/p&gt;

&lt;p&gt;Ember可以让你很容易地将应用划分为模型（models），视图（views）和控制器（controllers），从而提高了可测性，使代码更加模块化，并且帮助项目中的新手快速理解各部分的结合原理。意面式的回调（callback spaghetti）时代结束了。（&lt;a href='https://twitter.com/laserji'&gt;译者&lt;/a&gt;注：&lt;a href='http://en.wikipedia.org/wiki/Spaghetti_code'&gt;Spaghetti code&lt;/a&gt;指具有复杂控制流程的代码。）&lt;/p&gt;

&lt;p&gt;Ember also supplies built-in support for state management, so you’ll have a way to describe how your application moves through various nested states (like signed-out, signed-in, viewing-post, and viewing-comment) out of the box.&lt;/p&gt;

&lt;p&gt;Ember同样提供了内置的对状态管理的支持，从而可以描述你的应用程序在各种不同的嵌套状态（比如登入登出，浏览文章，查看评论）间的流转。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>CentOS 5.5 上安装 Node.js</title>
   <link href="http://44ux.com/blog/2012/06/21/centos5-install-nodejs"/>
   <updated>2012-06-21T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/06/21/centos5-install-nodejs</id>
   <content type="html">&lt;p&gt;下面是我的作法，没什么问题，如果在你那里行不通可不要怪我哦。&lt;/p&gt;

&lt;p&gt;1， 安装 CentOS 开发工具包：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum groupinstall &amp;#39;Development Tools&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2，安装 Open SSL 开发包 （Node.js必须，用来支持HTTPS）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install openssl-devel &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3，找个合适的位置下载Node.js包，我一般用根路径（root）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /root&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4，下载Node.js包（请到Node.js官网上获取最新版本）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://[nodejs][1].org/dist/v0.6.19/node-v0.6.19.tar.gz&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5，解压下载后的压缩包：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gunzip node-v0.6.19.tar.gz&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6，解压node-v0.6.19.tar包：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar -xf node-v0.6.19.tar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7，在第六步应该会在你当前的目录中创建一个目录，本例中我在 /root。 CD 到那个目录：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd node-v0.6.19&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8， 运行配置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./configure&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;9， 编译 Node.js：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10， 安装编译后的文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在Node.js应该就可以工作了！我还创建了一个目录 /var/node 方便放置我全部的Node代码。&lt;/p&gt;

&lt;p&gt;参考文献：http://stuff.blat.co.za/2011/06/03/installing-node-js-on-centos-5-5/&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>JavaScript MVC with Ember.js</title>
   <link href="http://44ux.com/blog/2012/06/13/javascript-mvc-with-emberjs"/>
   <updated>2012-06-13T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/06/13/javascript-mvc-with-emberjs</id>
   <content type="html">&lt;p&gt;最近两年 JavaScript 的 MVC 框架尤为火爆，JavaScript 应用的开发已经越来越接近传统软件开发了，各种软件工程的思想以及设计模式都逐渐应用在前端开发中。关于 JavaScript 的 MVC 框架，当前最流行的当属&lt;a href='http://backbonejs.org/'&gt;Backbone.js&lt;/a&gt;了，它有着强大而活跃的社区支持以及丰富的文档资源，可称得上是当下的王者。但它的缺点也很明显，由于它过于轻量，所以很多功能都只能自己开发，它的轻量既可以说是优点也可以说是缺点，还是看能否满足你的业务需要了。&lt;/p&gt;

&lt;p&gt;本文即将介绍的 &lt;a href='http://emberjs.com/'&gt;Ember.js&lt;/a&gt; 算得上是后起的新秀，不过它本身不是个新东西，它的前身是苹果公司出品的 &lt;a href='http://sproutcore.com/'&gt;SproutCore&lt;/a&gt;，后来由原 SproutCore Team 的成员开发（或者说重命名）而产生了 Amber.js，再后来又改为 Ember.js。&lt;/p&gt;

&lt;p&gt;Ember.js 本身的功能非常强大，直接集成了模板功能，以及其他很多非常有用的功能。那么有的同学会问了，为什么选用Ember.js呢？它好在哪里呢？请大家先看一下InfoQ的这篇文章&lt;a href='http://www.infoq.com/cn/news/2012/05/js-mvc-framework'&gt;《12种JavaScript MVC框架的比较》&lt;/a&gt;，看完后可以对 JavaScript MVC 框架的现状有一定了解。网上还有一些专门将 Backbone.js 和 Ember.js 进行比较的文章&lt;a href='http://lostechies.com/derickbailey/2012/02/21/emberjs-initial-impressions-compared-to-backbone/'&gt;《EmberJS: Initial Impressions (Compared To Backbone)》&lt;/a&gt;，这说明它们还有的拼。&lt;/p&gt;

&lt;p&gt;个人认为，Ember.js 对于刚接触 MVC 的同学比较容易上手一点，抽象的层次更高一些，而且它提供的一些自动更新模板以及数据绑定等功能真的非常好用。缺点就是目前完全没有中文资料，主要是靠官方的文档，也有老外同学写些这方面的文章。不过&lt;a href='http://jiguang.github.com' title='笔者'&gt;笔者&lt;/a&gt;相信这个库马上就会崛起，所以在这里给大家做个简单介绍，后续如果时间允许的话，会将 Ember.js 的文档翻译整理出来，方便大家学习。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;什么是MVC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://zh.wikipedia.org/wiki/MVC'&gt;MVC&lt;/a&gt;模式（三层架构模式）（Model-View-Controller）是&lt;a href='http://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B'&gt;软件工程&lt;/a&gt;中的一种&lt;a href='http://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84'&gt;软件架构&lt;/a&gt;模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于Ember.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ember（之前是SproutCore 2.0）是竞争者中的新宠。它是从 SproutCore2.0 中抽取分离其核心特性并转变成一个更加紧凑的模型框架，更加适合web应用的开发。其优点是丰富的模板系统，拥有可编写的视图和UI绑定。缺点是由于太新，相关文档跟不上，目前几乎没有中文资料。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;快速开始&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ember.js 依赖于&lt;a href='http://jquery.com/'&gt;jQuery&lt;/a&gt;，要想使用Ember.js需要先引入jQuery。在Ember.js的&lt;a href='http://emberjs.com/'&gt;官方网站&lt;/a&gt;上，有个&lt;a href='https://github.com/downloads/emberjs/starter-kit/starter-kit.0.9.8.1.zip'&gt;Starter-Kit&lt;/a&gt;是专门针对初学者的开发包，里面包含了Ember.js所需的文件以及一个html文件，可以在libs/app.js中书写自定义的代码进行调试。&lt;/p&gt;

&lt;p&gt;如果是自己新建的目录和文件，那么需要分别下载Ember.js和jQuery的文件然后引入：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;script src=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;js/libs/jquery.js&lt;span class='ni'&gt;&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;/script&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt;
    &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;script src=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;js/libs/ember-0.9.8.1.min.js&lt;span class='ni'&gt;&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;/script&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt;
    &lt;span class='ni'&gt;&amp;amp;lt;&lt;/span&gt;script src=&lt;span class='ni'&gt;&amp;amp;quot;&lt;/span&gt;js/app.js&lt;span class='ni'&gt;&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;&lt;/span&gt;/script&lt;span class='ni'&gt;&amp;amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引入文件之后，可以使用jQuery的所有方法，结合Ember.js的方法开发大型App了。下面介绍一些Ember.js的基本功能，以窥一斑。&lt;/p&gt;

&lt;p&gt;首先，建立任何App都要先声明一个命名空间：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;    &lt;span class='c1'&gt;// add a namespace, Em === Ember&lt;/span&gt;
    &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;App&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;Em&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Application&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;create&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该命名空间可以保证各个App不发生冲突，同时它也有时间代理的功能，可以捕获所有冒泡的事件。如果你的App只是页面中的一部分，那么也可以指定一个根元素，这样事件就只会冒泡到该根元素：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;    &lt;span class='nb'&gt;window&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;App&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;Ember&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Application&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;create&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;
    	&lt;span class='nx'&gt;rootElement&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;#sidebar&amp;#39;&lt;/span&gt;
    &lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面介绍几个简单的例子。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 自动更新模板&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JS中的对象App.president的值fullName已经和视图绑定，当按下按钮更新对象属性时，视图也会自动更新。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;script&lt;/span&gt; &lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='o'&gt;=&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;text&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='nx'&gt;handlebars&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='nx'&gt;The&lt;/span&gt; &lt;span class='nx'&gt;President&lt;/span&gt; &lt;span class='nx'&gt;of&lt;/span&gt; &lt;span class='nx'&gt;the&lt;/span&gt; &lt;span class='nx'&gt;United&lt;/span&gt; &lt;span class='nx'&gt;States&lt;/span&gt; &lt;span class='nx'&gt;is&lt;/span&gt; &lt;span class='p'&gt;.&lt;/span&gt;
    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='err'&gt;/script&amp;amp;gt;&lt;/span&gt;
    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;p&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;button&lt;/span&gt; &lt;span class='nx'&gt;id&lt;/span&gt;&lt;span class='o'&gt;=&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;btn1&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;TEST&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='err'&gt;/button&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&lt;/span&gt;

    &lt;span class='c1'&gt;// Example 1&lt;/span&gt;
    &lt;span class='nx'&gt;App&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;president&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;Em&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nb'&gt;Object&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;create&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;
        &lt;span class='nx'&gt;firstName&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;Barack&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;,&lt;/span&gt;
        &lt;span class='nx'&gt;lastName&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;Obama&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;,&lt;/span&gt;
        &lt;span class='nx'&gt;fullName&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;firstName&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;lastName&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
            &lt;span class='c1'&gt;// Tell Ember that this computed property depends on firstName&lt;/span&gt;
            &lt;span class='c1'&gt;// and lastName&lt;/span&gt;
        &lt;span class='p'&gt;}.&lt;/span&gt;&lt;span class='nx'&gt;property&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;firstName&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;lastName&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;});&lt;/span&gt;
    &lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;#btn1&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;click&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;App&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;president&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;set&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;lastName&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Obamaomao&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2. 延迟使用的模板&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有的时候我们不希望模板在页面载入时立即显示，那么可以把它放到script标签中，并增添data-template-name属性来为模板命名，之后就可以在Ember.js中控制模板的填充和显隐了。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;div&lt;/span&gt; &lt;span class='nx'&gt;id&lt;/span&gt;&lt;span class='o'&gt;=&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;temp&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='nx'&gt;wrap&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;style&lt;/span&gt;&lt;span class='o'&gt;=&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;border&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='nx'&gt;px&lt;/span&gt; &lt;span class='nx'&gt;solid&lt;/span&gt; &lt;span class='err'&gt;#&lt;/span&gt;&lt;span class='nx'&gt;c22&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;width&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;300&lt;/span&gt;&lt;span class='nx'&gt;px&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='o'&gt;!--&lt;/span&gt; &lt;span class='nx'&gt;Insert&lt;/span&gt; &lt;span class='nx'&gt;into&lt;/span&gt; &lt;span class='nx'&gt;here&lt;/span&gt; &lt;span class='o'&gt;--&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='err'&gt;/div&amp;amp;gt;&lt;/span&gt;

    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;script&lt;/span&gt; &lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='o'&gt;=&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;text&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='nx'&gt;handlebars&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;data&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='nx'&gt;template&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='nx'&gt;name&lt;/span&gt;&lt;span class='o'&gt;=&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;info&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='nx'&gt;User&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;Albert&lt;/span&gt; &lt;span class='nx'&gt;Hofmann&lt;/span&gt;
        &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;div&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;b&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;Posts&lt;/span&gt;&lt;span class='o'&gt;:&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='err'&gt;/b&amp;amp;gt; &lt;/span&gt;
            &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;br&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
            &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;b&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;Hobbies&lt;/span&gt;&lt;span class='o'&gt;:&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='err'&gt;/b&amp;amp;gt; &lt;/span&gt;
        &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='err'&gt;/div&amp;amp;gt;&lt;/span&gt;
    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='err'&gt;/script&amp;amp;gt;&lt;/span&gt;

    &lt;span class='c1'&gt;// Example 2&lt;/span&gt;
    &lt;span class='nx'&gt;App&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;InfoView&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;Em&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;View&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;extend&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;
        &lt;span class='nx'&gt;templateName&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;info&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;posts&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;25&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;hobbies&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;Riding&lt;/span&gt; &lt;span class='nx'&gt;bicycles&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;});&lt;/span&gt;
    &lt;span class='nx'&gt;App&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;InfoView&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;create&lt;/span&gt;&lt;span class='p'&gt;().&lt;/span&gt;&lt;span class='nx'&gt;appendTo&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;#temp-wrap&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    
    &lt;span class='c1'&gt;// or&lt;/span&gt;
    &lt;span class='c1'&gt;// var info = App.InfoView.create();&lt;/span&gt;
    &lt;span class='c1'&gt;// info.appendTo(&amp;#39;#temp-wrap&amp;#39;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3. 绑定（Bindings）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一个对象中的属性可以与另外一个对象的属性进行绑定，这样其中一个更新时，另外一个也随之更新。只需要使用Binding字符串，将Binding加在绑定的属性字符串末尾即可。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;p&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;Binding&lt;/span&gt; &lt;span class='nx'&gt;Test&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;button&lt;/span&gt; &lt;span class='nx'&gt;id&lt;/span&gt;&lt;span class='o'&gt;=&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;btn2&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;TEST&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='err'&gt;/button&amp;amp;gt;&amp;amp;lt;/p&amp;amp;gt;&lt;/span&gt;

    &lt;span class='c1'&gt;// Example 3&lt;/span&gt;
    &lt;span class='nx'&gt;App&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;country&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;Ember&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nb'&gt;Object&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;create&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;
        &lt;span class='c1'&gt;// Ending a property with &amp;#39;Binding&amp;#39; tells Ember to&lt;/span&gt;
        &lt;span class='c1'&gt;// create a binding to the presidentName property.&lt;/span&gt;
        &lt;span class='nx'&gt;presidentNameBinding&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;App.president.name&amp;#39;&lt;/span&gt;
    &lt;span class='p'&gt;});&lt;/span&gt;
    &lt;span class='c1'&gt;// Later, after Ember has resolved bindings...&lt;/span&gt;
    &lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;#btn2&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;click&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;App&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;country&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;presidentName&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt;  &lt;span class='c1'&gt;// &amp;amp;quot;Barack Obama&amp;amp;quot;&lt;/span&gt;
    &lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4. 事件处理&lt;/strong&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;script&lt;/span&gt; &lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='o'&gt;=&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;text&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='nx'&gt;handlebars&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    
        &lt;span class='nx'&gt;This&lt;/span&gt; &lt;span class='nx'&gt;is&lt;/span&gt; &lt;span class='nx'&gt;a&lt;/span&gt; &lt;span class='nx'&gt;clickable&lt;/span&gt; &lt;span class='nx'&gt;area&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt;
    
    &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;lt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='err'&gt;/script&amp;amp;gt;&lt;/span&gt;

    &lt;span class='c1'&gt;// Example 4&lt;/span&gt;
    &lt;span class='nx'&gt;App&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ClickableView&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;Ember&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;View&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;extend&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;
        &lt;span class='nx'&gt;click&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;evt&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='nx'&gt;ClickableView&lt;/span&gt; &lt;span class='nx'&gt;was&lt;/span&gt; &lt;span class='nx'&gt;clicked&lt;/span&gt;&lt;span class='o'&gt;!&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;quot&lt;/span&gt;&lt;span class='p'&gt;;);&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;目前暂且介绍这几个，详细的可以查看&lt;a href='http://emberjs.com/documentation/'&gt;官方文档&lt;/a&gt;，如果看E文比较有困难的话，敬请关注本站，稍后如时间允许将放出中文文档。&lt;/p&gt;

&lt;p&gt;这里有一些相关资料，感兴趣的同学可以继续深入研究一下：&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.slideshare.net/jiguang/java-scriptmvcwithemberjs' title='Java script+mvc+with+emberjs'&gt;http://www.adobe.com/devnet/&lt;a href='http://www.slideshare.net/jiguang/java-scriptmvcwithemberjs' title='Java script+mvc+with+emberjs'&gt;html5&lt;/a&gt;/articles/flame-on-a-beginners-guide-to-emberjs.html&lt;/a&gt; &lt;a href='http://emberjs.com/documentation/'&gt;http://emberjs.com/documentation/&lt;/a&gt;&lt;br /&gt;&lt;a href='http://www.andymatthews.net/read/2012/03/07/Getting-Started-With-EmberJS'&gt;http://www.andymatthews.net/read/2012/03/07/Getting-Started-With-EmberJS&lt;/a&gt;&lt;br /&gt;&lt;a href='http://ngauthier.com/2012/02/playing-with-ember.html'&gt;http://ngauthier.com/2012/02/playing-with-ember.html&lt;/a&gt;&lt;br /&gt;&lt;a href='http://emberjs.tumblr.com/'&gt;http://emberjs.tumblr.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面是关于本文的一个PPT：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href='http://www.slideshare.net/jiguang/java-scriptmvcwithemberjs' title='Java script+mvc+with+emberjs'&gt;Java script+mvc+with+emberjs&lt;/a&gt;&lt;/strong&gt; View more &lt;a href='http://www.slideshare.net/'&gt;presentations&lt;/a&gt; from &lt;a href='http://www.slideshare.net/jiguang'&gt;ji guang&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;这里有本文介绍的代码制成的DEMO：&lt;/p&gt;

&lt;p&gt;&lt;a href='http://jiguang.github.com/demo/ember/index.html'&gt;查看DEMO&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>JavaScript类型转换与自动分号插入</title>
   <link href="http://44ux.com/blog/2012/06/04/javascript-type-conversion-and-auto-insert-semicolon"/>
   <updated>2012-06-04T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/06/04/javascript-type-conversion-and-auto-insert-semicolon</id>
   <content type="html">&lt;p&gt;今天公司群里有同学抛出这样两个式子及结果：&lt;/p&gt;

&lt;p&gt;&lt;img alt='screenshot' src='http://jiguang.github.com' /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[] + {} // &amp;quot;[object Object]&amp;quot;

{} + [] // 0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么究竟是什么原因让这两个式子以及结果看上去如此神奇呢？下面&lt;a href='http://jiguang.github.com' title='笔者'&gt;笔者&lt;/a&gt;简要分析一下其中的原理。&lt;/p&gt;

&lt;p&gt;首先来了解一下JavaScript中加性操作的基本原则：&lt;/p&gt;

&lt;p&gt;如果某个运算数是 NaN，那么结果为 NaN。&lt;/p&gt;

&lt;p&gt;-Infinity 加 -Infinity，结果为 -Infinity。&lt;br /&gt;Infinity 加 -Infinity，结果为 NaN。&lt;br /&gt;+0 加 +0，结果为 +0。&lt;br /&gt;-0 加 +0，结果为 +0。&lt;br /&gt;-0 加 -0，结果为 -0。&lt;/p&gt;

&lt;p&gt;不过，如果某个运算数是字符串，那么将采用下列规则：&lt;/p&gt;

&lt;p&gt;如果两个运算数都是字符串，把第二个字符串连接到第一个上。&lt;br /&gt;如果只有一个运算数是字符串，把另一个运算数转换成字符串，结果是两个字符串连接成的字符串。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = 5 + 5;	//两个数字
alert(result);		//输出 &amp;quot;10&amp;quot;
var result2 = 5 + &amp;quot;5&amp;quot;;	//一个数字和一个字符串
alert(result);		//输出 &amp;quot;55&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;只要有一个操作数为数组或对象，则调用其toString()方法转换为字符串进行操作。当有一个操作数为字符串时，则将另外一个操作数也转换为字符串。&lt;/p&gt;

&lt;p&gt;对于相同优先级的运算由右向左运行：&lt;/p&gt;

&lt;p&gt;那么对于 &lt;code&gt;[] + {}&lt;/code&gt; 而言，&lt;code&gt;{}&lt;/code&gt; 首先被转换为 “&lt;code&gt;[object Object]&lt;/code&gt;”，然后&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[] + &amp;quot;[object Object]&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就相当于&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot; + &amp;quot;[object Object]&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么结果则为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;[object Object]&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而对于第二个式子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{} + []&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则不仅包含了类型转换的问题，还包含了JavaScript解析器自动添加分号的问题，如果将上面两个式子改成这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[] + ({})

({}) + []&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么结果就完全相同了，都为 “&lt;code&gt;[object Object]&lt;/code&gt;” ，即都转换成了字符串再进行拼接。&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://jiguang.github.com/content/uploads/2012/06/3.png' /&gt;&lt;/p&gt;

&lt;p&gt;对于 &lt;code&gt;{} + []&lt;/code&gt; 来说，JavaScript引擎把 &lt;code&gt;{}&lt;/code&gt; 当做是一个结束的代码块，并自动在末尾添加分号。&lt;/p&gt;

&lt;p&gt;JavaScript自动加分号规则,有3条&lt;/p&gt;

&lt;p&gt;当有换行符（包括含有换行符的多行注释），并且下一个token没法跟前面的语法匹配时，会自动补分号。&lt;br /&gt;当有}时，如果缺少分号，会补分号&lt;br /&gt;当程序源代码结束时，如果缺少分号，会补分号。&lt;/p&gt;

&lt;p&gt;故该表达式等价于：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{};
+[];&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一个代码块什么也没做，而 &lt;code&gt;+[]&lt;/code&gt; 会将数组转换为数字0，故最终结果为0。&lt;/p&gt;

&lt;p&gt;但是事情似乎没那么简单，如果我们只输入一个对象，Chrome控制台能不能识别呢？&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://jiguang.github.com/index.php/tag/nodejs-2/' /&gt;&lt;/p&gt;

&lt;p&gt;上图显示的结果貌似没有报错，但是可以看到控制台输出的并不是一个对象，而只打印出了对象的属性值，这是为什么呢？&lt;/p&gt;

&lt;p&gt;从控制台的输出结果看，应该 &lt;code&gt;{a:1}&lt;/code&gt; 还是没有被当成对象，甚至单独输入 a:1 结果也是一样的。那么冒号是什么意思呢？&lt;/p&gt;

&lt;p&gt;JavaScript中的冒号一般有3种语法作用：&lt;/p&gt;

&lt;p&gt;(1)声明直接量对象的成员和声明标签&lt;br /&gt;(2)switch语句分支&lt;br /&gt;(3)?:三元表达式的false&lt;/p&gt;

&lt;p&gt;显然，这里不可能是第二和第三种，那么也没有被当做对象的成员，即只能理解为声明标签（不知是否正确）。&lt;/p&gt;

&lt;p&gt;—–本来以为已经结束了—–&lt;/p&gt;

&lt;p&gt;今天在&lt;a href='http://jiguang.github.com/index.php/tag/nodejs-2/' title='nodejs'&gt;nodejs&lt;/a&gt;控制台里，又想起了这个例子，结果试了一下发现node解析跟Chrome解析不同，那么既然都是V8，是否可以理解为Chrome控制台有问题呢？或者说它们两个对这种不太规范的写法理解不同？&lt;/p&gt;

&lt;p&gt;在Chrome控制台中，&lt;code&gt;{}&lt;/code&gt; 前面有东西不会解析错误，而 &lt;code&gt;{}&lt;/code&gt; 后面有东西时就会把 &lt;code&gt;{}&lt;/code&gt; 当成代码块。&lt;/p&gt;

&lt;p&gt;好吧，只能理解为两个控制台对于不规则写法的实现不同了，反正真正写代码时也不会出现这种情况，只要保证合乎规范的代码书写习惯就可以避免很多奇怪的错误了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;附录A 常见类型转换&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“” == “0″ // false&lt;br /&gt;0 == “” // true&lt;br /&gt;0 == “0″ // true&lt;br /&gt;false == “false” // false&lt;br /&gt;false == “0″ // true&lt;br /&gt;false == undefined // false&lt;br /&gt;false == null // false&lt;br /&gt;null == undefined // true&lt;br /&gt;” \t\r\n” == 0 // true&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;附录B 自动分号插入&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;var foo = function() {&lt;br /&gt;} // 解析错误，分号丢失&lt;br /&gt;test()&lt;/p&gt;

&lt;p&gt;前置括号&lt;/p&gt;

&lt;p&gt;在前置括号的情况下，解析器不会自动插入分号。&lt;/p&gt;

&lt;p&gt;建议绝对不要省略分号，同时也提倡将花括号和相应的表达式放在一行， 对于只有一行代码的 if 或者 else 表达式，也不应该省略花括号。 这些良好的编程习惯不仅可以提到代码的一致性，而且可以防止解析器改变代码行为的错误处理。&lt;/p&gt;

&lt;p&gt;另外补充一篇文章：&lt;a href='http://www.cnblogs.com/winter-cn/archive/2012/06/20/2556431.html'&gt;http://www.cnblogs.com/winter-cn/archive/2012/06/20/2556431.html&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>最小化DEMO测试代码</title>
   <link href="http://44ux.com/blog/2012/05/29/minimum-demo-test-code"/>
   <updated>2012-05-29T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/05/29/minimum-demo-test-code</id>
   <content type="html">&lt;p&gt;在制作页面Demo的时候，为了方便测试效果，经常要写些测试代码。对于常用的功能可以封装成函数直接使用，或者先引入个jQuery类库，待进入开发阶段时再删除。&lt;/p&gt;

&lt;p&gt;本文只提供了几个代码片段，可以直接放在页面中测试Demo，目前只包括显示隐藏和简单的Tab，后续会继续整理更多简化的Demo测试代码。&lt;/p&gt;

&lt;p&gt;当然，本文中号称“最简”也不一定是最简，可能还有更简单的写法，只是超出了&lt;a href='http://jiguang.github.com' title='笔者'&gt;笔者&lt;/a&gt;的能力范围了，还望路过大侠不吝赐教：）&lt;/p&gt;

&lt;p&gt;最简添加删除class：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// for test
function $(id){ return document.getElementById(id); }

// add or remove class
$(&amp;#39;test1&amp;#39;).onclick = function(){
    $(&amp;#39;test2&amp;#39;).className = /\s*on$/.test($(&amp;#39;test2&amp;#39;).className) ? &amp;#39;test_class&amp;#39; : &amp;#39;test_class on&amp;#39;;
};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最简显示隐藏：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// for test
function $(id){ return document.getElementById(id); }

// display none or block
$(&amp;#39;test1&amp;#39;).onclick = function(){
    $(&amp;#39;test2&amp;#39;).style.display = $(&amp;#39;test2&amp;#39;).style.display == &amp;#39;none&amp;#39; ? &amp;#39;block&amp;#39; : &amp;#39;none&amp;#39;;
};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最简Tab切换：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;style&amp;gt;
        ul li{cursor: pointer;}
        div{display: none;}
        .on{border: 1px solid #ddd;}
        .on div{display: block;}
&amp;lt;/style&amp;gt;

&amp;lt;ul id=&amp;quot;x&amp;quot;&amp;gt;
    &amp;lt;li&amp;gt;Tab1&amp;lt;div&amp;gt;content1&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Tab2&amp;lt;div&amp;gt;content2&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Tab3&amp;lt;div&amp;gt;content3&amp;lt;/div&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
document.getElementById(&amp;#39;x&amp;#39;).onclick = function(e){
    var w=window.event,t=(e||w).target||w.srcElement,c=&amp;#39;className&amp;#39;,x=this.x;
    x?x[c]=&amp;#39;&amp;#39;:0;this.x=t;t[c]=&amp;#39;on&amp;#39;;
};
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目前只整理了这几个，也是我平时用到最多的，欢迎补充！&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>JavaScript基本编码模式</title>
   <link href="http://44ux.com/blog/2012/05/16/basic-javascript-coding-pattern"/>
   <updated>2012-05-16T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/05/16/basic-javascript-coding-pattern</id>
   <content type="html">&lt;p&gt;无论编写任何程序都会接触到编码风格，设计模式等概念，编码风格一般侧重于书写规范，而设计模式则偏向于程序架构设计。本文中&lt;a href='http://jiguang.github.com' title='笔者'&gt;笔者&lt;/a&gt;整理的这些“模式”包含了编写JavaScript代码时一些常用的方法或者小技巧，可以帮助初学JavaScript的同学迅速提升代码质量。当然，在此之前首先要保证规范的书写习惯，在此之上可以再将本文介绍的知识点运用到代码编写中，则可以大大提升代码质量。&lt;/p&gt;

&lt;p&gt;下面是&lt;a href='http://jiguang.github.com' title='笔者'&gt;笔者&lt;/a&gt;整理的一些点，没有什么逻辑顺序，想到哪儿写到哪儿了，不足之处欢迎大家补充指正。&lt;/p&gt;

&lt;p&gt;1. 变量定义&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 一般写法
var a = 0;
var b = 1;
var c = &amp;#39;xxx&amp;#39;;

// 推荐写法
var a = 0,
    b = 1,
    c = &amp;#39;xxx&amp;#39;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. 尽量使用字面量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 一般写法
var obj = new Object();
        obj.a = &amp;#39;aa&amp;#39;;
        obj.b = &amp;#39;bb&amp;#39;;
        obj.c = &amp;#39;cc&amp;#39;;

var arr = new Array();

// 推荐写法
var obj = {
        a: &amp;#39;aa&amp;#39;,
        b: &amp;#39;bb&amp;#39;
    };

var arr = [];

function getXX(index){
    return [&amp;#39;aa&amp;#39;, &amp;#39;bb&amp;#39;, &amp;#39;xx&amp;#39;, 55, &amp;#39;xxb&amp;#39;](index);
}

function getMessage(code){
    return {
        404: &amp;#39;xxx&amp;#39;,
        500: &amp;#39;xxx&amp;#39;
    }[code];
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3. 正则字面量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var regex = new RegExp(&amp;#39;someting&amp;#39;);

// 当正则表达式可能变化时才使用构造函数
var cls = &amp;#39;someclass&amp;#39;,
    regex = new RegExp(cls + &amp;#39;\\s*&amp;#39;, &amp;#39;ig&amp;#39;);   // only for dynamic regexs

// 其他情况均使用字面量
var regex = /someting/ig;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4. 设置默认值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Default values
var arg = arg || &amp;#39;default&amp;#39;;  // fallback

document.getElementById(&amp;#39;test&amp;#39;).onclick = function(event){
    var event = event || window.event;
};

function getX(a){
    return a+1 || &amp;#39;default&amp;#39;;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5. 条件判断&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Conditions
answer = obj &amp;amp;#038;&amp;amp;#038; obj.xx &amp;amp;#038;&amp;amp;#038; obj.xx.xxx;

// 连续判断
if(obj &amp;amp;#038;&amp;amp;#038; obj.xx &amp;amp;#038;&amp;amp;#038; obj.xx.xxx){
    // do something
}

if(obj.xx){
    // do something
}

if(!obj){
    // do something
}

// 使用全等判断
if(a === b){
    // do something
}

// 尽量不检测浏览器，仅检测要使用的特性是否支持
if(document.getElementById){
    // ability detect
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6. 三元操作符&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Ternary
check ? value1 : value2;

// 三元操作符更简洁
var foo = (condition) ? value1 : value2;

function xx(){
    if(condition){
        return value1;
    }else{
        return value2;
    }
}

function xx(){
    return (condition) ? value1 : value2;
}

// 格式化三元操作符
foo = predicate ? &amp;quot;one&amp;quot; :
      predicate ? &amp;quot;two&amp;quot; :
                  &amp;quot;default&amp;quot;;   // format&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7. 插入迭代值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Insert iteration
var name = value[i];
    i++;

// 直接将迭代值插入
var name = value[i++];&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;DOM操作&lt;/p&gt;

&lt;p&gt;// DOM Operation el.style.display = &amp;#8216;none&amp;#8217;; // offline // operation el.style.display = &amp;#8216;block&amp;#8217;;&lt;/p&gt;

&lt;p&gt;// 使用文档碎片操作更好 var fragment = document.createDocumentFragment(); // better&lt;/p&gt;

&lt;p&gt;el.innerHTML = &amp;#8221;; // fast remove all children, but may leaks memory el.innerHTML = &amp;#8216;xxx&amp;#8217;; // ok, use it!&lt;/p&gt;

&lt;p&gt;// 小心处理NodeList var images = document.getElementsByTagName(&amp;#8216;img&amp;#8217;); // be careful! dynamic list&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;9. 事件代理&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 使用事件代理，在更外层的元素上监听事件
document.getElementById(&amp;#39;list&amp;#39;).onclick = function(evt){
    var evt = evt || window.event,
        target = evt.target || evt.srcElement;

    if(target.id === &amp;#39;btn1&amp;#39;){
        // do something
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10. 命名空间&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// An Object as a Namespace
var MYAPP = {};
    MYAPP.dom.get = function(id){};
    MYAPP.style.css = function(el, style){};

MYAPP.namespace(&amp;#39;event&amp;#39;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;11. 链式操作&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Chaining operation: return this
function setValue(el, value){
    el.value = value;
    return this;
}

var obj = new MYAPP.dom.Element(&amp;#39;span&amp;#39;);
    obj.setText(&amp;#39;hello&amp;#39;)
    .setStyle(&amp;#39;color&amp;#39;, &amp;#39;red&amp;#39;)
    .setStyle(&amp;#39;font&amp;#39;, &amp;#39;Verdana&amp;#39;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;12. 私有作用域&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Function
(function(){
    var _private = &amp;#39;cant see me&amp;#39;;

})();

(function($){
     $(&amp;#39;#xxb&amp;#39;).click(function(){ });
})(jQuery);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;13. 配置对象&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Configure Object
function foo(id, conf, null , null){
    // do somethin
}

foo(&amp;#39;bar&amp;#39;, {
    key1 : 1,
    key2 : 2
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;14. 类型转换&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Type Conversion
+&amp;#39;010&amp;#39; === 10;
Number(&amp;#39;010&amp;#39;) === 10;
parseInt(&amp;#39;010&amp;#39;, 10) === 10;
10 + &amp;#39;&amp;#39; === &amp;#39;10&amp;#39;;

+new Date() // timestamp
+new Date;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;15. 扩展原型&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 仅在需要向前兼容时才使用，其他情况不建议扩展原型对象
Array.prototype.forEach = function(){
    // only for forward compatible
};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;16. 循环优化&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 缓存
for(var i=0, j = document.getElementsByTagName(&amp;#39;a&amp;#39;).length; i&amp;lt;j; i++){
    // always cache
}

// 变量提升
var i = 0, j = xx.length;
for(; i&amp;lt;j; i++){
    // hoisting
}

// 始终检测是否自有属性，避免不必要的原型链查找
for(var i in foo){
    if(foo.hasOwnProperty(i)){
        console.log(i);  // avoid prototype chain searching
    }
}

// 如果不在乎顺序，可采用逆序循环
for(var i=xx.length; i&amp;gt;0; i--){
    // maybe faster
}

// 据说是最快的
while(i--){
    // maybe fastest
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;17. 尽量使用新特新&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Array.forEach();
getElementsByClassName();
querySlectorAll();

// 首先检测是否支持新特性，能用就用
if(document.getElementsByClassName){
    // use
}else{
    // your implementations
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;18. 惰性载入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 只判断一次，再次调用该函数则无需判断
function lazyDef(){
    if(condition1){
        lazyDef = function(){ };
    }else if(condition2){
        lazyDef = function(){ };
    }
    return lazyDef();
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;19. 私有函数与公共方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var MYAPP = {};

MYAPP.dom = (function(){
    var _setStyle = function(el, prop, value){
        console.log(&amp;#39;setStyle&amp;#39;);
    };

    return {
        setStyle: _setStyle
    };
})();

// 当 MYAPP.dom.setStyle 不慎被覆写时，_setStyle在内部仍然可用&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;20. 调试&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 尽量使用，可以传入多个参数，最后输出拼接后的字符串
console.log(&amp;#39;xx&amp;#39;,&amp;#39;xx&amp;#39;,&amp;#39;...&amp;#39;);
console.dir(someObj);
console.dirxml(someDom);
console.time(&amp;#39;timer&amp;#39;);
console.warn(&amp;#39;xxx&amp;#39;);

// 封装可以保证不小心发布出去也不会导致问题，但报错时行号可能有问题
function msg(msg){
    if(console &amp;amp;#038;&amp;amp;#038; console.log){
        console.log(msg);   // wrong line number
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本上目前想到的只有这些，欢迎大家补充讨论：）&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>好书短评之《精彩绝伦的CSS》</title>
   <link href="http://44ux.com/blog/2012/05/04/amazon-reviews-for-smashing-css"/>
   <updated>2012-05-04T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/05/04/amazon-reviews-for-smashing-css</id>
   <content type="html">&lt;p&gt;首先感谢图灵公司约稿。我想，作为本书的&lt;a href='http://jiguang.github.com' title='译者'&gt;译者&lt;/a&gt;，我也有必要以&lt;a href='http://jiguang.github.com' title='译者'&gt;译者&lt;/a&gt;的角度客观公正地发表一下对本书的拙见。我在本书的翻译过程中倾注了很多心血，算得上是尽了&lt;a href='http://jiguang.github.com' title='译者'&gt;译者&lt;/a&gt;的义务，力求尽量保存原书的行文风格与养分，起码做到翻译的“信”与“达”，至于“雅”字着实不敢奢望，还望广大读者海涵。&lt;/p&gt;

&lt;p&gt;这本在亚马逊（Amazon）上被评为4星，而且又是大名鼎鼎的Eric Meyer所作，故其质量已有所保证。不过这本书的行文风格与Eric以往的书籍有所不同，这次Eric试图采用幽默轻松的方式讲解一些时髦技术。本书的目标读者是有一些经验的开发者，用Eric的话说就是“进阶的初学者”，如果你已经是非常有经验的老鸟，那么可以将本书作为对以往知识的总体回顾与梳理，系统地审视一下这些技术，可能收获会更多。&lt;/p&gt;

&lt;p&gt;对于初学者，我的建议是也可以先购回此书翻一翻，如果真有许多无法理解的地方，那么再去查找资料仔细研读，这样即可迅速将自己提升到“进阶的初学者”的位置。所以，不要被封皮上的门槛吓到，试一试才知深浅！&lt;/p&gt;

&lt;p&gt;综上，无论是菜鸟还是老鸟，都应购回此书置于书架之上，它可以随时为你提供灵感或者解决问题的方案，是一本无可厚非的绝佳参考书。对于本书的内容，我不再赘述，我喜欢在周末悠闲地泡在书店里，随便翻翻这些可爱的书籍，如果她们令你心动了，那么不要犹豫，将她们带回家吧！&lt;/p&gt;

&lt;p&gt;下面罗列了一些外国读者在亚马逊（Amazon）上的点评，仅作参考。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;好评如潮：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5星评价：一本学习CSS的完美参考&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这是Eric Meyer的一本非常另类的书，当然，我指的不是类目，而是文笔及目的。不同于他以往的那种几乎把所有可能会用到的CSS知识全部罗列出来的刻板风格，这本书非常的轻快幽默，一气呵成。&lt;/p&gt;

&lt;p&gt;如果你最近几年已经在关注CSS技术，那么对书中的许多内容可能并不陌生。不过这本书并不是针对那些CSS老鸟的，而是为了帮助新手掌握足够多的技术来使用CSS创作酷炫的布局。书中每章都有大量例子、屏幕截图、代码以及建议。&lt;/p&gt;

&lt;p&gt;第一部分的第一章介绍了类似Firebug和SelectORacle这样的工具，第二章讨论了不同类型的选择器，并给出了存在多种可满足需求方案时的最佳选择的建议。本书的第二部分讨论了一些核心的技术，在“提示”一章，你将了解到像无单位的行高值、图像替换以及列表样式。标题为“布局”的一章回顾了浮动包含并解释了像faux列、流式漂白、惟一布局、流式栅格、圣杯等布局技术。在“效果”一章，他阐述了如何创建诸如复杂螺旋等技术。同时他也介绍了CSS弹出菜单、圆角、CSS雪碧、滑动门、视差、参差浮动以及受限的图像等技术。&lt;/p&gt;

&lt;p&gt;这本书的最后一部分是前卫技术，回顾了以往的一些CSS基本技术并提出了新的想法。表格一章展示了为表格应用样式的新技术。他建议在设计表格时使用head、body和foot，并展示了如何使用表格来制作图表或者展示地图上的数据。最后一章是前卫技术，这一章展望了&lt;a href='http://jiguang.github.com/index.php/tag/html5/' title='html5'&gt;html5&lt;/a&gt;、媒体查询、特定子元素的样式、特定列的样式、RGBa、阴影、多背景以及变换等。&lt;/p&gt;

&lt;p&gt;从教学的角度来看，这是一本非常棒的书，很适合开展一个CSS课程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5星评价：了解一点儿CSS吗？用这本书来寻找灵感与提升吧&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我终于搞懂了为啥CSS如此重要了，内容与样式分离也似乎变得有意义了。我了解CSS的基础，我也可以编写并使用简单的CSS代码来改变文档的样式。但我不知道的是，先读一下这本书即可掌握如何更好地驾驭CSS。我需要一些灵感，让我可以用CSS做些什么，因此我选择了“精彩绝伦的CSS”。&lt;/p&gt;

&lt;p&gt;这本书中的启发性与教育性就是针对我这种人的…即了解CSS的基础，但是希望掌握如何更好地使用CSS的人。Meyer精心地陈列了大量例子，并细心讲解如何使用这些例子以及这些例子的意义。例如，仅用了十页，Meyer就用样式使看起来只有行和列的表格变成了一张美国数据表，并将数据正确定位到一张美国地图上。他展示了一个终极解决方案，并分解成细小的步骤，最终结果（地图本身）可能并没啥大用，不过整个学习过程是非常有价值的。&lt;/p&gt;

&lt;p&gt;我不建议刚接触CSS的新手读这本书。这本书已假定读者有一些CSS的背景知识。然而，如果你已掌握一些基础，并在寻找可以应用在你网页上的新点子，则本书就是你的不二之选！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5星评价：一个12年Web开发经验的老鸟对&lt;a href='http://jiguang.github.com/index.php/tag/css3/' title='css3'&gt;css3&lt;/a&gt;与HTML5的理解&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;《精彩绝伦的CSS》是一本佳作，我作为一个程序员从90年代中期就开始涉猎与设计相关的一切（只是为了使我的程序正常运作），我做这些甚至早在CSS被发明之前。&lt;/p&gt;

&lt;p&gt;我目前正着手使我的设计及代码库包含HTML5和CSS3的新特性。我发现其中有一个特性非常有用，那就是只用一些简单的CSS声明就可以实现圆角，无需再用表格套表格、使用图像技巧来达到圆角的效果了，现在你可以只声明一个class包含这个属性即可：border-radius:20px;仅此而已。&lt;/p&gt;

&lt;p&gt;当然，正如CSS的所有属性一样，这些永远不能适应全部情况。你还需要插入特定的浏览器前缀（并且在低于IE9的版本中都无法工作等等等等），你可能还需仔细把玩你的布局，因为圆角元素内的任何非圆角元素都会伸出（重叠及覆盖）圆角，除非你让这些元素离开圆角一些距离，或者将这些元素也圆角化（你看没看出来我已经在应付这些问题了？）。&lt;/p&gt;

&lt;p&gt;当然，圆角并不是这本书中惟一有用的部分（这只是最让我兴奋的部分），或许本书最有用的两章是第四章：布局 和第五章：效果。同时也很有用（对于那些使用HTML5组建代码库的同学）的是第七章：（可预见的）未来，讲述了关于HTML5的内容。&lt;/p&gt;

&lt;p&gt;是的，很多内容你都可以在网上找到，而且对于计算机科学来说，印刷媒介已经成为濒危物种了，但是，当你试图寻找某个非常特殊的问题的答案时——通常在网上寻找会很费时（充斥着大量随机的垃圾内容），需要不停地搜索论坛文章来寻找答案。然而有书的话（纸质或数字的）就可以很快找到答案了。我的计算机科学书库非常庞大，有纸质的也有数字的书籍资料，并且我仍然认为它们非常实用。如果不出意外，作者会因其创作而受益，那么他们就会花更多的时间来斟酌内容的正确性，并且不会将它们放在偏离主题、语无伦次或者充斥着随机页面以及死链接或不可用的脚本和图像的网页上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5星评价：讲述进阶技巧的佳作&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;关于设计方面我学的越多就越感觉知识匮乏。本书背面的封皮写到，精彩绝伦的CSS是为那些已经掌握了一些CSS和JavaScript基础的人而作的。我想这很好，我会强迫自己多学一些新东西的。&lt;/p&gt;

&lt;p&gt;本书的第一部分是基本技术，包含两章。第一章：工具 以及第二章：选择器。作为美好开端的第一个工具是Firebug，我几乎整天在用。然后又继续讨论了其他浏览器中使用的工具，迄今一切安好。第二章讲述的选择器已经迫使我重新回顾CSS教程了。&lt;/p&gt;

&lt;p&gt;本书最棒的部分就是它包含很多“干货”以及高级的信息。我很快意识到我的基础并不像我想象中那么牢靠，我还需要了解更多知识来理解这本书中的内容。幸运地，书中的每个提示都相对独立，因此我可以随便翻到某个提示或者高级内容现学现卖做些好玩的东西。&lt;/p&gt;

&lt;p&gt;在介绍中，Eric Meyer说道这本书适合进阶的初学者，那么如果你之前没有用过CSS的话，这本书可能可能不太适合你。这本书中有许多有用的信息，我正指望从书中学些很酷的技巧并扩展我的技能。这是一本值得摆上书架的非常棒的CSS参考书。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5星评价：这个男人如是说…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我不确定是否读过Eric Meyer写过的每一本书，不过对于我读过的4本来说，我最钟爱这一本。Eric是CSS方面的“百事通”，国际知名的500强公司顾问，标准制定的重度参与者…并且最棒的是，一个布道士及导师。Eric的“CSS权威指南”是最全面的CSS参考书，不过并不太容易读懂。他的“Eric Meyer谈CSS”第一部分及第二部分是非常倾向于开发者的角度的，每本都是通过一系列的章节讲述如何使用CSS布局网站的。每个都展示了如何通过CSS达到特殊的目标，并且你可以清楚地看到网站的改进，以及网站是如何通过CSS变得易于管理的。这是一本学习CSS并付诸行动的好书，这么说吧，是替代之前类似CSS字典的好书。&lt;/p&gt;

&lt;p&gt;这本书非常不同，如果非要我说些什么的话，可以说这是一本对现今CSS技术的深入指导。我尤其喜爱这本书的行文风格。这是一本Smashing杂志网站之外发行的，并且是一系列针对网站设计者及开发者书籍的一部分。而且在本书的装帧设计上也看到了编辑的心血与技艺。&lt;/p&gt;

&lt;p&gt;当然，最重要的还是本书的内容。第一章：工具 包含了我之前从未见识的内容，并且全部毫无例外地非常有用。如果你要开发网站，你可能会在本地服务器上使用某个浏览器快速检查你的CSS产生的效果。那么，一旦工作良好，则再预览几次。Firebug工具可以使你在Firefox浏览器中动态地检查网页的许多细节，并且不仅可以向你展示可能遇到的问题，还能展示浏览器实际是如何解释你的样式表的。浏览器其实包含内部样式，这些内部样式可以影响你的设计。Firefox、Opera、Safari以及IE的工具都有提到，这本书的价格很值得。第二章全面覆盖了选择器，还包含了关于子选择器、兄弟选择器以及子串选择的精辟见解。&lt;/p&gt;

&lt;p&gt;第二部分，第三、四、五章涵盖了核心技术，像布局、细节样式编写以及随处可能用到的效果等，只不过这里是以简明且“成熟”的方式呈现的。标准的两栏和三栏布局是深入讨论的部分并且使用了极易扩展的技术。“提示”一章包含了很多深入见解。你知道如何为HTML标签应用样式吗？“效果”一章包含了迄今为止关于CSS3的一些东西。&lt;/p&gt;

&lt;p&gt;第三部分是前卫技术，展望了HTML5以及未完成的CSS3样式等元素。可能最令人惊喜的内容就是第六章关于表格的部分了…是的，表格。Eric演示了我所未知的关于表格的奇特技术，比如对行标题的更改，以及使用CSS来完全重新排列一个HTML表格，并将每个单元格单独放在一张美国地图上。太神奇了！&lt;/p&gt;

&lt;p&gt;这不是一本适合初学者的书。不过如果你已经使用CSS有段时间了，那么这本书将使你马上跟上潮流，形成对CSS内部工作原理的深入见解，并且可能激发你的无限创造力。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>高效CSS开发核心要点</title>
   <link href="http://44ux.com/blog/2012/05/03/high-efficient-css-technical"/>
   <updated>2012-05-03T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/05/03/high-efficient-css-technical</id>
   <content type="html">&lt;p&gt;本文参考了业界规范及主流趋势，详尽整理了CSS开发中需要注意的要点以及关乎性能的一些问题，希望对您有所帮助，也可收藏作为参考。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 基本原则&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.1 把CSS放在HTML页面头部&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于浏览器需要在所有的样式表加载完成后才能开始渲染页面，样式表加载完成之前页面会一直显示空白，因此需要将样式表放在头部。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@import&lt;/code&gt; 相当于把 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 标签放在页面的底部，因此从优化性能的角度考虑，应避免使用 &lt;code&gt;@import&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.2 避免使用 CSS Expressions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Expression 只有 IE 支持，而且他的执行比大多数人想象的要频繁的多。不仅页面渲染和改变大小 (resize) 时会执行，页面滚动 (scroll) 时也会执行，甚至连鼠标在页面上滑动时都会执行。在 expression 里面加上一个计数器就会知道，expression 的执行上相当频繁的。鼠标的滚动很容易就会使 expression 的执行次数超过 10000。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.3 CSS简写&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;1 16进制颜色值简写&lt;/p&gt;

&lt;p&gt;color: #eebbcc;&lt;/p&gt;

&lt;p&gt;color: #ebc;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;2 属性值简写&lt;/p&gt;

&lt;p&gt;margin-top: 2px; margin-right: 5px; margin-bottom: 2em; margin-left: 15px; &amp;#8212;&amp;#8211;&amp;#187; margin: 2px 5px 2em 15px;&lt;/p&gt;

&lt;p&gt;border-width: 1px; border-style: solid; border-color: #000 &amp;#8212;&amp;#8211;&amp;#187; border: 1px solid #000&lt;/p&gt;

&lt;p&gt;font-style: italic; font-variant: small-caps; font-weight: bold; font-size: 1em; line-height: 140%; font-family: sans-serif; &amp;#8212;&amp;#8211;&amp;#187; font: italic small-caps bold 1em/140% sans-serief&lt;/p&gt;

&lt;p&gt;background-color: #f00; background-image: url(background.gif); background-repeat: no-repeat; background-attachment: fixed; background-position: 0 0; &amp;#8212;&amp;#8211;&amp;#187;background: #f00 url(background.gif) no-repeat fixed 0 0&lt;/p&gt;

&lt;p&gt;list-style-type: square; list-style-position: inside; list-style-image: url(image.gif) &amp;#8212;&amp;#8211;&amp;#187; list-style: square inside url(image.gif)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1.4 尽量抽取相似部分&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.class1{position: absolute; left: 20px; top: 30px;}
.class2{position: absolute; left: 20px; top: 30px;}
.class3{position: absolute; left: 20px; top: 30px;}
.class4{position: absolute; left: 20px; top: 30px;}
.class5{position: absolute; left: 20px; top: 30px;}
.class6{position: absolute; left: 20px; top: 30px;} 

 --------------------&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 

 .class1 .class2 .class3 .class4 .class5 .class6{
 	Position: absolute; left: 20px; top: 20px;
 }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href='http://jiguang.github.com' title='From jiguang.github.com'&gt;jiguang.github.com版权所有&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 关键要点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.1 只使用小写&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Not recommended --&amp;gt;
&amp;lt;A HREF=&amp;quot;/&amp;quot;&amp;gt;Home&amp;lt;/A&amp;gt;

&amp;lt;!-- Recommended --&amp;gt;
&amp;lt;img src=&amp;quot;google.png&amp;quot; alt=&amp;quot;Google&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.2 不要有多余的空格（划线处）&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Not recommended --&amp;gt;
&amp;lt;p&amp;gt;What?_

&amp;lt;!-- Recommended --&amp;gt;
&amp;lt;p&amp;gt;Yes please.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.3 使用utf8编码&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;html中：
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; 

css中：
@charset &amp;quot;utf-8&amp;quot;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.4 使用&lt;a href='http://jiguang.github.com/index.php/tag/html5/' title='html5'&gt;html5&lt;/a&gt;文档类型&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.5 验证HTML与CSS文档&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://validator.w3.org/nu/'&gt;验证HTML&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://jigsaw.w3.org/css-validator/'&gt;验证CSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.6 使文档语义化&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Not recommended --&amp;gt;
&amp;lt;div onclick=&amp;quot;goToRecommendations();&amp;quot;&amp;gt;All recommendations&amp;lt;/div&amp;gt;

&amp;lt;!-- Recommended --&amp;gt;
&amp;lt;a href=&amp;quot;recommendations/&amp;quot;&amp;gt;All recommendations&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.7 多媒体（多终端）兼容&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Not recommended --&amp;gt;
&amp;lt;img src=&amp;quot;spreadsheet.png&amp;quot;/&amp;gt;

&amp;lt;!-- Recommended --&amp;gt;
&amp;lt;img src=&amp;quot;spreadsheet.png&amp;quot; alt=&amp;quot;Spreadsheet screenshot.&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.8 不要使用实体引用&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Not recommended --&amp;gt;
The currency symbol for the Euro is “&amp;amp;eur;”.

&amp;lt;!-- Recommended --&amp;gt;
The currency symbol for the Euro is “€”.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.9 使用带有语义的id和class&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* Not recommended: meaningless */
#yee-1901 {}

/* Not recommended: presentational */
.button-green {}
.clear {}

/* Recommended: specific */
#gallery {}
#login {}
.video {}

/* Recommended: generic */
.aux {}
.alt {}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.10 省略零值的单位&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;margin: 0;
padding: 0;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.11 省略起始的零&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;font-size: .8em;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.12 尽量避免CSS hacks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;尝试换种解决方案&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.13 为末尾的声明添加分号&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;尽管省略末尾分号可以省略一个字节，但是非常不利于团队维护，得不偿失&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* Not recommended */
.test {
  display: block;
  height: 100px
}

/* Recommended */
.test {
  display: block;
  height: 100px;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.14 选择器的效率&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;浏览器是“从右往左”来分析 class 的，对于下面的规则&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#god &amp;amp;gt; li {font-weight: bold}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;浏览器会先查找页面上所有的“li”节点，然后再去做进一步的判断：如果它的父节点的 id 为“god”，则匹配成功。由此可知，CSS 选择器的匹配远比我们想象的要慢的多，CSS 的性能问题不容忽视。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.15 后代选择器&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#toc li {font-weight: bold}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个效率比之前的“child selector”效率更慢，而且要慢很多。浏览器先便利所有的“li”节点，然后步步上溯其父节点，直到 DOM 结构的根节点（document），如果有某个节点的 id 为“toc”，则匹配成功，否则继续查找下一个“li”节点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.16 尽量避免全局选择器&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[hidden=&amp;quot;true&amp;quot;] { ... } /* A universal rule */&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的匹配规则很明显：查找页面上的所有节点，如果有节点存在“hidden”属性，并且其属性值为“true”，则匹配成功。这是最耗时耗力的匹配，页面上的所有节点都需要进行匹配运算，这种规则应尽量避免。&lt;/p&gt;

&lt;p&gt;是用星号也一样&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#god li *&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先找到页面上的所有元素，再匹配祖先中包含li的元素，然后在这些元素中再查找父元素的id为god的元素。&lt;/p&gt;

&lt;p&gt;因此，对于全局选择器，只建议一种用法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* { margin: 0; padding: 0; /* etc. */ }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.17 避免tag+id或者class+id&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;button#goButton {...};-----&amp;amp;gt;&amp;amp;gt;#goButton
.fundation#testIcon {...};-----&amp;amp;gt;&amp;amp;gt;#testIcon&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.18 关于tag+class&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;button.indented {...}-----&amp;amp;gt;&amp;amp;gt;.button-indented {...}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;程序员们经常会给某个 Class 前面加上标签名称（Tag Name），以更精确且快速的定位该节点，但是这样往往效率更差。因为页面上的 class 在全局范围内来讲应该是唯一的，用唯一的 Class 名称来定位一个节点往往比组合定位更加快捷。事实上，这种做法也可以避免由于开发修改页面元素的类型（Tag）而导致的样式失效的情况，做到样式与元素的分离，两者独立维护。&lt;a href='http://jiguang.github.com' title='From jiguang.github.com'&gt;jiguang.github.com版权所有&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.19 尽量减少规则数量&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可以考虑将层级关系写到一个class中，不过在层级变动时就比较麻烦了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Span[mailfolder=&amp;amp;quot;true&amp;amp;quot;] &amp;amp;gt; table &amp;amp;gt; tr &amp;amp;gt; td.columnClass {...}

-------------------&amp;amp;gt;&amp;amp;gt;&amp;amp;gt;&amp;amp;gt;&amp;amp;gt;&amp;amp;gt;&amp;amp;gt;

.span-mailfolder-tbl-tdCol {...}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.20 避免过长的class命名&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可以考虑缩写&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ocHeroImage
ocEmailAddress&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果觉得难以理解，可以加入连字符或注释&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;oc-HeroImage
oc-EmailAddress&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;尽管有语义化方面的考虑，但命名还是尽量短一些，只要易于辨认即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;heroImg
emailAddr&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.21 文件名中不应有空格&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;a) 有空格的文件名会被Google当成两个关键字，可能带来更多的搜索结果，引来更多流量，是好事&lt;br /&gt;b) 有空格意味着不能省略引号，多了两个字节&lt;br /&gt;c) 空格会被浏览器自动转换为%20，老的浏览器可能不支持，如果将%20硬编码到URL中则每个实例中都多了两个字符&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;input {background: url(&amp;quot;/images/shadow background.gif&amp;quot;);}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.22 省略URI的引号&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@import url(//www.google.com/css/go.css);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.23 尽量避免后代选择器&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;treehead treerow treecell {...} -----&amp;amp;gt;&amp;amp;gt; treehead &amp;amp;gt; treerow &amp;amp;gt; treecell {...}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Descendant 选择器是耗时相对高的选择器，通常来讲，它在 CSS 里的使用应该是尽量避免的，如果能用 child 选择器替代就应该尽量这样去做。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.24 充分利用继承机制&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Color
 font
 letter-spacing
 line-height
 list-style
 text-align
 text-indent
 text-transform
 white-space
 word-spacing 

 #bookmark  &amp;amp;gt; .menu-left {list-style-image: url(blah)}

 ------------&amp;amp;gt;&amp;amp;gt;&amp;amp;gt;&amp;amp;gt;&amp;amp;gt;&amp;amp;gt;&amp;amp;gt;&amp;amp;gt;

 #bookmark  {list-style-image: url(blah)}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.25 发布之前一定要进行压缩&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可使用&lt;a href='http://yuilibrary.com/projects/yuicompressor'&gt;YUI Compressor&lt;/a&gt;或类似软件进行压缩后再发布。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://jiguang.github.com' title='From jiguang.github.com'&gt;jiguang.github.com版权所有&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 高级技巧&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.1 省略嵌入资源的协议&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;即可避免混合内容问题（mixed content issues）也可以缩减文件大小&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;!-- Not recommended --&amp;amp;gt;
&amp;amp;lt;script src=&amp;amp;quot;http://www.google.com/js/gweb/analytics/autotrack.js&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;/script&amp;amp;gt;

&amp;amp;lt;!-- Recommended --&amp;amp;gt;

&amp;amp;lt;script src=&amp;amp;quot;//www.google.com/js/gweb/analytics/autotrack.js&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;/script&amp;amp;gt;
/* Not recommended */
.example {
  background: url(http://www.google.com/images/example);
}

/* Recommended */
.example {
  background: url(//www.google.com/images/example);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.2 省略可选的标签&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#syntax-tag-omission'&gt;HTML5规范&lt;/a&gt;中指定了一些可以省略的标签，可以缩减文件大小&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;!-- Not recommended --&amp;amp;gt;
&amp;amp;lt;!DOCTYPE html&amp;amp;gt;
&amp;amp;lt;html&amp;amp;gt;
  &amp;amp;lt;head&amp;amp;gt;
    &amp;amp;lt;title&amp;amp;gt;Spending money, spending bytes&amp;amp;lt;/title&amp;amp;gt;
  &amp;amp;lt;/head&amp;amp;gt;
  &amp;amp;lt;body&amp;amp;gt;
    &amp;amp;lt;p&amp;amp;gt;Sic.&amp;amp;lt;/p&amp;amp;gt;
  &amp;amp;lt;/body&amp;amp;gt;
&amp;amp;lt;/html&amp;amp;gt;

&amp;amp;lt;!-- Recommended --&amp;amp;gt;
&amp;amp;lt;!DOCTYPE html&amp;amp;gt;
&amp;amp;lt;title&amp;amp;gt;Saving money, saving bytes&amp;amp;lt;/title&amp;amp;gt;
&amp;amp;lt;p&amp;amp;gt;Qed.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.3 文件结构&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于图像等资源一般只有CSS文件使用，故可将图像文件夹放到CSS文件同级目录，这样就可使用相对路径，节省字节数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;input {background: url(&amp;quot;images/shadow background.gif&amp;quot;);}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.4 文件夹命名&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通常文件夹会被命名为其所代表的资源的复数形式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;images
assets
fonts&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实大可不必，使用单数形式可以节省许多字节，尤其是当每个项目的结构都类似时&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;img
asset
font&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于下面一段包含58字节的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;input {background: url(&amp;quot;/images/shadow background.gif&amp;quot;);}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;优化后变为52字节，即10%的压缩：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;input {background: url(img/shadow-background.gif);}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果在使用缩写，则可进一步缩减：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;input {background: url(img/shadow-bg.gif);}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果一个项目有几百行这样的代码，那么就会节省几百字节了。如果站点访问量超大，则可节省数目客观的带宽资源。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.5 末尾声明的分号&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;前面提过，去掉末尾声明的分号可以节省字节，但不利于维护。可以考虑在压缩发布阶段去掉。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.clear {clear:both;}

.clear {clear:both}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.6 背景色简写&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;背景色简写也可节省字节，但要慎用，因为省略掉的默认属性会覆盖前面的属性。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;background-color: blue;

background: blue;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.7 滤镜简写&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;selector {
	-ms-filter: &amp;quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=65)&amp;quot;;
	filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=65);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;filter的版本是IE8以下的，–ms-filter的版本是IE9以上的，YUI会将其压缩为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;selector {
	-ms-filter:&amp;quot;alpha(opacity=65)&amp;quot;;
	filter:alpha(opacity=65);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于YUI的广泛使用极其社区开发着的强大力量，说明这种写法已经是经过深度测试的写法，可以放心使用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.8 Gzip压缩与CSS书写&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://google-styleguide.googlecode.com/svn/trunk/htmlcssguide.xml'&gt;Goolge建议&lt;/a&gt;按照字母顺序书写CSS规则，方便维护。其他公司也有自己的规范。从Gzip压缩角度，只要整个文档中的书写顺序保持一致即可，可以提高Gzip压缩比率。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;background: fuchsia;
border: 1px solid;
-moz-border-radius: 4px;
-webkit-border-radius: 4px;
border-radius: 4px;
color: black;
text-align: center;
text-indent: 2em;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.9 更少的请求比更小的尺寸重要&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;文件可以适当的合并，只保留基本的层级即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;link rel=&amp;amp;quot;stylesheet&amp;amp;quot; href=&amp;amp;quot;http://css.somedomain.com/reset.css&amp;amp;quot; type=&amp;amp;quot;text/css&amp;amp;quot; /&amp;amp;gt;
&amp;amp;lt;link rel=&amp;amp;quot;stylesheet&amp;amp;quot; href=&amp;amp;quot;http://css.somedomain.com/global.css&amp;amp;quot; type=&amp;amp;quot;text/css&amp;amp;quot; /&amp;amp;gt;
&amp;amp;lt;link rel=&amp;amp;quot;stylesheet&amp;amp;quot; href=&amp;amp;quot;http://css.somedomain.com/home.css&amp;amp;quot; type=&amp;amp;quot;text/css&amp;amp;quot; /&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href='http://jiguang.github.com' title='From jiguang.github.com'&gt;jiguang.github.com版权所有&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://en.wikipedia.org/wiki/Css'&gt;http://en.wikipedia.org/wiki/Css&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.w3.org/TR/CSS21/'&gt;http://www.w3.org/TR/CSS21/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.ibm.com/developerworks/cn/web/1109_zhouxiang_optcss/'&gt;http://www.ibm.com/developerworks/cn/web/1109_zhouxiang_optcss/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.w3.org/TR/css3-color/#html4'&gt;http://www.w3.org/TR/css3-color/#html4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://google-styleguide.googlecode.com/svn/trunk/htmlcssguide.xml'&gt;http://google-styleguide.googlecode.com/svn/trunk/htmlcssguide.xml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.w3.org/International/tutorials/tutorial-char-enc/en/all.html'&gt;http://www.w3.org/International/tutorials/tutorial-char-enc/en/all.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.amazon.com/Pro-CSS-High-Traffic-Websites/dp/1430232889/ref=sr_1_1?ie=UTF8&amp;amp;qid=1336017836&amp;amp;sr=8-1'&gt;Pro CSS for High Traffic Websites&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.ibm.com/developerworks/cn/web/1009_chengfu_dojocss/'&gt;http://www.ibm.com/developerworks/cn/web/1009_chengfu_dojocss/&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>JavaScript随机排序的一种实现</title>
   <link href="http://44ux.com/blog/2012/04/27/random-sort-dom-elements"/>
   <updated>2012-04-27T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/04/27/random-sort-dom-elements</id>
   <content type="html">&lt;p&gt;开发中经常会用到的dom元素随机排序的一种实现方式，并附有简单例子，代码有注释，很容易懂的。&lt;/p&gt;

&lt;p&gt;DEMO截图：&lt;/p&gt;

&lt;p&gt;&lt;img alt='Screenshot' src='http://jiguang.github.com/content/uploads/2012/04/screenshot.png' /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Random Card&amp;lt;/h1&amp;gt;
&amp;lt;ul id=&amp;quot;container&amp;quot;&amp;gt;
    &amp;lt;li class=&amp;quot;pk&amp;quot; style=&amp;quot;background:red;&amp;quot;&amp;gt;Red&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;pk&amp;quot; style=&amp;quot;background:green;&amp;quot;&amp;gt;Green&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;pk&amp;quot; style=&amp;quot;background:pink;&amp;quot;&amp;gt;Pink&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;pk&amp;quot; style=&amp;quot;background:purple;&amp;quot;&amp;gt;Purple&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;pk&amp;quot; style=&amp;quot;background:blue;&amp;quot;&amp;gt;Blue&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;pk&amp;quot; style=&amp;quot;background:orange;&amp;quot;&amp;gt;Orange&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;button id=&amp;quot;shuffle&amp;quot;&amp;gt;开始随机洗牌&amp;lt;/button&amp;gt;

function shuffle(){
    // 获取列表项
    var temp = document.getElementsByTagName(&amp;#39;li&amp;#39;);

    // 创建新数组用来保存列表项
    var list = new Array();

    // 为每个列表项分配一个随机数属性，并将其存入新数组
    for(var i=0, j=temp.length; i&amp;lt;j; i++){
        temp[i].order = Math.random();
        list.push(temp[i]);
    }

    // 对新数组按其随机数属性进行排序
    list = list.sort(function(a,b){
        return a.order - b.order;
    });

    var container = document.getElementById(&amp;#39;container&amp;#39;);
    container.style.display = &amp;#39;none&amp;#39;; // offline
    container.innerHTML = &amp;#39;&amp;#39;;

    for(; list.length&amp;gt;0; ){
        container.appendChild(list.pop());
    }

    container.style.display = &amp;#39;block&amp;#39;;
}

document.getElementById(&amp;#39;shuffle&amp;#39;).onclick = function(){
    shuffle();
};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href='http://jiguang.github.com/demo/random-sort.html'&gt;点击这里查看DEMO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;补充1：经wikixie同学提醒，随机的代码也可改为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list = list.sort(function(a,b){
        return Math.random() - Math.random();
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;补充2：经&lt;a href='http://yekai.net'&gt;猫哥&lt;/a&gt;提醒，补充1所示代码有可能导致概率不等。具体原因为：各个浏览器对sort()方法实现方式不同，使用两次随机差值进行比较，可能导致各项机会不均等。具体大家可以深入了解JavaScript中sort()的底层实现方式。&lt;/p&gt;

&lt;p&gt;这里是&lt;a href='http://svn.webkit.org/repository/webkit/trunk/Source/JavaScriptCore/runtime/ArrayPrototype.cpp'&gt;WebKit源码&lt;/a&gt;中的实现方式，有兴趣同学可以研究一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// &amp;quot;Min&amp;quot; sort. Not the fastest, but definitely less code than heapsort
    // or quicksort, and much less swapping than bubblesort/insertionsort.
    for (unsigned i = 0; i &amp;lt; length - 1; ++i) {
        JSValue iObj = thisObj-&amp;gt;get(exec, i);
        if (exec-&amp;gt;hadException())
            return JSValue::encode(jsUndefined());
        unsigned themin = i;
        JSValue minObj = iObj;
        for (unsigned j = i + 1; j &amp;lt; length; ++j) {
            JSValue jObj = thisObj-&amp;gt;get(exec, j);
            if (exec-&amp;gt;hadException())
                return JSValue::encode(jsUndefined());
            double compareResult;
            if (jObj.isUndefined())
                compareResult = 1; // don&amp;#39;t check minObj because there&amp;#39;s no need to differentiate == (0) from &amp;gt; (1)
            else if (minObj.isUndefined())
                compareResult = -1;
            else if (callType != CallTypeNone) {
                MarkedArgumentBuffer l;
                l.append(jObj);
                l.append(minObj);
                compareResult = call(exec, function, callType, callData, jsUndefined(), l).toNumber(exec);
            } else
                compareResult = (jObj.toUStringInline(exec) &amp;lt; minObj.toUStringInline(exec)) ? -1 : 1;

            if (compareResult &amp;lt; 0) {
                themin = j;
                minObj = jObj;
            }
        }
        // Swap themin and i
        if (themin &amp;gt; i) {
            thisObj-&amp;gt;methodTable()-&amp;gt;putByIndex(thisObj, exec, i, minObj, true);
            if (exec-&amp;gt;hadException())
                return JSValue::encode(jsUndefined());
            thisObj-&amp;gt;methodTable()-&amp;gt;putByIndex(thisObj, exec, themin, iObj, true);
            if (exec-&amp;gt;hadException())
                return JSValue::encode(jsUndefined());
        }
    }&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>代码复用工具 Code Cleaner Chrome 扩展版</title>
   <link href="http://44ux.com/blog/2012/04/27/code-cleaner-chrome-extention"/>
   <updated>2012-04-27T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/04/27/code-cleaner-chrome-extention</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; 最近 Chrome 应用商店经常打不开，故强烈推荐使用 &lt;a href='http://44ux.com/demo/code-cleaner/index.htm' target='_blank'&gt;Code Cleaner 在线版&lt;/a&gt; 并加入书签 ;)&lt;/p&gt;

&lt;p&gt;在实际开发的过程中，尤其是一些大型项目的开发中，经常会遇到代码复用的问题，很多代码是可复用的，但并不一定已经形成复用组件。这时就需要手动拷贝原始代码，由于手动拷贝的原始代码含有大量无用信息，所以清理工作就变得很重要。&lt;/p&gt;

&lt;p&gt;Code Cleaner 就是这样一个代码清理工具，它可以方便地清理代码中的冗余信息，清理后可得到简洁可复用的DOM结构，非常适合团队复用代码。如果一段代码经常会用到，后续再继续整理到组件库即可。&lt;/p&gt;

&lt;p&gt;下面是该扩展的简介：&lt;/p&gt;

&lt;p&gt;Code Cleaner helps web developers get clear DOM code, when some module on page can be used again, you can use the ‘Elements Panel’,then right click mouse, choose ‘Copy as HTML’, then paste the code into Code Cleaner, custom your own option, there you go!&lt;/p&gt;

&lt;p&gt;Code Cleaner 可以帮助Web开发人员快速获取简洁的DOM结构，当某个模块极具复用性时，可以直接在开发工具的Elements面板右键拷贝HTML，然后粘贴到Code Cleaner中进行处理，即可得到清洁可复用的代码。&lt;/p&gt;

&lt;p&gt;V 1.0 版特性：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：该扩展只支持最新版本Chrome（19.0.1084.9以上版本），低版本用户若想使用本扩展，请更新Chrome浏览器（请原谅我如此之挫）。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;清除 id, class, script, idinline-style, table, Link, img, script, br, html-comment, blank&lt;br /&gt;* 清除自定义属性（自动补全）&lt;br /&gt;* 仅保留常见属性&lt;br /&gt;* 自定义正则匹配&lt;br /&gt;* 替换全部文本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;屏幕截图：&lt;/p&gt;

&lt;p&gt;&lt;img alt='2' src='http://jiguang.github.com/content/uploads/2012/04/screenshot.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;这里是下载地址：&lt;a href='https://chrome.google.com/webstore/detail/ajnfhahbkopfgiheliocnmeobejfdlfe?hl=en-US' title='Chrome商店英文版'&gt;Chrome商店英文版&lt;/a&gt;    &lt;a href='https://chrome.google.com/webstore/detail/ajnfhahbkopfgiheliocnmeobejfdlfe' title='Chrome商店中文版'&gt;Chrome商店中文版&lt;/a&gt; &lt;a href='http://44ux.com/demo/code-cleaner/index.htm'&gt;Code Cleaner 在线版&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用方法：&lt;/p&gt;

&lt;p&gt;- 安装完成后该扩展会出现在“开发人员工具”中，如截图所示；&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用“Elements”面板，或直接在页面上点击鼠标右键“审查元素”；&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;在“Elements”面板中选中元素，点击右键“Copy as HTML”；&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;点击“Code Cleaner”选项卡，将代码粘贴到文本域中，根据自己的需要选择要清理的部分，直到满意为止。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;如果大家有什么建议或者批评指正，欢迎在这里留言与我交流，感谢支持！&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>精彩绝伦的CSS 译者序</title>
   <link href="http://44ux.com/blog/2012/04/22/smashing-css-preface"/>
   <updated>2012-04-22T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/04/22/smashing-css-preface</id>
   <content type="html">&lt;p&gt;想必很多人都听说过Eric A. Meyer大名，他是CSS和Web标准领域的资深专家，同时也是非常活跃的技术作家。如果你接触CSS已经有一段时间了，那么你可能会看过他的《CSS权威指南》、《Eric Meyer谈CSS(卷1)》、《Eric Meyer谈CSS(卷2)》、《CSS2.0 程序员参考》，《CSS Web站点设计手册》中的一本或几本。Eric的每本书都很畅销，这并不是因为他的权威，而是因为他能以近20年的资深经验厚积薄发，写出如此通俗易懂平易近人的好书。那么毋庸置疑，现在你手中的这本书必将成为Web开发者案头必备的经典之著。&lt;/p&gt;

&lt;p&gt;本书分为三个部分：第一部分介绍了常见工具（如Firebug、Web Developer Toolbar等）的使用以及关于CSS选择器的一些高级技巧；第二部分介绍了我们随时都可以用到的核心布局技术以及主流的CSS技巧，如滑动门技术、CSS雪碧等；第三部分简要介绍了一些时髦的前沿技术，包括对表格样式的处理以及HTML 5新特性的介绍，如媒体查询、二维变换等。书中并没有多少CSS的基础内容，而更多的是对细节的深入理解以及对一些高级技巧和新技术的介绍。因此，相信无论是对于初学者还是资深的开发人员，本书都能使你获益匪浅。&lt;/p&gt;

&lt;p&gt;如今的前端开发界可谓是风生水起、波澜壮阔，我很庆幸能够成为这汹涌的前端开发大潮中的一员。每个人走向前端开发的道路都不尽相同，但是我们最终还是选择了前端开发。尽管路上可能有许多的困难与羁绊，但我相信我们会坚持走下去，因为我们深深地热爱着这个行业、热爱着这个行业中的朋友们。&lt;/p&gt;

&lt;p&gt;感谢人民邮电出版社图灵公司的傅志红、李松峰老师，没有你们的信任与鼓励，我不可能在这么短的时间内完成本书的翻译。&lt;/p&gt;

&lt;p&gt;感谢我的家人和女友，感谢你们一如既往地支持与包容。&lt;/p&gt;

&lt;p&gt;感谢所有默默关心、支持我的朋友与同事们，你们是我信心与力量的源泉，也是我的良师益友。&lt;/p&gt;

&lt;p&gt;由于时间仓促，加之&lt;a href='http://jiguang.github.com' title='译者'&gt;译者&lt;/a&gt;水平有限，译文中不足之处还望广大同仁批评指正。&lt;/p&gt;

&lt;p&gt;谨以此译作献给已经在前端大潮中和想要加入前端大潮中的朋友们！&lt;/p&gt;

&lt;p&gt;THE END&lt;/p&gt;

&lt;p&gt;相关链接：&lt;a href='http://jiguang.github.com/index.php/2012/04/smashing-css-sample-chapter/'&gt;Eric Meyer 新作《Smashing CSS》中文版样章&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>JavaScript动态插入样式与结构</title>
   <link href="http://44ux.com/blog/2012/04/19/javascript-add-style-and-dom"/>
   <updated>2012-04-19T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/04/19/javascript-add-style-and-dom</id>
   <content type="html">&lt;p&gt;JavaScript动态插入样式有两种情况，一种为插入link元素用于包含外部文件，另一种为插入style元素用于指定嵌入样式。&lt;/p&gt;

&lt;p&gt;第一种情况很简单，假设要在文档中插入如下元素：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;link rel=&amp;amp;quot;stylesheet&amp;amp;quot; type=&amp;amp;quot;text/css&amp;amp;quot; href=&amp;amp;quot;style.css&amp;amp;quot; /&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么使用这样的代码即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var link = document.getElementById(&amp;quot;link&amp;quot;);
link.rel = &amp;quot;stylesheet&amp;quot;;
link.type = &amp;quot;text/css&amp;quot;;
link.href = &amp;quot;style.css&amp;quot;;
var head = document.getElementByTagName(&amp;quot;head&amp;quot;)[0];
head.appendChild(link);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过要注意，必须将link元素添加到head而不是body中，才能保证在所有浏览器中行为一致。可以将这段代码封装为以下函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function loadStyle(url){
	var link = document.getElementById(&amp;quot;link&amp;quot;);
	link.rel = &amp;quot;stylesheet&amp;quot;;
	link.type = &amp;quot;text/css&amp;quot;;
	link.href = url;
	var head = document.getElementByTagName(&amp;quot;head&amp;quot;)[0];
	head.appendChild(link);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另一种动态插入样式的方式是使用style元素：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;style type=&amp;amp;quot;text/css&amp;amp;quot; &amp;amp;gt;
body{background-color: red}
&amp;amp;lt;/style&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果按照相同的逻辑，下面的代码应该是有效的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var style = document.createElement(&amp;quot;style&amp;quot;);
style.type = &amp;quot;text/css&amp;quot;;
style.appendChild(document.createTextNode(&amp;quot;body{background-color: red}&amp;quot;));
var head = document.getElementsByTagName(&amp;quot;head&amp;quot;)[0];
head.appendChild(style);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过事实上，这段代码只能在Firefox、Safari、Chrome和Opera中运行，在IE中则会报错。IE会将style当做一个特殊的节点，不允许访问其子节点。解决这个问题的方法就是访问元素的styleSheet属性，该属性又有一个cssText属性，可以接受CSS代码。代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var style = document.createElement(&amp;quot;style&amp;quot;);
style.type = &amp;quot;text/css&amp;quot;;
try{
	style.appendChild(document.createTextNode(&amp;quot;body{background-color:red} &amp;quot;));
} catch(ex){
	style.styleSheet.cssText = &amp;quot;body{background-color:red} &amp;quot;;
}
var head = document.getElementByTagName(&amp;quot;head&amp;quot;)[0];
head.appendChild(style);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;整理成通用的函数则为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function loadStyleString(css){
	var style = document.createElement(&amp;quot;style&amp;quot;);
	style.type = &amp;quot;text/css&amp;quot;;
	try{
		style.appendChild(document.createTextNode(css));
	} catch(ex){
		style.styleSheet.cssText = css;
	}
	var head = document.getElementByTagName(&amp;quot;head&amp;quot;)[0];
	head.appendChild(style);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么，上面介绍的这些都是只插入样式的情况，如果样式和结构一起插入的话会有发生什么情况呢？例如，我们需要向页面中插入如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;div class=&amp;amp;quot;foo&amp;amp;quot;&amp;amp;gt;This is a test&amp;amp;lt;/div&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可能首先会想到innerHTML，直接将整段代码作为某个容器的innerHTML插入，但是你会发现在所有现代浏览器中都没问题，但是在IE8以下样式没有生效。这应该是浏览器渲染方式的问题，只有使用JavaScript异步加载样式和结构时才会出现，如果由后台吐出就不会有这个问题。如果想了解更多浏览器的工作原理，请看Ghost的这篇&lt;a href='http://www.cssforest.org/blog/index.php?id=195'&gt;《浏览器工作原理浅析》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;打开调试工具可以发现在dom结构中并没有生成style标签。如前所示，这一步会有兼容性问题，可以按照前面的代码进行处理，将style元素添加到head中即可解决IE中这个问题。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 方案1：单独提取style将其插入到head中
code.replace(regExp, function(match, cssText){

var head = document.getElementsByTagName(&amp;#39;head&amp;#39;)[0],
	style = document.createElement(&amp;#39;style&amp;#39;),
	rules = document.createTextNode(cssText);

	style.type = &amp;#39;text/css&amp;#39;;
	if(style.styleSheet)
		style.styleSheet.cssText = rules.nodeValue;
	else
		style.appendChild(rules);
	head.appendChild(style);

	return &amp;#39;&amp;#39;;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外，经过测试&lt;a href='http://jiguang.github.com' title='笔者'&gt;笔者&lt;/a&gt;发现还有另外一种解决方案，即将style元素放到dom结构下方，然后就可以直接使用innerHTML了。那么我们可以写一段脚本，将代码中的style部分提取出来，并将其挪到dom结构的下方：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var regExp = /&amp;lt;style([\s\S]*?)&amp;lt;/style&amp;gt;/ig;

// 方案2：将style放到代码底部
if(code.match(regExp)[0]){
	code = code.replace(regExp,&amp;#39;&amp;#39;) + code.match(regExp)[0];
	document.getElementById(container).innerHTML = code;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么如何才能知道innerHTML操作的有没有成功呢？如果你使用类库的话，可以检测IE浏览器版本小于等于8。当然，还有更简洁一点的办法，如果innerHTML插入style成功了，则在dom结构中会多出一个style节点。那么我们可以计算插入前后页面中style节点的个数来判断是否成功。可以通过以下一个简单的函数来计算style节点个数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 计算页面内style节点的数目
function countStyleSheets(){
	return document.getElementsByTagName(&amp;#39;style&amp;#39;).length;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在执行innerHTML插入操作后再比较一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(countStyleSheets() === original){}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以根据判断结果来决定是否需要额外的操作，在需要使用JavaScript同时插入style和dom时可以采用这种方式。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://jiguang.github.com/demo/apply-custom-code.html'&gt;查看DEMO&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>【TEAP早期试读】Firebug快速入门教程</title>
   <link href="http://44ux.com/blog/2012/04/08/smashing-css-sample-chapter2"/>
   <updated>2012-04-08T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/04/08/smashing-css-sample-chapter2</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;图灵社区按&lt;/strong&gt;： TEAP是什么？TEAP是Turingbook Early Access Program的简称，即早期试读，它公布的是图灵在途新书未经编辑的内容。一本书的翻译周期约为3到6个月，如果在翻译过程中，译者就能与读者进行沟通和交流，对整本书的翻译品质是有帮助的。通过TEAP，读者可以提前阅读将来才能出版的内容，译者也能收获宝贵的反馈意见，改进翻译，提高质量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;简介：&lt;/strong&gt;本书原名为 &lt;a href='http://www.ituring.com.cn/book/924'&gt;Smashing CSS&lt;/a&gt;，中文暂定名为《精彩绝伦的CSS》，本文节选自书中第一章。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;作者：&lt;/strong&gt; Eric A. Meyer 从1993年开始就投身于web开发领域，是HTML、CSS和Web标准方向国际上公认的专家。他是复杂螺旋顾问公司（Complex Spiral Consulting）的创始人，该公司为美国在线（America On-Line）、苹果（Apple）、奥多比（Adobe）、微软（Microsoft）、前进保险（Progressive Insurance），宣威-威廉斯（Sherwin-Williams）等许多公司提供咨询服务。他是微格式（micro- formats）运动的联合发起者，并且是An Event Apart网站开发者系列会议的联合创办人（和Jeffrey Zeldman一起），他还是5本最畅销的CSS和网页设计书籍的作者。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;无论做什么事情，工具都能起到很大的辅助作用，创建网页或者应用亦是如此。对于CSS来说，既有可以帮助我们书写CSS的工具，也有使用CSS构建的工具来辅助我们进行开发。甚至有的工具可以使我们的浏览器支持更多原生并不支持的CSS特性，你不仅是开发者，还是个能工巧匠！相信本章介绍的这些工具绝对会撑爆你的工具箱。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FIREBUG&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Firebug（见图1-1）是任何网页开发人员的工具箱中不可或缺的两个工具之一（关于另外一个，请参考1.2节“Web Developer Toolbar”）。它是火狐浏览器（Firefox）中的一个完全免费的扩展，如果你用的是其他浏览器，你也可以接着往下看，因为你一样可以使用Firebug！&lt;/p&gt;

&lt;p&gt;&lt;img alt='Firebug' src='http://44ux.com/content/uploads/2012/02/firebug.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-1：Firebug主页&lt;/p&gt;

&lt;p&gt;要想安装Firebug，可以在火狐浏览器中访问getfirebug.com，然后点击安装按钮（就在网页的右上方）开始安装，安装完成后重启火狐浏览器即可。现在准备开始你的神奇之旅吧！&lt;/p&gt;

&lt;p&gt;我没法在这么短的篇幅中涵盖Firebug的全部功能。实际上，即使整个一章的篇幅都未必够用，我这里只讲一些重点。&lt;/p&gt;

&lt;p&gt;图1-2中所示的HTML选项卡左侧展示的是文档的结构，点击箭头可以展开或收缩文档的子结构。注意在该选项卡中，当把鼠标悬停在某个元素名上时，该元素会在页面中高亮显示。最神奇的是，它还可以通过彩色区域和代码来展示元素的内边距（padding）和外边距（margin）。例如，本例中的内容区域为浅蓝色，内边距是淡紫色而外边距是浅黄色。具体是什么颜色其实没那么重要，因为在页面上可以很直观地看到效果。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Checklayout' src='http://44ux.com/content/uploads/2012/02/checklayout.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-2：通过Firebug查看元素的布局&lt;/p&gt;

&lt;p&gt;在HTML选项卡的右侧，可以通过点击样式（Style）选项卡来查看应用在当前元素上的CSS（见图1-3）。这里不仅包含了你自己写的样式，还包含了浏览器自身的内建样式。例如，你可以看一下html.css和quirk.css这两个文件的内容，这些就是内建样式（这些样式称为“用户代理样式”，可以通过点击样式选项卡，在弹出的菜单中选择是否显示用户代理样式）。&lt;/p&gt;

&lt;p&gt;有一点需要注意的是，Firebug有时候会显示一些像-moz-background-clip这种未曾声明过的属性，如果确定没有明确声明那些属性，基本上就可以忽略掉。另外，如果你使用的是简写形式的属性，它也会自动扩展成独立的属性，也就是说像这样的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;font: 1em &amp;quot;Andale Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Firebug中就会变成这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;font-family: &amp;quot;Andale Mono&amp;quot;,&amp;quot;Courier New&amp;quot;,Courier, monospace;
font-size: 1em;
font-size-adjust: none;
font-stretch: normal;
font-style: normal;
font-variant: normal;
font-weight: normal;
line-height: normal;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt='Styletab' src='http://44ux.com/content/uploads/2012/02/styletab.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-3：在独立的Firebug窗口中样式选项卡全部展开&lt;/p&gt;

&lt;p&gt;尽管刚开始可能有点儿令人困惑，但是这种呈现方式并不赖，因为它可以提醒你在这些简写的背后还隐藏着一些东西（更多的简写属性详见第二章）。&lt;/p&gt;

&lt;p&gt;另外一个需要注意的是，样式选项卡中列出的规则是按特殊性（specificity）降序排列的，也就是说，第一个是应用在当前元素上最特殊的规则（优先级最高），第二个是特殊性稍低一点的规则，依此类推（更多关于特殊性的内容，详见第二章“特殊性”部分）。&lt;/p&gt;

&lt;p&gt;通过随时单击鼠标右键并在弹出的菜单中选择审查元素（Inspect Element）选项可以查看任何元素（如图1-4所示），也可以点击Firebug图标旁边带箭头的方框图标来切换到审查模式。此时，随着鼠标在页面上的移动，当前元素会显现出轮廓，单击元素即可进行查看。&lt;/p&gt;

&lt;p&gt;在Firebug中单击任何声明左侧的空白处都可以禁用该声明，这在通过禁用声明的方式测试各个属性之间的相互作用时非常有用。在图1-5中还可以看到，当鼠标悬停在颜色值上时会出现一个小色块用来展示该值对应的颜色。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Inspectelement' src='http://44ux.com/content/uploads/2012/02/inspectelement.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-4：右键菜单中的审查元素选项&lt;/p&gt;

&lt;p&gt;&lt;img alt='Disabledstyle' src='http://44ux.com/content/uploads/2012/02/disabledstyle.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-5：禁用的样式和悬浮的颜色框&lt;/p&gt;

&lt;p&gt;如图1-6所示，在Firebug的样式选项卡中也可以查看元素的计算样式。这就意味着，无论你是否曾经声明过，它都会把所有已知的应用在该元素上的CSS属性展示出来。记住，所有的CSS属性都有默认值。在该视图下可以查看全部的默认值，例如当你想知道浏览器应用在标题上的行高（line-height）的确切像素值时，该视图就变得非常有用了。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Computedstyle' src='http://44ux.com/content/uploads/2012/02/computedstyle.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-6：计算样式&lt;/p&gt;

&lt;p&gt;通过查看元素的盒模型（box model）部分，可以精确地查看元素的尺寸大小，如元素的宽高、内边距和外边距等（如图1-7所示），这些都是用像素来表示的。更酷的是当鼠标悬停在该面板中的框上时，页面上就会出现沿着元素外框的上边缘和左边缘放置的像素尺。&lt;/p&gt;

&lt;p&gt;在图1-8中我们可以很明显地看到，Firebug还有许多其他的功能，诸如可以编辑元素的属性值（比如类）或者元素本身的内容、添加或编辑CSS属性和值等等。通过在Firebug界面中随时单击鼠标左键或者右键可以自行探索Firebug的功能，看看你还能做点儿什么。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Layouttab' src='http://44ux.com/content/uploads/2012/02/layouttab.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-7：布局选项卡&lt;/p&gt;

&lt;p&gt;&lt;img alt='Editcss' src='http://44ux.com/content/uploads/2012/02/editcss.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-8：在样式选项卡下飞速编辑CSS&lt;/p&gt;

&lt;p&gt;需要注意，当在样式选项卡下查看元素的CSS时，是无法看到任何伪元素（pseudo-elements）相关的规则影响元素的。作为例子，如果我们使用了这样一个选择器p:first-letter的话，那么当查看p元素时就无法看到这条规则，伪类（pseudo-classes）是可以看到的但是伪元素不能。而如果使用了包含生成内容的清除浮动（clearfix）解决方案，那就很有挑战性了（见第四章“清除浮动”部分）。&lt;/p&gt;

&lt;p&gt;如果你不使用Firefox进行开发但却想一睹Firebug的风采，那么访问这个页面&lt;a href='http://getfirebug.com/lite.html'&gt;getfirebug.com/lite.html&lt;/a&gt;（如图1-9所示）并且按照页面上的指引进行安装，就可以使Firebug运行在Internet Explorer、Opera或者Safari等浏览器中，以此来适应你的开发环境。可以把Firebug精简版链接到测试页面进行测试，或者把它保存到书签栏存成一个书签小程序（bookmarklet）（这也是我所推荐的方式）。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Firebuglite' src='http://44ux.com/content/uploads/2012/02/firebuglite.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-9：Firebug精简版在IE浏览器上运行&lt;/p&gt;

&lt;p&gt;这个版本的Firebug并不像火狐扩展版的功能那么多，因此才有“精简版”一说，但是它仍然很好很强大。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hi！我是本书的译者&lt;a href='http://www.ituring.com.cn/users/85358' title='姬光'&gt;姬光&lt;/a&gt;，如果你对本书或者译文有任何建议，欢迎在此留言与编辑和我进行交流，也欢迎光顾我的个人博客（&lt;a href='http://www.44ux.com' title='姬光的博客'&gt;44ux.com&lt;/a&gt;）与我交流：）&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 <entry>
   <title>Eric Meyer 新作《Smashing CSS》中文版样章试读</title>
   <link href="http://44ux.com/blog/2012/04/07/smashing-css-sample-chapter"/>
   <updated>2012-04-07T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/04/07/smashing-css-sample-chapter</id>
   <content type="html">&lt;p&gt;畅销图书&lt;a href='http://www.amazon.com/Smashing-CSS-Professional-Techniques-Magazine/dp/047068416X/ref=sr_1_1?ie=UTF8&amp;amp;qid=1333944011&amp;amp;sr=8-1'&gt;《Smashing CSS: Professional Techniques for Modern Layout》&lt;/a&gt;是 &lt;a href='http://meyerweb.com/'&gt;Eric Meyer&lt;/a&gt; 的又一大作，该书已在&lt;a href='http://www.amazon.cn/'&gt;亚马逊&lt;/a&gt;获得4星评价，事实已经证明这必定又是一本经典好书。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Smashingcss' src='http://jiguang.github.com/content/uploads/2012/04/smashingcss.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;英文版封面&lt;/p&gt;

&lt;p&gt;&lt;img alt='Smashingcss1' src='http://jiguang.github.com/content/uploads/2012/04/smashingcss1.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;英文版内页&lt;/p&gt;

&lt;p&gt;之前&lt;a href='http://jiguang.github.com' title='笔者'&gt;笔者&lt;/a&gt;写过一篇&lt;a href='http://jiguang.github.com/index.php/2012/02/smashing-css-firebug-quick-tutorial/'&gt;《【TEAP早期试读】Firebug快速入门教程》&lt;/a&gt;其实就是从该书中文版的第一章中截取的。《Smashing CSS》的中文版暂名为&lt;a href='http://www.ituring.com.cn/book/924'&gt;《精彩绝伦的CSS》&lt;/a&gt;，由人民邮电出版社&lt;a href='http://www.ituring.com.cn/'&gt;图灵公司&lt;/a&gt;引进，预计在8月份左右出版。&lt;/p&gt;

&lt;p&gt;目前该书的&lt;a href='http://www.ituring.com.cn/article/1010'&gt;样章&lt;/a&gt;已经发布，大家可以先下载样章一睹大师风采，不过样章中主要还是讲述前端开发中一些常用的工具，大部分内容都是我们熟知的，可能并不会有许多新鲜感。不过对于一些初学者，还是可以仔细读一读的。&lt;/p&gt;

&lt;p&gt;样章主要包含以下内容：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;1 FIREBUG&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;2 WEB DEVELOPER TOOLBAR&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;3 IE开发者工具栏&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;4 DRAGONFLY (OPERA浏览器)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;5 WEB检查器(SAFARI浏览器)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;6 XRAY&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;7 SELECTORACLE&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;8 诊断样式表&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;9 重启样式表&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;10 IE9.JS&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里是 &lt;a href='http://www.ituring.com.cn/book/download/72f70328-2304-4e16-be2a-35f50d814317'&gt;样章下载链接&lt;/a&gt;，也可以&lt;a href='http://www.ituring.com.cn/article/1010'&gt;点这里在线阅读&lt;/a&gt;。如果大家对本书感兴趣或者有什么问题，欢迎在这里留言交流：）&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>拒绝纷扰，静心阅读 —— Evernote Clearly</title>
   <link href="http://44ux.com/blog/2012/04/07/evernote-clearly"/>
   <updated>2012-04-07T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/04/07/evernote-clearly</id>
   <content type="html">&lt;p&gt;你是否曾被网站上纷繁复杂的栏目、乌七八糟的广告弄的心烦意乱？你是否在读文章时被诱骗点击了广告？我们的精力有限，视力有限，请还我们一个清静的世界吧！吐槽完毕。&lt;/p&gt;

&lt;p&gt;&lt;a href='https://www.evernote.com/clearly/'&gt;Evernote Clearly&lt;/a&gt; 是鼎鼎大名的 Evernote 开发的一个 Chrome 浏览器插件，它的功能很简单，就是去除网页上的“闲杂人等”，集中显示主要内容。在我们阅读文章时，往往页面上有许多其他栏目，或者广告，甚至还有很多闪来闪去、上窜下跳的广告影响我们的注意力。长时间下去就会得一种慢性疾病，即永远无法集中注意力。&lt;/p&gt;

&lt;p&gt;下面&lt;a href='http://jiguang.github.com' title='笔者'&gt;笔者&lt;/a&gt;就简单介绍一下这个插件，下面是官方网站上的示意图：&lt;/p&gt;

&lt;p&gt;&lt;img alt='plugin' src='http://jiguang.github.com/content/uploads/2012/04/evernote_clearly.png' /&gt;&lt;/p&gt;

&lt;p&gt;它的功能主要包括提取文章的主要内容、剪贴到Evernote等，还可以自定义主题。其中“剪贴到Evernote”的功能也可以当作“稍后阅读（Read it later）”来使用，在电脑上没有时间阅读时，将文章内容保存到Evernote，然后其他时间在移动设备上阅读。它比其他类似的“Read it later”插件更好的地方就是，它提取了文章主要内容，而不是仅仅保存一个网站链接，这样可以节省很多移动设备的网络流量。&lt;/p&gt;

&lt;p&gt;下面&lt;a href='http://jiguang.github.com' title='笔者'&gt;笔者&lt;/a&gt;对两种不同类型的网站进行了简单的测试，一个为门户网站的文章页，一个为个人博客的文章页。&lt;/p&gt;

&lt;p&gt;以网易新闻为例，在使用Evernote Clearly之前时，页面是酱紫的：&lt;/p&gt;

&lt;p&gt;&lt;img alt='163 test 1' src='http://jiguang.github.com/content/uploads/2012/04/163-test-1.png' /&gt;&lt;/p&gt;

&lt;p&gt;在打开Evernote Clearly后则变成了：&lt;/p&gt;

&lt;p&gt;&lt;img alt='163 test 2' src='http://jiguang.github.com/content/uploads/2012/04/163-test-2.png' /&gt;&lt;/p&gt;

&lt;p&gt;我们可以很明显地看到，其他我们无需关注的东西都已经去掉了，可以静心读一读文章了。当然，很多时候都是粗略的浏览，可能就不需要这样了。文字的颜色及背景等都是可以自定义的。&lt;/p&gt;

&lt;p&gt;再以某个人小博客为例，使用前：&lt;/p&gt;

&lt;p&gt;&lt;img alt='Blog test 1' src='http://jiguang.github.com/content/uploads/2012/04/blog-test-1.png' /&gt;&lt;/p&gt;

&lt;p&gt;使用后：&lt;/p&gt;

&lt;p&gt;&lt;img alt='Blog test 2' src='http://jiguang.github.com/content/uploads/2012/04/blog-test-2.png' /&gt;&lt;/p&gt;

&lt;p&gt;当然，对于个人博客可能没有太多需要去掉的东西，但是这个插件可以让你以自己喜欢的风格浏览任何博客。尤其对于一些做大了一些的博客，可能就有很多广告之类的，这时这个插件就很有用了。&lt;/p&gt;

&lt;p&gt;这里是 Chrome 插件的链接：&lt;a href='https://chrome.google.com/webstore/detail/iooicodkiihhpojmmeghjclgihfjdjhj'&gt;点击安装&lt;/a&gt; （当然，需要用 Chrome 浏览器打开）&lt;/p&gt;

&lt;p&gt;PS：这个插件只能用在拥有大段文字的文章页，用在其他页的话可能不会有什么好效果。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>盲人程序员的编程生涯</title>
   <link href="http://44ux.com/blog/2012/03/26/how-can-you-program-if-youre-blind"/>
   <updated>2012-03-26T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/03/26/how-can-you-program-if-youre-blind</id>
   <content type="html">&lt;p&gt;本文来自于&lt;a href='http://stackoverflow.com/'&gt;Stackoverflow&lt;/a&gt;上的&lt;a href='http://stackoverflow.com/questions/118984/how-can-you-program-if-youre-blind'&gt;一个问题&lt;/a&gt;，下面确实有很多盲人程序员作出回答，&lt;a href='http://jiguang.github.com' title='笔者'&gt;笔者&lt;/a&gt;感触颇深，故整理成文。&lt;/p&gt;

&lt;p&gt;具体技术细节不必深究，主要了解一下他们的工作状态，以期让更多的朋友关注残障人士的生活与工作。&lt;/p&gt;

&lt;p&gt;原问题大致如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;视力应是大多数程序员理所当然应有的感官之一，大多数程序员都会花大量的时间盯着显示器（尤其是当他们&lt;em&gt;处于巅峰状态&lt;/em&gt;时），不过我知道还存在很多的盲人程序员（比如目前供职于Google的T.V. Raman）。&lt;/p&gt;

&lt;p&gt;如果你是个盲人（或者视力衰退严重），那么你会怎样设置你的开发环境来协助你编程呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面整理一些精彩回答：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From Jared：&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我是一个完全失明的大学生，已经参加过几个编程实习，所以我的回答将基于这些经验。我使用Windows xp作为操作系统，使用&lt;a href='http://freedomscientific.com/products/fs/jaws-product-page.asp'&gt;Jaws&lt;/a&gt;的合成语音来阅读屏幕上的内容。对于Java编程，我使用eclipse，因为它是一个全功能可访问的IDE。&lt;/p&gt;

&lt;p&gt;以我的经验来看，java编程中使用SWT作为GUI工具的可访问性要比使用Swing好一些，这就是为什么我放弃netbeans的原因。对于.net编程，我使用visual studio 2005，因为这是我实习时使用的标准版本，而且通过使用Jaws和一系列脚本（比如简化表单设计的脚本），可以使操作变得非常简单。&lt;/p&gt;

&lt;p&gt;对于C和C++编程，我使用cygwin加上gcc作为编译器，使用emacs或者vim作为编辑器，视具体工作而定。我的大部分实习涉及到Z/OS的编程，我使用一个登录会话来通过Cygwin来访问USS子系统，并且使用C3270作为我的3270模拟器来访问主框架的ISPF部分。&lt;/p&gt;

&lt;p&gt;我一般依赖于带点字（Braille：点字/盲文）显示（&lt;a href='http://jiguang.github.com' title='译者'&gt;译者&lt;/a&gt;注：下图为一种点字设备）的合成语音。我发现在标点很重要且比较复杂的情况下使用点字显示的话，工作效率会更高。一个例子就是当有很多if声明很许多嵌套的括号和JCL时，标点就显得非常重要了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我在玩cygwin下的Emacspeak &lt;a href='http://emacspeak.sourceforge.net'&gt;http://emacspeak.sourceforge.net&lt;/a&gt;，我不确定这个作为编程使用的编辑器是否有用，因为它有时好像反应迟钝，不过我还没有查看任何配置选项。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='Fudiao 2' src='http://jiguang.github.com/content/uploads/2012/03/fudiao-2.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From Saqib&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我是个盲人，我已经使用Windows、&lt;a href='http://jiguang.github.com/index.php/tag/mac/' title='mac'&gt;mac&lt;/a&gt;、Linux和DOS编程大约13年了，使用的语言从C/C++、Python、Java、C#到各种小众语言。尽管原问题是关于环境配置的，不过我认为最好应该从盲人如何使用电脑开始回答。&lt;/p&gt;

&lt;p&gt;有些人使用有声环境，例如T. V. Raman楼上提到的Emacspeak环境。迄今为止更通用的解决办法是使屏幕阅读器运行在后台，并监视操作系统的活动，然后通过合成语音或者物理点字显示（一般一次显示20至80个字符）提醒用户。这就意味着盲人可以使用任何可访问的应用程序了。&lt;/p&gt;

&lt;p&gt;那么，我自己这些日子在用Visual Studio 2008，只做了很少的更改。我关掉了一些诸如在输入时显示错误等功能，因为我发现这个功能很容易使你分心。在加入微软行列之前，我的所有开发工作都在类似记事本（Notepad）这样的标准的文本编辑器中完成，所以仍然没有任何自定设置。&lt;/p&gt;

&lt;p&gt;让屏幕阅读器读出缩进也是可能的，我自己不用这个功能，因为Visual Studio会处理这些，并且C#中是用大括号的。但是在像Python这样空格很关键的语言中就很重要了。最后，Emacspeak可以使用不同的声音/音高来指出语法的不同部分（关键字、注释、标识符等）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;From Manish&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我是个盲人，已经编程大约12年了。目前我是Sapient Corporation（一个剑桥的顾问公司，专注基于Web的和胖客户端的企业解决方案）的高级架构师。我使用几个屏幕阅读器，不过大部分是在Windows上使用的Jaws和NVDA。&lt;/p&gt;

&lt;p&gt;我大部分在微软平台上工作，使用visual studio作为开发环境。我也使用像MS Sql企业版以及其他的数据库操作工具、网络监控工具等。我曾尝试花些时间使用emacspeak，不过由于我的工作大部分基于MS平台，所以不会在那上面花太多时间。我也花过几年在Linux上使用C++，大部分时候是在windows上使用记事本或者visual studio完成所有的编码工作，然后用samba与linux环境共享文件。我也使用borland C来做些小实验。最近在玩python，它普遍被认为是对盲人用户最不友好的程序语言，因为它使用缩进作为嵌套机制。说到这里，最流行的开源屏幕阅读器NVDA就完全是用python写的，而且这个项目的一些贡献者本身就是盲人。一个很有意思的问题就是，我经常被问到，作为一个架构师我是如何处理各种图表的（UML、viso以及rational rose等等）。Visio可能是最易操作的图表工具了，我还可以写jaws脚本来为我读出rational rose图表。我曾用过一个叫T-dub（technical diagram understanding for the blind）的工具来处理UML 2.0图表，它是一些德国大学开发出来的。我还用过一个基于java的非常丑陋的工具叫做magic draw来处理模型驱动（model-driven）的开发工作，并且作为androMDA项目的一个提交者（commiter）协助开发了从UML模型生成.Net代码的生成器。&lt;/p&gt;

&lt;p&gt;总体来说，我发现我的自力更生激励了整个团队。例如，当一个图表对沟通/文档化一个设计非常重要时，实际的设计过程牵扯到大量的思考和头脑风暴，并且当设计定稿时，你的一个队友可以帮你快速将其整理为一个干净整齐的图片。人们通常将这种情况视为缺乏独立性或能力，而我却认为这是纯正的相互依存，因为我很确定那个队友靠他/她自己或着几人轮流都不可能想出那样的设计，如果我依赖他将设计文档化也是如此。我遇到的大部分障碍都是基于工具的不可访问的问题。例如所有的orale的产品都鼓吹其访问性好多年了（鄙视他们），但在团队环境中却只搞了个在屏幕阅读器和自定义脚本之上的额外的防御层。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;From Edward Kmett&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我为大底特律盲人辅导会（Greater Detroit Society for the Blind）工作三年了，运营一个为盲人访问量身定制的BBS，并且和很多盲人用户一起工作探寻如何能够更好地满足他们的需求，并帮助新的盲人用户训练他们使用软件和硬件。如果不出意外的话，我至少学会了阅读点字（盲文）来防止万一我遇到跟他们一样的处境。&lt;/p&gt;

&lt;p&gt;大部分盲人计算机使用者及程序员使用类似屏幕阅读器的东西。&lt;a href='http://www.freedomscientific.com/products/fs/jaws-product-page.asp'&gt;Jaws&lt;/a&gt;在某种程度上是最受欢迎的。幸运地，现今的大多数应用程序都提供了某种形式的残障人士访问方式。你可能需要将你的环境稍微调整一下，让它少说一些，比如，可以考虑禁止Visual Studio中的智能感知（Intellisense）。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://en.wikipedia.org/wiki/Refreshable_Braille_display'&gt;点字显示设备&lt;/a&gt;就不那么常用了，相比之下也贵很多，它可以显示40或80列文本，而且可以用在当精确定位/标点很重要的场合。而屏幕阅读器可以配置成快速读出标点，很多人发现它容易令人分心，其实通过它可以很容易找到适合自己的方式。Jaws可以配置成显示驱动的，因此你无法兼顾可访问性应用程序。&lt;/p&gt;

&lt;p&gt;同时，很多法律上的盲人用户仍然有一点遗留的视力。使用高对比度的背景和放大功能可以帮助很多这样的用户。&lt;/p&gt;

&lt;p&gt;在Windows中使用ToggleKeys可以在你不小心敲击了”caps lock“、”num lock“、”scroll lock“等健时让你能够听到。&lt;/p&gt;

&lt;p&gt;我知道至少有一个Haskell（&lt;a href='http://jiguang.github.com' title='译者'&gt;译者&lt;/a&gt;注：一种纯函数式编程语言）程序员使用屏幕阅读器，并且不使用Haskell的布局规则直接编程，并且不使用非惯用（non-idiomatic）的选项，而是用支持{;}的。因为它不会使阅读器读出大量的标点，而且还得计算出Haskell布局规则中精确的缩进，这样他就不会太过分心。同样的，我还听说一些盲人程序员在写Python的时候发些牢骚。&lt;/p&gt;

&lt;p&gt;最终，你还是要学会发挥自己的长处。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;From Kyle Burton&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;可以从Blinux项目开始：&lt;a href='http://leb.net/blinux/'&gt;http://leb.net/blinux/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个项目描述了如何获得Emacspeak（带文本阅读的编辑器）并且还有许多其他资源。&lt;/p&gt;

&lt;p&gt;我曾经跟这样的一个人工作，他的视力导致他不能使用显示器，但他使用屏幕阅读器软件并花费大量时间使用基于文本的应用程序和shell也工作得很好。&lt;/p&gt;

&lt;p&gt;维基百科上有个屏幕阅读器得列表，也可以从这里开始：&lt;/p&gt;

&lt;p&gt;&lt;a href='http://en.wikipedia.org/wiki/List_of_screen_readers'&gt;http://en.wikipedia.org/wiki/List_of_screen_readers&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;From ifwzh&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我是来自中国北京的一个研究生，我是计算机科学专业的并且大部分工作是编程。我天生弱视，需要使用放大工具才能看清屏幕上的文字。我在windows上使用微软的放大镜工具，在linux上使用compiz的放大插件。我一般将工具设置成放大原始字体的三倍。对于我来说，放大工具就够了，主要问题是速度，我需要移动鼠标来确保指针跟随我所看到的文本，微软的放大镜提供了一个选项”自动跟随文本编辑光标“，这可以让我在编辑文本或编码时摆脱频繁移动鼠标的困扰。但是这招并不总是管用，因为编辑软件或者IDE可能不支持。linux上的放大工具比较难用。KDE中自带的KMag拥有令人恐怖的刷新率，让我的眼睛很不舒服，我现在使用的compiz的放大插件还可以，不过没有自动聚焦功能。对我来说，iOS提供了十分完美的全屏放大解决方案，尤其是ipad的9.7英寸显示屏。它们的自动聚焦就没必要了，因为我很少用它们编辑或编码。安卓（Android）系统只提供了非常少的可访问性功能，只有像摇动反馈这样的功能，对我根本没用。在安卓上没有什么放大工具，更别提像iOS上这种全屏放大的功能了。我以前研究Qt，希望做一个linux上好用的放大工具，甚至是安卓上的，不过很难有什么进展。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过以上一些回答，我们可以大致了解一些盲人程序员每天的工作状况，我很惊讶居然有这么多盲人程序员，对于我们来说，可能蒙上眼睛就什么也干不了了，真的很敬佩这些同仁们！&lt;/p&gt;

&lt;p&gt;我也希望能够通过本文让更多Web开发者更加关注网站的可用性及可访问性问题，更多地关注残障人士。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>CSS3实现倒计时沙漏</title>
   <link href="http://44ux.com/blog/2012/03/24/css3-sandglass"/>
   <updated>2012-03-24T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/03/24/css3-sandglass</id>
   <content type="html">&lt;p&gt;这是一个&lt;a href='http://jiguang.github.com/index.php/tag/css3/' title='css3'&gt;css3&lt;/a&gt;实现的小沙漏，没什么实际意义，就是玩一玩，用到了CSS3的两个属性：transform 和 transition。为了简单起见，代码中没有把带所有浏览器前缀的代码都写出来，只写了-webkit-的。&lt;/p&gt;

&lt;p&gt;先看一下效果图：&lt;/p&gt;

&lt;p&gt;&lt;img alt='Sandglass' src='http://jiguang.github.com/content/uploads/2012/03/sandglass.png' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://jiguang.github.com/demo/css3-sandglass.html'&gt;查看DEMO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面是具体代码，没什么难度：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;!DOCTYPE html&amp;amp;gt;
&amp;amp;lt;html&amp;amp;gt;
&amp;amp;lt;head&amp;amp;gt;
    &amp;amp;lt;title&amp;amp;gt;CSS3 Sandglass&amp;amp;lt;/title&amp;amp;gt;

&amp;amp;lt;/head&amp;amp;gt;
&amp;amp;lt;body&amp;amp;gt;

## CSS3 10秒倒计时沙漏 - Webkit only @jiguang.github.com


















&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;鼠标hover上去触发，没有使用JS，修改倒计时的时间只需要改掉 -webkit-transition 中的两个10s即可。目前由于鼠标移出后会恢复原来的状态，所以会有点儿奇怪，感觉像是水被抽回去的效果。点击这里&lt;a href='http://jiguang.github.com/demo/css3-sandglass.html'&gt;查看DEMO&lt;/a&gt;。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mac下定时休息/保护视力/防劳损软件</title>
   <link href="http://44ux.com/blog/2012/03/23/mac-protect-eyesight-software"/>
   <updated>2012-03-23T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/03/23/mac-protect-eyesight-software</id>
   <content type="html">&lt;p&gt;每天对着电脑工作的人都会需要一个定时提醒的软件，可以提醒你定时休息，防止各种职业病。&lt;/p&gt;

&lt;p&gt;在Windows上有很多类似的软件，但是在&lt;a href='http://jiguang.github.com/index.php/tag/mac/' title='mac'&gt;mac&lt;/a&gt;系统中却很少。&lt;a href='http://jiguang.github.com' title='笔者'&gt;笔者&lt;/a&gt;也曾苦苦搜寻，始终没有找到合适的。&lt;/p&gt;

&lt;p&gt;之前我曾写过用&lt;a href='http://jiguang.github.com/index.php/2011/12/applescript-eye-sight-protect/'&gt;AppleScript实现的定时提醒脚本&lt;/a&gt;，但功能实在太弱，连Toy都算不上。&lt;/p&gt;

&lt;p&gt;前些日子偶然发现一款非常好用的软件，叫做&lt;strong&gt;TimeOut&lt;/strong&gt;，它有很多强大的功能，比如筛选在某些程序打开时不计时，以及开始或结束时执行脚本等。下面是软件的截图：&lt;/p&gt;

&lt;p&gt;&lt;img alt='Overview' src='http://jiguang.github.com/content/uploads/2012/03/overview1.png' /&gt;&lt;/p&gt;

&lt;p&gt;在&lt;a href='http://www.dejal.com/'&gt;官方网站&lt;/a&gt;上，还有一些&lt;a href='http://www.dejal.com/timeout/extras/'&gt;有趣的脚本&lt;/a&gt;可供下载。&lt;/p&gt;

&lt;p&gt;自从我发现这个软件后，就一直在使用，我一般设置工作50分钟然后休息10分钟，当然完全是个人喜好。不过一般据说工作45-50分钟就休息一下比较科学。&lt;/p&gt;

&lt;p&gt;点击&lt;a href='http://www.dejal.com/download/?prod=timeout&amp;amp;vers=1.6.4&amp;amp;rel=gen&amp;amp;lang=en&amp;amp;op=show&amp;amp;ref=timeout'&gt;直接下载&lt;/a&gt;，如果下载链接变更失效，那么可以到&lt;a href='http://www.dejal.com/timeout/'&gt;官方下载页面&lt;/a&gt;，点击右侧“Download Now”下载。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>使用别名alias简化输入</title>
   <link href="http://44ux.com/blog/2012/03/22/use-alias-minify-input"/>
   <updated>2012-03-22T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/03/22/use-alias-minify-input</id>
   <content type="html">&lt;p&gt;在Linux/&lt;a href='http://jiguang.github.com/index.php/tag/mac/' title='mac'&gt;mac&lt;/a&gt;等终端输入命令时经常要输入很多字符，如果每次都手动输入的话效率很低，这时可以使用alias命令为常用的命令设置别名。&lt;/p&gt;

&lt;p&gt;网上有很多类似的教程，具体修改方法不一，其原因是按照不同的修改方法修改后覆盖的范围不同。&lt;/p&gt;

&lt;p&gt;如果单次使用（在终端不关闭的情况下），可以直接在终端输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias ［alias-name=’original-command’］&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 alias-name 是你希望取的别名，而 original-command 是原始的命令及参数，注意等号的两端不能有空格。&lt;/p&gt;

&lt;p&gt;例如，如果经常需要输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/X11/lib/X11&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;的话，那么可以在bash提示符下输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ alias goconfig=’cd /usr/X11/lib/X11’&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt='Alias1' src='http://jiguang.github.com/content/uploads/2012/03/alias1.png' /&gt;&lt;/p&gt;

&lt;p&gt;然后在执行 goconfig 就可以直接进入 /usr/X11/lib/X11 目录了。&lt;/p&gt;

&lt;p&gt;如果要删除这个别名的话，可以使用 unalias 命令，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ unalias goconfig&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么如果希望别名永久生效的话，则需要编辑用户目录下的 .bash_profile 文件了，这样每次重启终端后也可以直接使用了。&lt;/p&gt;

&lt;p&gt;例如，我会把&lt;a href='http://jiguang.github.com/index.php/2011/11/mac-lion-apache-php-environment/'&gt;Apache服务器&lt;/a&gt;的目录设置一个别名 gowebroot，当位于你的用户目录时可以使用下面命令打开文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi .bash_profile&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后将光标移到末尾，输入你的别名设置，然后保存退出即可。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Alias2' src='http://jiguang.github.com/content/uploads/2012/03/alias2.png' /&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>FireFox的按钮比IE和Chrome/Safari宽的解决办法</title>
   <link href="http://44ux.com/blog/2012/03/22/firefoxs-buttons-wider-than-ie-or-chrome-safari"/>
   <updated>2012-03-22T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/03/22/firefoxs-buttons-wider-than-ie-or-chrome-safari</id>
   <content type="html">&lt;p&gt;我讨厌浪费大好的时光编写样式，下面有个很好的例子可以佐证我的想法：&lt;/p&gt;

&lt;p&gt;Firefox中的按钮（button）比IE或者Webkit的都宽，为啥？这个小点缀其实藏在浏览器的样式中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;button::-moz-focus-inner,
	input[type=&amp;quot;reset&amp;quot;]::-moz-focus-inner,
	input[type=&amp;quot;button&amp;quot;]::-moz-focus-inner,
	input[type=&amp;quot;submit&amp;quot;]::-moz-focus-inner,
	input[type=&amp;quot;file&amp;quot;] &amp;gt; input[type=&amp;quot;button&amp;quot;]::-moz-focus-inner {
	padding: 0px 2px 0px 2px;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是的，确实宽了4像素。多谢Firefox。&lt;/p&gt;

&lt;p&gt;很幸运，我们可以把它修复！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;button::-moz-focus-inner,
	input[type=&amp;quot;reset&amp;quot;]::-moz-focus-inner,
	input[type=&amp;quot;button&amp;quot;]::-moz-focus-inner,
	input[type=&amp;quot;submit&amp;quot;]::-moz-focus-inner,
	input[type=&amp;quot;file&amp;quot;] &amp;gt; input[type=&amp;quot;button&amp;quot;]::-moz-focus-inner {
	padding: 0px;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个太easy了：）&lt;/p&gt;

&lt;p&gt;我们站点里可能有个class会应用到所有的button上，我把它命名为“formbutton”（不是我选的名字，是我老板8年前选的。这名字不错吧？像史诗一样不朽。）那么，我就可以将上面代码简化为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.formbutton::-moz-focus-inner {
	padding: 0px;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;想了解更多信息的话：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我是受到这篇文章&lt;a href='http://www.oppenheim.com.au/2008/07/06/how-to-view-firefoxs-default-internal-css-stylesheet/'&gt;《viewing FireFox’s default style sheets》&lt;/a&gt;的启发才发现的。细心的你可能会发现，还有另外一个样式表，它是用作键盘导航的。明智地使用你发现新事物的能力，不需要将它删除或者替换掉。&lt;/p&gt;

&lt;p&gt;如果你还想了解双冒号是个啥意思，这里还有篇文章：&lt;a href='http://www.evotech.net/blog/2007/05/after-v-after-what-is-double-colon-notation/'&gt;《double colon notation》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;至今在Webkit或者IE中貌似都还没有等效的伪元素，但是我得承认，自从这个修复了我遇到的问题后，我再也不用到处搜寻解决办法了。&lt;/p&gt;

&lt;p&gt;原文地址：&lt;a href='http://stephaniehobson.ca/2011/03/09/firefoxs-buttons-wider-than-ie-or-chrome-safari/'&gt;http://stephaniehobson.ca/2011/03/09/firefoxs-buttons-wider-than-ie-or-chrome-safari/&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mac迅雷下载后文件名乱码删除显示8072权限错误</title>
   <link href="http://44ux.com/blog/2012/03/21/mac-thunder-download-messy-code"/>
   <updated>2012-03-21T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/03/21/mac-thunder-download-messy-code</id>
   <content type="html">&lt;p&gt;我是windows用户转向&lt;a href='http://jiguang.github.com/index.php/tag/mac/' title='mac'&gt;mac&lt;/a&gt;的，所以很多软件还喜欢使用Windows上发家的，另外也算支持一下国货吧。&lt;a href='http://mac.xunlei.com/'&gt;Mac迅雷&lt;/a&gt;总体来说还不错，只是下载中文文件的时候经常会出现乱码。如果幸运的话，可以直接对文件重命名，不过大部分情况下你会遇到无法重命名、无法删除、无法打开、权限错误等等尴尬问题，一般显示为8072错误。&lt;/p&gt;

&lt;p&gt;下面就介绍一点我的经验：&lt;/p&gt;

&lt;p&gt;首先要从源头入手，在新建任务时，不要完全使用默认设置直接下载。在新建任务的弹出框内，将文件名的中文部分使用 Command+X 剪切到剪贴板（迅雷这个输入框居然支持Windows的剪切操作！），然后再用 Command+V 粘贴回去，这样就悄悄地将中文的编码改为系统可以识别的了，继续下载就不会有问题了。&lt;/p&gt;

&lt;p&gt;这里选择“继续”，不要选择“直接下载”&lt;br /&gt;&lt;img alt='Macthunder1' src='http://jiguang.github.com/content/uploads/2012/03/macthunder1.png' /&gt;&lt;/p&gt;

&lt;p&gt;对于中文部分，Command+X + Command+V&lt;br /&gt;&lt;img alt='Macthunder2' src='http://jiguang.github.com/content/uploads/2012/03/macthunder2.png' /&gt;&lt;/p&gt;

&lt;p&gt;那么，对于不小心已经下载到本地的文件该如何处理呢？根据&lt;a href='http://jiguang.github.com' title='笔者'&gt;笔者&lt;/a&gt;实践，大致有以下三种方法可以实现，难度依次增大：&lt;/p&gt;

&lt;p&gt;1，如果下载的文件在某个不太重要的文件夹中，如“小电影”文件夹，那么可以尝试把该文件夹中其他文件移走，然后从上一级删除此文件夹；&lt;/p&gt;

&lt;p&gt;2，如果第一招不管用，打开“终端（Terminal）”（不知道终端是什么？Control+空格，输入Terminal，回车），然后输入 rm -rf （注意-rf前后各有一个空格），然后将文件名乱码的文件拖拽到终端中，再敲回车。幸运的话，该死的乱码文件应该已经删除了。&lt;/p&gt;

&lt;p&gt;3，如果前两个都不好使的话，还有最后大绝招！可以安装一个虚拟机（或者恰好你安装了双系统），然后在Windows系统中将文件重命名或者删除。这个操作起来就比较复杂了，可以搜一下虚拟机安装的教程，或者你认识某个像我一样苦逼的程序员也可以，或者干脆把文件扔在那里吧。&lt;/p&gt;

&lt;p&gt;4，还有一个方法比装虚拟机还耗时，但基本不需要思考。可以在 设置-实用工具 里面找到磁盘工具，然后点修复磁盘权限就能看到文件，也能够删除了。&lt;/p&gt;

&lt;p&gt;总之呢，如果你打算使用Mac迅雷的话，那么最好在下载的时候就留意一下，否则一旦下载的是乱码的文件，就够你折腾的了。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>青春与生命</title>
   <link href="http://44ux.com/blog/2012/03/20/about-youth-and-life"/>
   <updated>2012-03-20T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/03/20/about-youth-and-life</id>
   <content type="html">&lt;p&gt;每个人都曾有过青春，也都会在生命的某个阶段，开始缅怀自己逝去的青春，我当然也不能免俗。&lt;/p&gt;

&lt;p&gt;有人说，一旦你开始回忆过去，你就老了。当那些数不清的欢笑与泪水、思念与重逢都渐渐远去的时候，还有什么能够祭奠我们的青春？&lt;/p&gt;

&lt;p&gt;我不善言辞，亦不愿强说忧愁。因为这微小的声音只有你自己能够听到，只有你自己能够听到。&lt;/p&gt;

&lt;p&gt;或许在世界的某个角落，某个像我一样渺小的个体，可以感受到我的存在。&lt;/p&gt;

&lt;p&gt;像我这把年纪的人，才刚刚依依不舍地向青春挥手，似乎有点儿晚了。但无论你再怎么不舍，也都会被撕扯着长大、衰老、死亡。&lt;/p&gt;

&lt;p&gt;那么，既然最后的归宿都是那一尺黑匣，生命的意义何在？&lt;/p&gt;

&lt;p&gt;我为什么活着？我打赌很多人都曾问过自己，那么，你得到答案了吗？&lt;/p&gt;

&lt;p&gt;我想，可能很多人的一生都在想这个问题，一直到死。&lt;/p&gt;

&lt;p&gt;那些轻生的人，并不是想不开，而是累了，不想再去想这个恼人的问题了。&lt;/p&gt;

&lt;p&gt;那么那些自杀未遂的人，又为何会活得更加开心、更加生机勃勃？难道上帝告诉他们答案了吗？当然不是！&lt;/p&gt;

&lt;p&gt;当“死而复生”睁眼的一瞬间，你才会发现这个世界有多么美好，你有多么地不舍。&lt;/p&gt;

&lt;p&gt;你突然发现，身边的朋友亲人都那么和蔼可亲，甚至一草一木都那样赏心悦目，原来为何视而不见呢？&lt;/p&gt;

&lt;p&gt;与失去生命相比，还有什么值得我们斤斤计较呢？&lt;/p&gt;

&lt;p&gt;那么同理，当我们容颜渐老，意识模糊之时，便能想到声明的意义何在么？我想是的！为什么？&lt;/p&gt;

&lt;p&gt;因为你的生命已燃至尽头，回想你此生所经历的人和事，总能找到那么一点意义所在。&lt;/p&gt;

&lt;p&gt;“我这辈子值了！”真的吗？如果在你垂危的时刻，当你说出这句话时，却有人反问“真的吗？”，你能瞑目吗？&lt;/p&gt;

&lt;p&gt;再拿出这个老掉牙的问题：如果你只有三天的生命，你会做什么？&lt;/p&gt;

&lt;p&gt;我想对于这个问题，一般会有两种反应：第一种：“真他妈晦气，想这干啥？！”；第二种：“那得看为啥剩三天，我身体如何、我有没有钱…”。&lt;/p&gt;

&lt;p&gt;必定很少有人能够认真对待这个问题。&lt;/p&gt;

&lt;p&gt;那么我们缓刑一下，假设2012年真的是世界末日，那么还有8个多月的时间，你想做些什么？造船？&lt;/p&gt;

&lt;p&gt;还是把这个问题留给聪明的你们吧，我亲爱的朋友们。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>消极接近（Negative Proximity）</title>
   <link href="http://44ux.com/blog/2012/03/12/negative-proximity"/>
   <updated>2012-03-12T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/03/12/negative-proximity</id>
   <content type="html">&lt;p&gt;CSS的后代选择器有个很细微的特性可能很多人都不曾注意到，因为它很少出现：该选择器没有元素接近（element proximity）的概念。下面是关于这个原则的一个经典范例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body h1 {color: red;}
html h1 {color: green;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;给定这样的样式后，所有的h1将会是绿色而不是红色。这是因为两个选择器具有相同的特殊性（specificity），因此最后一个获胜。而body元素在文档中比html元素更接近h1的事实完全被忽略了。CSS没有衡量文档树中元素接近程度的机制，如果让我打赌的话，我会赌永远都不会有这种机制。&lt;/p&gt;

&lt;p&gt;我之所以提起这个是因为，当使用否定伪类（&lt;a href='http://www.w3.org/TR/css3-selectors/#negation'&gt;negation pseudo-class&lt;/a&gt;）时它可能会给你带来麻烦。考虑下面的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div:not(.one) p {font-weight: bold;}
div.one p {font-weight: normal;}

&amp;amp;lt;div class=&amp;amp;quot;one&amp;amp;quot;&amp;amp;gt;
  &amp;amp;lt;div class=&amp;amp;quot;two&amp;amp;quot;&amp;amp;gt;
    &amp;amp;lt;p&amp;amp;gt;Hi there!&amp;amp;lt;/p&amp;amp;gt;
  &amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;/div&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;给定这样的样式，段落（p）并&lt;strong&gt;不会&lt;/strong&gt;被加粗。这是因为两条规则都可以匹配，因此最后一个会赢。段落内的文本将会是正常的粗细。&lt;/p&gt;

&lt;p&gt;“啊！”你哭了…“可是第一个规则具有更高的特殊性，所以不用管什么顺序它也能赢啊！”你是不是这么想的？但结果却是，否定伪类并不算做一个伪类，它就像通用选择器（univseral selector）一样，根本不会贡献任何特殊性：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;否定选择器中包含的选择器同其它的选择器计算方式相同，但否定本身并不算作伪类。&lt;/p&gt;

&lt;p&gt;——Selectors Level 3, section 9: &lt;a href='http://w3.org/TR/css3-selectors/#specificity'&gt;Calculating a selector’s specificity&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果交换两条规则的顺序，那么就可以得到加粗的段落了，因为“其他方面相等的规则，后出现的获胜”。然而，在下面的情况下，它却不能使你得到一个红背景红字体的段落：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div:not(.one) p {color: red;}
div.one p {background: red;}

&amp;amp;lt;div class=&amp;amp;quot;one&amp;amp;quot;&amp;amp;gt;
  &amp;amp;lt;div class=&amp;amp;quot;two&amp;amp;quot;&amp;amp;gt;
    &amp;amp;lt;p&amp;amp;gt;Hi there!&amp;amp;lt;/p&amp;amp;gt;
  &amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;/div&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个段落是一个不含有one这个类（class）的div的子元素，但它同时也是一个含有one这个类的div的后代元素，两条规则都起作用了。&lt;/p&gt;

&lt;p&gt;（感谢&lt;a href='http://stephaniehobson.ca/'&gt;Stephanie Hobson&lt;/a&gt;第一个向我提及此事）&lt;/p&gt;

&lt;p&gt;原文链接：&lt;a href='http://meyerweb.com/eric/thoughts/2012/03/07/negative-proximity/'&gt;http://meyerweb.com/eric/thoughts/2012/03/07/negative-proximity/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>性能黄金法则</title>
   <link href="http://44ux.com/blog/2012/02/11/the-performance-golden-rule"/>
   <updated>2012-02-11T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/02/11/the-performance-golden-rule</id>
   <content type="html">&lt;p&gt;原文地址：&lt;a href='http://www.stevesouders.com/blog/2012/02/10/the-performance-golden-rule/'&gt;http://www.stevesouders.com/blog/2012/02/10/the-performance-golden-rule/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;昨天我在&lt;a href='http://www.googleventures.com/'&gt;Google Ventures&lt;/a&gt;为他们的一些投资公司做了个研讨会。我不知道听众会有多少关于性能优化的背景知识，因此我从2007年的第一个演示开始，回顾了几乎跟性能优化相关的所有内容，真的是很怀旧啊。话说距离我开始谈论&lt;a href='http://stevesouders.com/hpws/'&gt;《高性能网站建设指南》&lt;/a&gt;的最佳实践已经很多年了，我重新审视了这些早期的提示，比如&lt;a href='http://developer.yahoo.com/blogs/ydn/posts/2007/04/rule_1_make_few/'&gt;减少HTTP请求&lt;/a&gt;，和&lt;a href='http://developer.yahoo.com/blogs/ydn/posts/2007/05/high_performanc_2/'&gt;添加Expires头&lt;/a&gt;，还有&lt;a href='http://developer.yahoo.com/blogs/ydn/posts/2007/07/high_performanc_3/'&gt;压缩组件&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;不过我还需要回顾得更远一些，想到在还没有&lt;a href='http://velocityconf.com/velocity2012'&gt;Velocity&lt;/a&gt;和&lt;a href='http://www.stevesouders.com/blog/2010/05/07/wpo-web-performance-optimization/'&gt;WPO&lt;/a&gt;之前，我或许还得澄清一下为什么我会如此关注前端性能。我找到了当时包含性能黄金法则的幻灯片：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;80-90%的最终用户响应时间都花在前端上。&lt;br /&gt;从这里开始。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;还有一些其他相关的幻灯片展示了一些流行的网站分别花在后端和前端的时间，但是数据已经很旧并且很有限了，因此我决定更新一下，下面是我的成果。&lt;/p&gt;

&lt;p&gt;首先是一个瀑布图，它展示了前后端的划分。这个瀑布图是&lt;a href='http://www.linkedin.com/'&gt;LinkedIn&lt;/a&gt;的。这里“后端”的时间是指从服务器返回第一个字节到客户端所花费的时间。它通常包含大部分的后端处理：数据库查询、远程web服务调用、拼接HTML等等。其余的是“前端”的时间，它包含了显而易见的前端阶段，诸如执行JavaScript代码以及渲染页面等。它同时也包含了下载页面上所有相关资源的时间。我把这些划分到前端时间里是因为，有许多切实可行的办法可以减少这个时间，比如 &lt;a href='http://www.stevesouders.com/blog/2009/04/27/loading-scripts-without-blocking/'&gt;异步加载脚本&lt;/a&gt;，&lt;a href='http://developer.yahoo.com/blogs/ydn/posts/2007/04/rule_1_make_few/'&gt;合并脚本和样式表&lt;/a&gt;以及&lt;a href='http://www.stevesouders.com/blog/2009/05/12/sharding-dominant-domains/'&gt;域名分散&lt;/a&gt;（即通过多个域名实现并行下载的策略  ——&lt;a href='http://jiguang.github.com' title='译者'&gt;译者&lt;/a&gt;注）等。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Golden waterfall' src='http://jiguang.github.com/content/uploads/2012/02/golden-waterfall.png' /&gt;&lt;/p&gt;

&lt;p&gt;对于排名前十位的网站分析结果显示，平均在前端花费的时间占比为76%，略低于黄金法则中提出的80-90%的值。不过别忘了，这些网站的前端都经过了高度的优化，并且其中两个是载入资源非常少的搜索页面（而不是结果页面）。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Golden top10' src='http://jiguang.github.com/content/uploads/2012/02/golden-top10.png' /&gt;&lt;/p&gt;

&lt;p&gt;对于排名10000左右的10个网站进行的分析，可以得到一个更典型的视图。平均在前端花费的时间占比为92%，高于排名前10的76%，甚至高于黄金法则中建议的80-90%。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Golden 9990' src='http://jiguang.github.com/content/uploads/2012/02/golden-9990.png' /&gt;&lt;/p&gt;

&lt;p&gt;为了使与会者接受这个法则，我展示了他们自己网站的前后端花费时间占比，得到的结果为前端占比84%。这有助于使他们的认可我的理论，即前端的性能才是最难最有挑战的，也是最应该给予关注的。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Golden startups' src='http://jiguang.github.com/content/uploads/2012/02/golden-startups.png' /&gt;&lt;/p&gt;

&lt;p&gt;后来我想起来我在&lt;a href='http://httparchive.org/'&gt;HTTP Archive&lt;/a&gt;上还有关于网站耗时的信息。不过我一般不展示这些信息，因为我认为真正的用户度量应该更准确一些，不过我计算了被抓取到的50000个网站的前后端耗时占比，结果前端占比为87%。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Top50ksite' src='http://jiguang.github.com/content/uploads/2012/02/top50ksite1.png' /&gt;&lt;/p&gt;

&lt;p&gt;能够获取这些比2007年更新的信息来验证性能黄金法则真是太好了，而且它也显示了前端性能优化越来越受重视了。如果你担心可用性和可扩展性，那就关注一下后端。但是如果你担心载入网站时用户等待的时间太久，那么关注前端才是王道。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>通过对象图学习JavaScript 【之二】</title>
   <link href="http://44ux.com/blog/2012/02/10/learning-javascript-with-object-graphs-part2"/>
   <updated>2012-02-10T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/02/10/learning-javascript-with-object-graphs-part2</id>
   <content type="html">&lt;p&gt;由于我的&lt;a href='http://jiguang.github.com/index.php/2012/02/learning-javascript-with-object-graphs/'&gt;第一篇文章&lt;/a&gt;里通过图解描述JavaScript语义的方式大受欢迎，因此我决定尝试用这种方法来讲解一些高级内容。在本文中，我会讲解三种常用的创建对象的技术，它们分别是：构造器（constructor）加原型（prototype）的方式、纯原型的方式以及对象工厂（object factory）的方式。&lt;/p&gt;

&lt;p&gt;我的目的是希望能够帮助大家理解每种技术的优缺点，并理解其运行机理。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;经典的JavaScript构造器&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先我们通过原型来创建一个简单的构造器。这是在原生的JavaScript中最接近类（class）的一种方式。它非常强大而有效，但是我们并不能奢望它像其他包含类的语言一样强大。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//长方形
function Rectangle(width, height) {
this.width = width;
this.height = height;
}
Rectangle.prototype.getArea = function getArea() {
return this.width * this.height;
};
Rectangle.prototype.getPerimeter = function getPerimeter() {
return 2 * (this.width + this.height);
};
Rectangle.prototype.toString = function toString() {
return this.constructor.name + &amp;quot; a=&amp;quot; + this.getArea() + &amp;quot; p=&amp;quot; + this.getPerimeter();
};
//正方形
function Square(side) {
this.width = side;
this.height = side;
}
Square.prototype.__proto__ = Rectangle.prototype;
Square.prototype.getPerimeter = function getPerimeter() {
return this.width * 4;
};
//测试
var rect = new Rectangle(6, 4);
var sqr = new Square(5);
console.log(rect.toString())
console.log(sqr.toString())&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们新定义一个叫做Square的类对象，它继承自Rectangle。为了实现继承，构造器的prototype必须继承自父构造器的prototype。这里我们覆盖了getPerimeter使其更加高效，顺便展示一下如何来覆盖函数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Square(side) {
this.width = side;
this.height = side;
}
Square.prototype.__proto__ = Rectangle.prototype;
Square.prototype.getPerimeter = function getPerimeter() {
return this.width * 4;
};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用法就很简单了，只要给每个都创建一个实例（instance）并在实例上调用函数即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var rect = new Rectangle(6, 4);
var sqr = new Square(5);
console.log(rect.toString())
console.log(sqr.toString())&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;br /&gt;Rectangle a=24 p=20 Square a=25 p=20&lt;/p&gt;

&lt;p&gt;下图是生成的数据结构，虚线表示对象的继承。&lt;/p&gt;

&lt;p&gt;&lt;img alt='classic' src='http://jiguang.github.com/content/uploads/2012/02/classic.png' /&gt;&lt;/p&gt;

&lt;p&gt;注意，虽然它们都是继承自Rectangle.prototype的对象，但在rect实例和Square.prototype之间还是有一点小区别。如果你仔细研究的话，会发现JavaScript不过是一系列相互关联的对象而已。唯一特殊的对象就是函数（function）了，在函数中可以接受参数并且可以包含可执行的代码，函数还可以指向作用域（scope）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;纯原型对象&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;再看刚才的例子，这次我们不使用构造函数，而只使用纯原型继承。&lt;/p&gt;

&lt;p&gt;我们来定义一个Rectangle原型来作为构建其他对象的基础。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Rectangle = {
name: &amp;quot;Rectangle&amp;quot;,
getArea: function getArea() {
return this.width * this.height;
},
getPerimeter: function getPerimeter() {
return 2 * (this.width + this.height);
},
toString: function toString() {
return this.name + &amp;quot; a=&amp;quot; + this.getArea() + &amp;quot; p=&amp;quot; + this.getPerimeter();
}
};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们来定义一个名为Square的子对象，并且覆盖一些属性来改变它的某些行为。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Square = {
name: &amp;quot;Square&amp;quot;,
getArea: function getArea() {
return this.width * this.width;
},
getPerimeter: function getPerimeter() {
return this.width * 4;
},
};
Square.__proto__ = Rectangle;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了创建这些原型的实例，首先我们简单地创建一个继承自原型对象的新对象，然后再手动设置一些局部状态。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var rect = Object.create(Rectangle);
rect.width = 6;
rect.height = 4;
var square = Object.create(Square);
square.width = 5;
console.log(rect.toString());
console.log(square.toString());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;br /&gt;Rectangle a=24 p=20 Square a=25 p=20&lt;/p&gt;

&lt;p&gt;下面是生成的对象图：&lt;/p&gt;

&lt;p&gt;&lt;img alt='graph' src='http://jiguang.github.com/content/uploads/2012/02/graph.png' /&gt;&lt;/p&gt;

&lt;p&gt;这个方法没有构造器+原型的方法那么强大，但是通常更容易理解一点，因为它没有那么拐弯抹角。当然了，如果你之前使用的语言包含纯原型继承，那么你会很高兴地发现在JavaScript中也是可以实现的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对象工厂&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我最喜欢的创建对象的方法之一就是使用工厂函数。它的不同之处在于，你不必定义包含所有共享函数的原型对象，然后再创建这些对象的实例，每次只需要简单地调用一个可以返回新对象的函数即可。&lt;/p&gt;

&lt;p&gt;这个例子是一个超简单的MVC系统。控制器（controller）函数接受作为参数的模型（model）和视图（view）对象并且输出一个新的控制器对象。所有状态都通过作用域保存在闭包中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Controller(model, view) {
view.update(model.value);
return {
up: function onUp(evt) {
model.value++;
view.update(model.value);
},
down: function onDown(evt) {
model.value--;
view.update(model.value);
},
save: function onSave(evt) {
model.save();
view.close();
}
};
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若想使用该函数，只需要传入所需的参数调用函数即可。注意一下我们是如何用它来作为事件处理函数（setTimeout）而不用事先将函数绑定到对象上的。由于它（该函数）在内部不使用this关键字，因此就没有必要搞乱this的值了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var on = Controller(
// 内嵌模拟的模型
{
value: 5,
save: function save() {
console.log(&amp;quot;Saving value &amp;quot; + this.value + &amp;quot; somewhere&amp;quot;);
}
},
// 内嵌模拟的视图
{
update: function update(newValue) {
console.log(&amp;quot;View now has &amp;quot; + newValue);
},
close: function close() {
console.log(&amp;quot;Now hiding view&amp;quot;);
}
}
);
setTimeout(on.up, 100);
setTimeout(on.down, 200);
setTimeout(on.save, 300);

// 输出
View now has 5
View now has 6
View now has 5
Saving value 5 somewhere
Now hiding view&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是这段代码生成的对象图。注意我们是通过函数隐藏的&lt;code&gt;scope&lt;/code&gt;属性来访问传入的两个匿名对象的，或者换句话说，我们通过工厂函数创建的闭包可以访问到model和view。&lt;/p&gt;

&lt;p&gt;&lt;img alt='mvc' src='http://jiguang.github.com/content/uploads/2012/02/mvc.png' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这里面有太多我想探索的细节了，不过我更喜欢保持文章的简短易读。如果大家有需求的话，我会再写第三篇文章来讲解如何使用ruby风格的mixin以及其他一些高级内容。&lt;/p&gt;

&lt;p&gt;原文链接：&lt;a href='http://howtonode.org/object-graphs-2'&gt;http://howtonode.org/object-graphs-2&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>【TEAP早期试读】Firebug快速入门教程</title>
   <link href="http://44ux.com/blog/2012/02/09/smashing-css-firebug-quick-tutorial"/>
   <updated>2012-02-09T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/02/09/smashing-css-firebug-quick-tutorial</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;图灵社区按：&lt;/strong&gt;&lt;br /&gt;TEAP是什么？TEAP是Turingbook Early Access Program的简称，即早期试读，它公布的是图灵在途新书未经编辑的内容。一本书的翻译周期约为3到6个月，如果在翻译过程中，&lt;a href='http://jiguang.github.com' title='译者'&gt;译者&lt;/a&gt;就能与读者进行沟通和交流，对整本书的翻译品质是有帮助的。通过TEAP，读者可以提前阅读将来才能出版的内容，&lt;a href='http://jiguang.github.com' title='译者'&gt;译者&lt;/a&gt;也能收获宝贵的反馈意见，改进翻译，提高质量。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;书名：&lt;/strong&gt;本书原名为Smashing CSS，中文暂定名为《精彩绝伦的CSS》&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;作者名/简介：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Eric A. Meyer从1993年开始就投身于web开发领域，是HTML、CSS和Web标准方向国际上公认的专家。他是复杂螺旋顾问公司（Complex Spiral Consulting）的创始人，该公司为美国在线（America On-Line）、苹果（Apple）、奥多比（Adobe）、微软（Microsoft）、前进保险（Progressive Insurance），宣威-威廉斯（Sherwin-Williams）等许多公司提供咨询服务。他是微格式（micro- formats）运动的联合发起者，并且是An Event Apart网站开发者系列会议的联合创办人（和Jeffrey Zeldman一起），他还是5本最畅销的CSS和网页设计书籍的作者。&lt;/p&gt;

&lt;p&gt;无论做什么事情，工具都能起到很大的辅助作用，创建网页或者应用亦是如此。对于CSS来说，既有可以帮助我们书写CSS的工具，也有使用CSS构建的工具来辅助我们进行开发。甚至有的工具可以使我们的浏览器支持更多原生并不支持的CSS特性，你不仅是开发者，还是个能工巧匠！相信本章介绍的这些工具绝对会撑爆你的工具箱。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FIREBUG&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Firebug（见图1-1）是任何网页开发人员的工具箱中不可或缺的两个工具之一（关于另外一个，请参考1.2节“Web Developer Toolbar”）。它是火狐浏览器（Firefox）中的一个完全免费的扩展，如果你用的是其他浏览器，你也可以接着往下看，因为你一样可以使用Firebug！&lt;/p&gt;

&lt;p&gt;&lt;img alt='Firebug' src='http://jiguang.github.com/content/uploads/2012/02/firebug.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-1：Firebug主页&lt;/p&gt;

&lt;p&gt;要想安装Firebug，可以在火狐浏览器中访问getfirebug.com，然后点击安装按钮（就在网页的右上方）开始安装，安装完成后重启火狐浏览器即可。现在准备开始你的神奇之旅吧！&lt;/p&gt;

&lt;p&gt;我没法在这么短的篇幅中涵盖Firebug的全部功能。实际上，即使整个一章的篇幅都未必够用，我这里只讲一些重点。&lt;/p&gt;

&lt;p&gt;图1-2中所示的HTML选项卡左侧展示的是文档的结构，点击箭头可以展开或收缩文档的子结构。注意在该选项卡中，当把鼠标悬停在某个元素名上时，该元素会在页面中高亮显示。最神奇的是，它还可以通过彩色区域和代码来展示元素的内边距（padding）和外边距（margin）。例如，本例中的内容区域为浅蓝色，内边距是淡紫色而外边距是浅黄色。具体什么颜色其实没那么重要，因为在页面上可以很直观地看到效果。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Checklayout' src='http://jiguang.github.com/content/uploads/2012/02/checklayout.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-2：通过Firebug查看元素的布局&lt;/p&gt;

&lt;p&gt;在HTML选项卡的右侧，可以通过点击样式（Style）选项卡来查看应用在当前元素上的CSS（见图1-3）。这里不仅包含了你自己写的样式，还包含了浏览器自身的内建样式。例如，你可以看一下html.css和quirk.css这两个文件的内容，这些就是内建样式（这些样式称为“用户代理样式”，可以通过点击样式选项卡，在弹出的菜单中选择是否显示用户代理样式）。&lt;/p&gt;

&lt;p&gt;有一点需要注意的是，Firebug有时候会显示一些像-moz-background-clip这种未曾声明过的属性，如果确定没有明确声明那些属性，基本上可以忽略掉。另外，如果你使用的是简写形式的属性，它也会自动扩展成独立的属性，也就是说像这样的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;font: 1em &amp;quot;Andale Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Firebug中就会变成这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;font-family: &amp;quot;Andale Mono&amp;quot;,&amp;quot;Courier New&amp;quot;,Courier, monospace;
font-size: 1em;
font-size-adjust: none;
font-stretch: normal;
font-style: normal;
font-variant: normal;
font-weight: normal;
line-height: normal;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt='Styletab' src='http://jiguang.github.com/content/uploads/2012/02/styletab.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-3：在独立的Firebug窗口中样式选项卡全部展开&lt;/p&gt;

&lt;p&gt;尽管刚开始可能有点儿令人困惑，但是这种呈现方式并不赖，因为它可以提醒你在这些简写的背后还隐藏着一些东西（更多的简写属性详见第二章）。&lt;/p&gt;

&lt;p&gt;另外一个需要注意的是，样式选项卡中列出的规则是按特殊性（specificity）降序排列的，也就是说，第一个是应用在当前元素上最特殊的规则（优先级最高），第二个是特殊性稍低一点的规则，依此类推（更多关于特殊性的内容，详见第二章“特殊性”部分）。&lt;/p&gt;

&lt;p&gt;通过随时单击鼠标右键并在弹出的菜单中选择审查元素（Inspect Element）选项可以查看任何元素（如图1-4所示），也可以点击Firebug图标旁边带箭头的方框图标来切换到审查模式。此时，随着鼠标在页面上的移动，当前元素会显现出轮廓，单击元素即可进行查看。&lt;/p&gt;

&lt;p&gt;在Firebug中单击任何声明左侧的空白处都可以禁用该声明，这在通过禁用声明的方式测试各个属性之间的相互作用时非常有用。在图1-5中还可以看到，当鼠标悬停在颜色值上时会出现一个小色块用来展示该值对应的颜色。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Inspectelement' src='http://jiguang.github.com/content/uploads/2012/02/inspectelement.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-4：右键菜单中的审查元素选项&lt;/p&gt;

&lt;p&gt;&lt;img alt='Disabledstyle' src='http://jiguang.github.com/content/uploads/2012/02/disabledstyle.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-5：禁用的样式和悬浮的颜色框&lt;/p&gt;

&lt;p&gt;如图1-6所示，在Firebug的样式选项卡中也可以查看元素的计算样式。这就意味着，无论你是否曾经声明过，它都会把所有已知的应用在该元素上的CSS属性展示出来。记住，所有的CSS属性都有默认值。在该视图下可以查看全部的默认值，例如当你想知道浏览器应用在标题上的行高（line-height）的确切像素值时，该视图就变得非常有用了。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Computedstyle' src='http://jiguang.github.com/content/uploads/2012/02/computedstyle.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-6：计算样式&lt;/p&gt;

&lt;p&gt;通过查看元素的盒模型（box model）部分，可以精确地查看元素的尺寸大小，如元素的宽高、内边距和外边距等（如图1-7所示），这些都是用像素来表示的。更酷的是当鼠标悬停在该面板中的框上时，页面上就会出现沿着元素外框的上边缘和左边缘放置的像素尺。&lt;/p&gt;

&lt;p&gt;在图1-8中我们可以很明显地看到，Firebug还有许多其他的功能，诸如可以编辑元素的属性值（比如类）或者元素本身的内容、添加或编辑CSS属性和值等等。通过在Firebug界面中随时单击鼠标左键或者右键可以自行探索Firebug的功能，看看你还能做点儿什么。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Layouttab' src='http://jiguang.github.com/content/uploads/2012/02/layouttab.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-7：布局选项卡&lt;/p&gt;

&lt;p&gt;&lt;img alt='Editcss' src='http://jiguang.github.com/content/uploads/2012/02/editcss.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-8：在样式选项卡下飞速编辑CSS&lt;/p&gt;

&lt;p&gt;需要注意，当在样式选项卡下查看元素的CSS时，是无法看到任何伪元素（pseudo-elements）相关的规则影响元素的。作为例子，如果我们使用了这样一个选择器p:first-letter的话，那么当查看p元素时就无法看到这条规则，伪类（pseudo-classes）是可以看到的但是伪元素不能。而如果使用了包含生成内容的清除浮动（clearfix）解决方案，那就很有挑战性了（见第四章“清除浮动”部分）。&lt;/p&gt;

&lt;p&gt;如果你不使用Firefox进行开发但却想一睹Firebug的风采，那么访问这个页面&lt;a href='http://getfirebug.com/lite.html'&gt;getfirebug.com/lite.html&lt;/a&gt;（如图1-9所示）并且按照页面上的指引进行安装，就可以使Firebug运行在Internet Explorer、Opera或者Safari等浏览器中，以此来适应你的开发环境。可以把Firebug精简版链接到测试页面进行测试，或者把它保存到书签栏存成一个书签小程序（bookmarklet）（这也是我所推荐的方式）。&lt;/p&gt;

&lt;p&gt;&lt;img alt='Firebuglite' src='http://jiguang.github.com/content/uploads/2012/02/firebuglite.png' /&gt;&lt;/p&gt;

&lt;p&gt;图1-9：Firebug精简版在IE浏览器上运行&lt;/p&gt;

&lt;p&gt;这个版本的Firebug并不像火狐扩展版的功能那么多，因此才有“精简版”一说，但是它仍然很好很强大。&lt;/p&gt;

&lt;p&gt;Hi！我是本书的译者姬光，如果你对本书或者译文有任何建议，欢迎在此留言与我交流，也欢迎光顾我的个人博客（&lt;a href='http://jiguang.github.com' title='姬光的博客'&gt;jiguang.github.com&lt;/a&gt;）与我交流：）&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>通过对象图学习JavaScript [之一]</title>
   <link href="http://44ux.com/blog/2012/02/06/learning-javascript-with-object-graphs"/>
   <updated>2012-02-06T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/02/06/learning-javascript-with-object-graphs</id>
   <content type="html">&lt;p&gt;成为一个高效的JavaScript开发者的秘诀之一就是真正理解这门语言的语义。本文将会通过通俗易懂的图表来解释JavaScript中最基本的核心内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;随处可见的引用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JavaScript中的变量其实一个标签，它引用了内存中某个位置的一个值。这些值可以是字符串、数字和布尔值的原始值。它们也可以是对象（object）或函数（function）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本地变量&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在下面这个例子中，我们会在顶级作用域中创建四个本地变量，并将它们指向某个原始值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 我们在顶层作用域创建一些本地变量
var name = &amp;quot;Tim Caswell&amp;quot;;
var age = 28;
var isProgrammer = true;
var likesJavaScript = true;
// 测试一下看看两个变量是否引用了相同的值
isProgrammer === likesJavaScript;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出 =&amp;gt; true&lt;br /&gt;&lt;img alt='NewImage' src='http://jiguang.github.com/content/uploads/2012/02/NewImage.png' /&gt;&lt;br /&gt;注意两个布尔值指向的是内存中的同一位置，这是因为原始值是不变的，因此虚拟机（JavaScript解释器 ——&lt;a href='http://jiguang.github.com' title='译者'&gt;译者&lt;/a&gt;注）可以优化它们使所有的引用共享这个原始值的同一个实例。&lt;/p&gt;

&lt;p&gt;在这个代码片段中，我们使用 === 来判断两个引用是否指向同一个值，得到的结果是 true。&lt;/p&gt;

&lt;p&gt;外面的框代表最外层的封闭作用域。这些变量是最顶级的本地变量，不要把它们跟global/window对象的属性相混淆了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对象和原型链&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对象只不过是更多引用的集合，它们指向新创建的对象和原型。它们唯一增添了一点比较特殊的特性就是原型链（Prototype Chains），当你试图访问一个不属于本地对象而属于其父对象的属性时就会用到原型链。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 创建一个父对象
var tim = {
    name: &amp;quot;Tim Caswell&amp;quot;,
    age: 28,
    isProgrammer: true,
    likesJavaScript: true
}
// 创建一个子对象
var jack = Object.create(tim);
// 覆盖一些本地属性
jack.name = &amp;quot;Jack Caswell&amp;quot;;
jack.age = 4;
// 通过原型链进行查找
jack.likesJavaScript;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出 =&amp;gt; true&lt;br /&gt;&lt;img alt='prototypechain' src='http://jiguang.github.com/content/uploads/2012/02/prototypechain.png' /&gt;&lt;br /&gt;这里，我们有一个包含四个属性的被 tim 变量所引用的对象，同时我们创建了一个新的对象，该对象继承自第一个对象并且引用为 jack，然后我们覆盖了本地对象的两个属性。&lt;/p&gt;

&lt;p&gt;现在，当我们查找jack.likesJavaScript时，起初会找到了jack所引用的对象，然后会继续查找likesJavaScript属性。由于本地对象中并不包含该属性，因此我们查找其父对象并找到了该属性，最后则找到了该属性所指向的true这个值。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;全局对象&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;你想知道为什么像&lt;a href='http://jslint.com/'&gt;jslint&lt;/a&gt;这种工具经常会提示你别忘了在变量前面增加var声明吗？好吧，看看如果丢掉的话会发生什么情况。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = &amp;quot;Tim Caswell&amp;quot;;
var age = 28;
var isProgrammer = true;
// 不小心丢掉了var
likesJavaScript = true;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt='novar' src='http://jiguang.github.com/content/uploads/2012/02/novar.png' /&gt;&lt;br /&gt;注意，现在likesJavaScript已经是全局对象的一个属性，而不是外层封闭作用域中的一个自由变量了。这种情况只有在混搭几段脚本时才会有问题。但是，在任何真正的程序中都会出现混搭的情况。&lt;/p&gt;

&lt;p&gt;请牢记一定要添加这些var声明，这样才能保证你的变量是在当前的作用域及其子对象的作用域中。遵循这个简单的规则将使你受益匪浅。&lt;/p&gt;

&lt;p&gt;如果你必须要在全局对象上添点儿东西，那么在浏览器中就明确地使用window.woo，而在node.js中则使用global.goo。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;函数与闭包&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JavaScript并不只是一系列的链式数据结构，它还包含了被称作函数（function）的可执行、可调用的代码。这些函数会创建链式作用域和闭包（closure）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;可视化的闭包&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;函数可以被看作是包含可执行代码及属性的特殊对象。每个函数都有一个特殊的&lt;code&gt;scope&lt;/code&gt;属性，它代表了函数被定义时的环境。如果一个函数是由另外一个函数返回的，则这个指向旧环境的引用就会在一个“闭包”中被新的函数所终止。&lt;/p&gt;

&lt;p&gt;在这个例子中，我们会创建一个简单的工厂方法，它可以生成一个闭包并返回一个函数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function makeClosure(name) {
    return function () {
        return name;
    };
}
var description1 = makeClosure(&amp;quot;Cloe the Closure&amp;quot;);
var description2 = makeClosure(&amp;quot;Albert the Awesome&amp;quot;);
console.log(description1());
console.log(description2());&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出 Cloe the Closure Albert the Awesome&lt;/p&gt;

&lt;p&gt;当我们调用description1()时，虚拟机会查找它所引用的函数并执行。由于这个函数会查找一个名为name的本地变量，因此它会在闭包作用域中进行查找。这个工厂方法的好处就是，每个生成的函数都有自己的本地变量空间。&lt;/p&gt;

&lt;p&gt;参见这篇“为什么使用闭包（&lt;a href='http://howtonode.org/why-use-closure'&gt;why use closure&lt;/a&gt;）”来获得更多关于闭包及其使用的内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;共享的函数和this关键字&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有时由于性能的原因，或者因为就是喜欢这种风格，JavaScript提供了一个this关键字允许你在不同的作用域中依据函数被调用的形式来重用函数对象。&lt;/p&gt;

&lt;p&gt;这里我们创建一些对象，它们全部共享同一个函数，这个函数会在内部引用this来展示调用过程中的变化。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Lane = {
    name: &amp;quot;Lane the Lambda&amp;quot;,
    description: function () {
        return this.name;
    }
};
var description = Lane.description;
var Fred = {
    description: Lane.description,
    name: &amp;quot;Fred the Functor&amp;quot;
};
// 从四个不同的作用域调用函数
console.log(Lane.description());
console.log(Fred.description());
console.log(description());
console.log(description.call({
    name: &amp;quot;Zed the Zetabyte&amp;quot;
}));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：Lane the Lambda Fred the Functor undefined Zed the Zetabyte&lt;/p&gt;

&lt;p&gt;在此图中，我们看到即使Fred.description被设置成Lane.description，它实际上也只是引用了函数本身。因此，三个引用都同样对匿名函数拥有所有权。这就是为什么我没有在构造原型上通过“method”来调用函数的缘故，因为这意味着函数与其构造器和它的“类”之间的某种绑定关系。（详见”什么是this“&lt;a href='http://howtonode.org/what-is-this'&gt;what is this&lt;/a&gt; 获得更多关于this的动态本质的细节）&lt;/p&gt;

&lt;p&gt;我很乐于用图表来使这些数据结构可视化，我希望这些内容可以帮助我们这些视觉学习者更好地掌握JavaScript的语义。我曾有过前端开发/设计和服务器端架构的经验。我希望我独特的视角能够帮助那些从设计岗位过来，并想深入学习这门被称作JavaScript的美妙语言的同学。&lt;/p&gt;

&lt;p&gt;原文地址：&lt;a href='http://howtonode.org/object-graphs'&gt;http://howtonode.org/object-graphs&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Firefox 10内置的Web开发者工具</title>
   <link href="http://44ux.com/blog/2012/02/04/firefox-10-web-developer-tool"/>
   <updated>2012-02-04T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/02/04/firefox-10-web-developer-tool</id>
   <content type="html">&lt;p&gt;在刚刚发布的&lt;a href='http://www.mozilla.org/en-US/firefox/features/'&gt;Firefox 10&lt;/a&gt;中新增了多个内置的Web开发工具，可以说目前来看基本都是鸡肋。对于习惯了&lt;a href='http://getfirebug.com/'&gt;Firebug&lt;/a&gt;的开发者来说，Firefox的这些工具简直太小儿科了！不过不能因为开始很鸡肋，就对它不理不睬，我们还是希望能够不断地有更加出色的Web开发工具出现的。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://jiguang.github.com'&gt;笔者&lt;/a&gt;也是带着好奇+折腾没够的心理，想看一看这货究竟有没有点儿长处。先来看看Page Inspector的截图吧：&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://player.youku.com/player.php/sid/XMzQ3NzM0MTI4/v.swf' /&gt;&lt;/p&gt;

&lt;p&gt;图1：Firefox内置开发者工具截图&lt;/p&gt;

&lt;p&gt;怎么样？很熟悉吧？&lt;/p&gt;

&lt;p&gt;Firefox 10内置的这个工具目前只能查看HTML结构和CSS属性，对于HTML结构只能修改标签内的属性值，而不能修改文本内容。&lt;/p&gt;

&lt;p&gt;对于CSS属性查看器，可以像Firebug一样增添属性或者修改属性值，也可以显示属性之间相互覆盖的情况。&lt;/p&gt;

&lt;p&gt;这货不就是个精简版Firebug吗？是的！看样子是要跟Firebug抢饭碗啊，不过目前来看，这条路还长着呢。&lt;/p&gt;

&lt;p&gt;那么，它究竟有没有点儿长处呢？经过&lt;a href='http://jiguang.github.com'&gt;笔者&lt;/a&gt;仔细查找，终于找到值得一提的一点长处了。在查看CSS的面板中，共有两个标签：Rules和Properties。&lt;/p&gt;

&lt;p&gt;在Properties标签下可以查看或搜索应用在当前被检查的元素上的CSS属性，当鼠标悬浮到某个属性上时会出现一个小问号图标，点击此图标会直接跳到MDN上关于该属性的文档。因此，当你对某个属性不太熟悉时，可以直接点击这里查看文档，方便学习之用，这勉强算是一点儿优点吧。&lt;/p&gt;

&lt;p&gt;另外，在Properties标签的搜索框旁边有个选项“Only user styles”，可以选择是否只显示用户样式。如果取消该选项，就可以看到许多浏览器内置的样式了，可以通过它来查看某些内置样式的值。&lt;/p&gt;

&lt;p&gt;好了，我实在找不出其他有用的地方了！这里还有一个&lt;a href='http://player.youku.com/player.php/sid/XMzQ3NzM0MTI4/v.swf'&gt;官方的视频&lt;/a&gt;，里面介绍的有些东西在Firefox 10里还没有，可以简单看一下。&lt;/p&gt;

&lt;p&gt;对于Firefox本身，大家也可以关注一下它为开发者提供了哪些新的东西：&lt;a href='https://developer.mozilla.org/en/Firefox_10_for_developers'&gt;Firefox 10 for developers&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;在前沿技术方面，Firefox 10还为开发者提供了全屏API，开发者可以开发以全屏模式运行的web应用。Firefox 10增加了对WebGL3D绘图标准的支持，并且支持CSS 3 3D Transform。这里有个原来只能在webkit运行的&lt;a href='http://www.webkit.org/blog-files/3d-transforms/poster-circle.html'&gt;经典例子&lt;/a&gt;，现在也可以在Firefox 10运行了，不过看上去有点儿慢。&lt;/p&gt;

&lt;p&gt;另外值得一提的是：Firefox 10明显改善了插件的兼容性问题，Mozilla能够自动检测服务器上插件的兼容性，在用户升级到Firefox 10时，此前的插件中的绝大部分都将标记为兼容插件。这就意味着自Firefox 10以后，插件开发者们就不用随着Firefox的每次升级而手动更改兼容版本号了。&lt;/p&gt;

&lt;p&gt;有人说Firebug要危险了，不过&lt;a href='http://jiguang.github.com'&gt;笔者&lt;/a&gt;并不这么认为。Firebug的社区是非常强大而活跃的，还有很多坚决拥护Firebug的开发者，所以Firefox想把Firebug比下去还欠些火候。不过话说回来，如果Firefox真的能够开发出比Firebug更优秀更好用的产品，那么也不妨一试。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>如何用CSS3美化菜单</title>
   <link href="http://44ux.com/blog/2012/01/24/how-to-spice-up-your-menu-with-css3"/>
   <updated>2012-01-24T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/01/24/how-to-spice-up-your-menu-with-css3</id>
   <content type="html">&lt;p&gt;快速提示：为每个菜单项添加图像，并在鼠标悬停时滑出。&lt;/p&gt;

&lt;p&gt;&lt;img alt='菜单项添加图像' src='http://jiguang.github.com/go.php?url=http://tympanus.net/TipsTricks/CSS3MenuHoverEffect/' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://jiguang.github.com/go.php?url=http://tympanus.net/TipsTricks/CSS3MenuHoverEffect/'&gt;查看DEMO&lt;/a&gt;    &lt;a href='http://tympanus.net/TipsTricks/CSS3MenuHoverEffect/CSS3MenuHoverEffect.zip'&gt;下载源码&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在这个叫做“&lt;a href='http://jiguang.github.com/index.php/category/tips-and-tricks/'&gt;提示与技巧&lt;/a&gt;”的分类中，我们会介绍一些关于Web开发和Web设计的简短有趣的方法。在今天的小提示中，我们会展示如何为菜单添加一个优美的悬停效果。主要的想法就是当鼠标悬停在菜单项时右侧滑出一个图片。&lt;/p&gt;

&lt;p&gt;每个菜单项（在本例中是一个无序列表项）会包含一个含有两个 &lt;strong&gt;span&lt;/strong&gt; 的锚点和一个图像：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;ul class=&amp;amp;quot;mh-menu&amp;amp;quot;&amp;amp;gt;
    &amp;amp;lt;li&amp;amp;gt;
        &amp;amp;lt;a href=&amp;amp;quot;#&amp;amp;quot;&amp;amp;gt;
            &amp;amp;lt;span&amp;amp;gt;Art Director&amp;amp;lt;/span&amp;amp;gt;
            &amp;amp;lt;span&amp;amp;gt;Henry James&amp;amp;lt;/span&amp;amp;gt;
        &amp;amp;lt;/a&amp;amp;gt;
        &amp;amp;lt;img src=&amp;amp;quot;images/1.jpg&amp;amp;quot; alt=&amp;amp;quot;image01&amp;amp;quot;/&amp;amp;gt;
    &amp;amp;lt;/li&amp;amp;gt;
    &amp;amp;lt;!-- ... --&amp;amp;gt;
&amp;amp;lt;/ul&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们会把 &lt;strong&gt;.mh-menu li a&lt;/strong&gt; 设置成 &lt;strong&gt;display:block&lt;/strong&gt; 并将背景设置为 &lt;strong&gt;rgba(255,255,255, 0.8)&lt;/strong&gt; ，当鼠标悬停到列表项时，我们再把背景色设置成浅蓝色 &lt;strong&gt;rgba(225,239,240, 0.4)&lt;/strong&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.mh-menu li:hover a{
    background: rgba(225,239,240, 0.4);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二个 &lt;strong&gt;span&lt;/strong&gt; 在鼠标悬停时也会改变背景色，但我们希望不同的列表项能够显示不同的颜色，因此我们首先添加一个颜色渐变，然后使用 &lt;strong&gt;nth-child&lt;/strong&gt; 选择器获取元素（&lt;a href='http://jiguang.github.com/go.php?url=http://www.qianduan.net/useful-nth-child-recipies.html'&gt;有用的:nth-child秘方&lt;/a&gt;  ——&lt;a href='http://jiguang.github.com' title='译者'&gt;译者&lt;/a&gt;注。）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.mh-menu li a span:nth-child(2){
    /*...*/
    transition: color 0.2s linear;
}
.mh-menu li:nth-child(1):hover span:nth-child(2){
    color: #ae3637;
}
.mh-menu li:nth-child(2):hover span:nth-child(2){
    color: #c3d243;
}
.mh-menu li:nth-child(3):hover span:nth-child(2){
    color: #d38439;
}
.mh-menu li:nth-child(4):hover span:nth-child(2){
    color: #8e7463;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于图像要滑到右侧，因此，首先它的 &lt;strong&gt;left&lt;/strong&gt; 值必须是 &lt;strong&gt;0px&lt;/strong&gt;，同时我们也为它的透明度添加一个渐变，它会从初始值 &lt;strong&gt;0&lt;/strong&gt; 渐变到 &lt;strong&gt;1&lt;/strong&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.mh-menu li img{
    position: absolute;
    z-index: 1;
    left: 0px;
    top: 0px;
    opacity: 0;
    transition: left 0.4s ease-in-out, opacity 0.6s ease-in-out;
}
.mh-menu li:hover img{
    left: 300px;
    opacity: 1;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;瞧，这样我们就有了一个很棒的滑出的效果了！&lt;/p&gt;

&lt;p&gt;注意要确保锚点的 z-index 值比图像高一点儿，这样图像才会在锚点的下方滑出而不是在它的上面。&lt;/p&gt;

&lt;p&gt;另外，我们还可以使背景色在悬浮的时候不透明，例如完全是白色（&lt;a href='http://jiguang.github.com/go.php?url=http://tympanus.net/TipsTricks/CSS3MenuHoverEffect/index2.html'&gt;demo 2&lt;/a&gt;），或者为每个子元素设置不同的颜色（&lt;a href='http://jiguang.github.com/go.php?url=http://tympanus.net/TipsTricks/CSS3MenuHoverEffect/index3.html'&gt;demo 3&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;本文中的演示由  &lt;a href='http://jiguang.github.com/go.php?url=http://www.bartoszkosowski.com/'&gt;Bartosz Kosowski&lt;/a&gt;  (&lt;a href='http://jiguang.github.com/go.php?url=http://creativecommons.org/licenses/by-nc/3.0/'&gt;CC BY-NC 3.0&lt;/a&gt;) 提供。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://jiguang.github.com/go.php?url=http://tympanus.net/TipsTricks/CSS3MenuHoverEffect/'&gt;查看DEMO&lt;/a&gt;    &lt;a href='http://tympanus.net/TipsTricks/CSS3MenuHoverEffect/CSS3MenuHoverEffect.zip'&gt;下载源码&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文地址：&lt;a href='http://jiguang.github.com/go.php?url=http://tympanus.net/codrops/2012/01/22/how-to-spice-up-your-menu-with-css3/'&gt;http://tympanus.net/codrops/2012/01/22/how-to-spice-up-your-menu-with-css3/&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Git超简洁教程</title>
   <link href="http://44ux.com/blog/2012/01/21/git-the-simple-guide"/>
   <updated>2012-01-21T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/01/21/git-the-simple-guide</id>
   <content type="html">&lt;p&gt;原文链接：&lt;a href='http://rogerdudler.github.com/git-guide/'&gt;http://rogerdudler.github.com/git-guide/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://jiguang.github.com/index.php/tag/git/'&gt;git&lt;/a&gt;超简洁教程 ——只是初学者的简单教程，没有神马高深的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下载OSX平台的git：&lt;a href='http://code.google.com/p/git-osx-installer/downloads/list?can=3'&gt;Download git for OSX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载Windows平台的git：&lt;a href='http://code.google.com/p/msysgit/downloads/list?can=3'&gt;Download git for Windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载Linux平台的git：&lt;a href='http://book.git-scm.com/2_installing_git.html'&gt;Download git for Linux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;创建新分支&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;创建一个新目录，打开目录并执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来创建一个新的资源库（repository）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;检出分支&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通过以下命令创建一个本地资源库（local repository）的工作副本（working copy）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone /path/to/repository&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当使用远程服务器时，命令则为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone username@host:/path/to/repository&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;工作流程&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;你的本地分支包含三个由git维护的“树”，第一个是你的&lt;strong&gt;工作目录（Working Directory），&lt;/strong&gt;它保存着实际的文件；第二个是&lt;strong&gt;索引（Index）&lt;/strong&gt;，它的行为像是一个临时区域；最后一个是头（HEAD），它指向你的最后一次提交。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://jiguang.github.com/content/uploads/2012/01/branches.png'&gt;&lt;img alt='' src='http://jiguang.github.com/content/uploads/2012/01/branches.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;添加和提交&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;你可以使用下面的命令执行更改（添加到索引Index）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add &amp;lt;filename&amp;gt;
git add *&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这只git基本工作流的第一步，想确实提交这些更改要使用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -m &amp;quot;Commit message&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在文件会被提交到头（HEAD），但是还没有到远程资源库（remote repository）中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;推入变更&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;你的更改现在在本地工作副本的头（HEAD）文件中，若想把更改发送到远程资源库，执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin master&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;master可以改为任何你想要推入文件的资源库的名字。&lt;/p&gt;

&lt;p&gt;如果你还没有克隆（clone）任何已存在的资源库，并且希望本地资源库连接到远程服务器，你需要用下面命令添加：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add origin &amp;lt;server&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在，你可以把你的更改推入选定的远程服务器了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分支&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;分支（branch）是用来开发特性相互独立的部分，当创建一个资源库时，主（&lt;em&gt;master&lt;/em&gt;）分支是默认的分支。可以使用其它分支进行开发，并在开发结束后合并到主分支。&lt;/p&gt;

&lt;p&gt;&lt;img alt='主分支' src='http://gitx.laullon.com/' /&gt;]&lt;/p&gt;

&lt;p&gt;创建一个名为“feature_x”的分支，并切换到该分支可以使用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b feature_x&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以再切回到主分支：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;并且删除刚才创建的分支：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch -d feature_x&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你不把分支推入到远程资源库的话，别人是无法使用该分支的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin &amp;amp;lt;branch&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;更新与合并&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;想要更新你的本地资源库到最新的提交，可以在你的本地资源库执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来抓取（&lt;em&gt;fetch&lt;/em&gt;）和合并（merge）远程的更改。&lt;/p&gt;

&lt;p&gt;要想合并其它分支到你的当前分支（active branch），比如主分支，使用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git merge &amp;amp;lt;branch&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这两种情况下，git都会尝试自动合并更改。不幸的是，有时候这是不可能的，而且会导致冲突（&lt;em&gt;conflicts&lt;/em&gt;）。这时你需要通过修改git所列出的文件来手动合并冲突，修改后，你需要将它们标记为已合并：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add &amp;amp;lt;filename&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在合并更改之前，也可以通过下列命令进行预览：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git diff &amp;amp;lt;source_branch&amp;amp;gt; &amp;amp;lt;target_branch&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们最好为软件的版本创建标签（tag），这是已知的概念，在SVN中也存在。你可以通过执行下面的命令创建一个建一个名为1.0.0的新标签：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git tag 1.0.0 1b2e1d63ff&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个1b2e1d63ff 代表了你希望标签所引用的提交id（commit id）的前10个字符，你可以通过：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来获取提交id，你也可以使用更少的字符作为提交id，只不过它必须是唯一的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;替换本地更改&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;万一你做错了什么（这肯定不会发生），你可以用下面的命令替换本地更改：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -- &amp;amp;lt;filename&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会用头（HEAD）文件中最后的内容来替换本地工作树（working tree）中的更改。已经添加到索引中的更改以及新文件都会被保留。&lt;/p&gt;

&lt;p&gt;反之，如果你想放弃所有本地的更改和提交，可以抓取服务器最新的历史并将本地的主分支指向它，像这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git fetch origin
git reset --hard origin/master&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;有用的提示&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;内置的git图形界面（GUI）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gitk&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用彩色的git输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config color.ui true&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以每次提交单独一行的格式显示日志：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config format.pretty oneline&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用交互的添加操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add -i&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;链接及资源&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;图形客户端&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://gitx.laullon.com/'&gt;GitX (L) (OSX, open source)&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www.git-tower.com/'&gt;Tower (OSX)&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www.sourcetreeapp.com/'&gt;Source Tree (OSX, free)&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://mac.github.com/'&gt;GitHub for Mac (OSX, free)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;指南及手册&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://book.git-scm.com/'&gt;Git Community Book&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://progit.org/book/'&gt;Pro Git&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://think-like-a-git.net/'&gt;Think like a git&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://help.github.com/'&gt;GitHub Help&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://marklodato.github.com/visual-git-guide/index-en.html'&gt;A Visual Git Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>JavaScript并行运算新机遇——WebWorkers的神奇魔法</title>
   <link href="http://44ux.com/blog/2012/01/20/html5-web-workers"/>
   <updated>2012-01-20T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2012/01/20/html5-web-workers</id>
   <content type="html">&lt;p&gt;原文链接：&lt;a href='http://www.codeproject.com/KB/solution-center/HTML5-Web-Workers.aspx'&gt;http://www.codeproject.com/KB/solution-center/HTML5-Web-Workers.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;很明显&lt;a href='http://jiguang.github.com/index.php/tag/html5/' title='html5'&gt;html5&lt;/a&gt;的应用是用JavaScript写的，但是跟其他的开发环境相比（例如一些原生的），JavaScript一直有个很严重的局限性：它的所有执行进程都在同一个线程里。&lt;/p&gt;

&lt;p&gt;这对于如今像i5/i7这种动辄就8个CPU的多核处理器就有些麻烦了，即使最新的ARM手机处理器也都是双核或者4核。如果顺利的话，我们有望看到HTML5为Web开发提供一个应对这些又新又强劲的处理器的途径，让我们可以拥抱一个Web应用开发的新时代。&lt;/p&gt;

&lt;p&gt;&lt;img alt='原文插图1' src='http://www.codeproject.com/KB/solution-center/HTML5-Web-Workers/image001.jpg' /&gt;&lt;/p&gt;

&lt;h2 id='_workers_'&gt;在没有 Workers 之前&lt;/h2&gt;

&lt;p&gt;这个JavaScript的局限性意味着一个长时间运行的进程会冻结主窗口。我们常说我们被“UI 线程”阻塞。这是由于主线程在处理所有的可视化元素及其相关任务：绘制，刷新，动画，用户输入事件等等。&lt;/p&gt;

&lt;p&gt;我们都知道这个线程过载的严重后果：页面冻结并且用户不能再与你的应用进行交互了。当然，这时的用户体验那是相当差了，并且用户可能决定关掉这个Tab或者整个浏览器，你可能不希望看到这发生在你的app上。&lt;/p&gt;

&lt;p&gt;为了避免发生这种情况，浏览器已经引入一种保护机制，当一个脚本有可能长时间运行时，可以对用户进行警告。&lt;/p&gt;

&lt;p&gt;悲剧的是，这种机制并不能正确分辨究竟一段脚本是编写有问题，还是它确实需要更多的时间来完成它的工作。尽管如此，由于它阻塞了UI线程，所以还是让你知道有可能现在有错误发生的比较好。下面是一些消息的例子（从Firefox 5 和 IE9 获得）：&lt;/p&gt;

&lt;p&gt;&lt;img alt='原文插图' src='http://www.codeproject.com/KB/solution-center/HTML5-Web-Workers/image002.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt='原文插图' src='http://www.codeproject.com/KB/solution-center/HTML5-Web-Workers/image003.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;迄今为止，由于以下两个原因，那些问题已经很少发生了：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTML和JavaScript已经与原来的使用方式不同了，而且使用的目的也不同了，因为其他的技术可以完成多线程的任务。与本地的应用相比，网站也没有提供更丰富的体验。 2. 总有一些其他的办法可以或多或少地解决这些并发问题。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那些办法都是Web开发者所熟知的。例如，通过 setTimeout（） 和 setInterval（）方法，我们可以试图模拟并行任务。通过 XMLHttpRequest对象，也可以异步地处理HTTP请求，避免了从远程服务器载入资源时冻结UI。最后，应用DOM事件写出的应用程序给人一种错觉，让人误以为几个事件在同时发生。真的是错觉吗？是的！&lt;/p&gt;

&lt;p&gt;为了更好的理解其原理，让我们来看一段伪代码并且看看在浏览器内部究竟发生了什么：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;script type=&amp;amp;quot;text/javascript&amp;amp;quot;&amp;amp;gt;
function init(){
{ piece of code taking 5ms to be executed }
A mouseClickEvent is raised
{ piece of code taking 5ms to be executed }
setInterval(timerTask,&amp;amp;quot;10&amp;amp;quot;);
{ piece of code taking 5ms to be executed }
 }
function handleMouseClick(){
piece of code taking 8ms to be executed
}
function timerTask(){
piece of code taking 2ms to be executed
}
&amp;amp;lt;/script&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让我们为这段代码建立一个模型。这个图表向我们展示了一个时间段内浏览器内部究竟发生了什么：&lt;/p&gt;

&lt;p&gt;&lt;img alt='原文插图' src='http://www.codeproject.com/KB/solution-center/HTML5-Web-Workers/image004.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;这个图表很好地诠释了我们的任务的非并行本质。5毫秒后，用户产生一个鼠标点击事件。然而，由于init()方法仍然在执行，并且独占了主线程，所以这个事件不能被立即处理。点击事件将被保存并且延迟处理。&lt;/p&gt;

&lt;p&gt;从5毫秒到10毫秒之间：init()方法在这5毫秒中仍然执行，然后在10毫秒时请求调用 timerTask() 这个方法。这个方法理论上应该在20毫秒的时间点执行。&lt;/p&gt;

&lt;p&gt;从10毫秒到15毫秒之间：init()方法仍然需要5毫秒来完成运行。这与15毫秒时的黄色区块相对应。由于我们冻结了主线程，所以浏览器现在才可以继续进行刚才保存的请求。&lt;/p&gt;

&lt;p&gt;从15毫秒到23毫秒之间：浏览器开始执行handleMouseClick（）方法，该方法执行了8毫秒（蓝色区块）。&lt;/p&gt;

&lt;p&gt;从23毫秒到25毫秒之间：作为一个副作用，在20毫秒时间点就应该执行的timerTask（）方法被稍微平移了3毫秒。而其他的时间点，被当作没有代码占用CPU。&lt;/p&gt;

&lt;p&gt;注意：这个例子和上面的图表（通过特征监测机制判断使用SVG或者PNG）是受到这篇文章的启发：&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://xebee.xebia.in/2010/11/02/multithreading-in-javascript-with-web-workers/'&gt;HTML5 Web Workers Multithreading in JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;所有这些提示并没有解决我们最初的问题：所有东西都在主UI线程里执行。&lt;/p&gt;

&lt;p&gt;此外，即使JavaScript还没有被用来开发像其他“高级语言”一样的应用，它仍然在随着HTML5和其相关技术所提供的新的可能而改变。因此给JavaScript赋予更多新的能力，使之能够建立新一代的能够处理并行任务的应用，就变得更加重要了。这就是为什么我们有了Web Workers。&lt;/p&gt;

&lt;h2 id='web_workers__ui'&gt;Web Workers 或者 如何在UI线程执行代码&lt;/h2&gt;

&lt;p&gt;&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://www.whatwg.org/specs/web-apps/current-work/complete/workers.html'&gt;Web Workers APIs&lt;/a&gt;定义了一个在后台运行脚本的方法。你可以执行一些存活在主页面之外的线程而不影响页面的绘制性能。然而，同样的方式，我们知道不是所有的算法都能并行执行的，也不是所有的JavaScript代码都能从Workers中受益。Ok，唠叨的够多了，让我们看看这些著名的Workers。&lt;/p&gt;

&lt;h2 id='web_worker'&gt;我的第一个Web Worker&lt;/h2&gt;

&lt;p&gt;由于Web Workers将在一个独立的线程里执行，你必须把代码从主页面中分离出来，放到独立的文件中。完成这些后，你需要实例化一个Worker对象来调用它们：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myHelloWorker = new Worker(&amp;#39;helloworkers.js&amp;#39;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后你就可以给它发送一条信息来开启Worker（因此也开启了一个窗口之外的线程）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myHelloWorker.postMessage();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;的确，Web Workers和主页面通过消息进行通信。这些消息可以是一般的字符串或者JSON对象。为了演示简单的消息发送，我们来review一个非常基础的例子。这个例子会发送一个字符串给worker，将其与worker联系起来。首先，将下面代码放到“ helloworker.js”文件中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function messageHandler(event) {
// Accessing to the message data sent by the main page var messageSent = event.data;
// Preparing the message that we will send back
var messageReturned = &amp;quot;Hello &amp;quot; + messageSent + &amp;quot; from a separate thread!&amp;quot;;
// Posting back the message to the main page this.postMessage(messageReturned);
}
// Defining the callback function raised when the main page will call us
this.addEventListener(&amp;#39;message&amp;#39;, messageHandler, false);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们只在“helloworkers.js”中定义了一小段将在另一个线程执行的代码。它可以从你的主页面接收消息，在上面完成一些任务，并且向你的主页面返回一个消息。然后我们需要在主页面编写一个接收者。下面是处理消息的页面：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;!DOCTYPE html&amp;amp;gt;
&amp;amp;lt;html&amp;amp;gt;
&amp;amp;lt;head&amp;amp;gt;
&amp;amp;lt;title&amp;amp;gt;Hello Web Workers&amp;amp;lt;/title&amp;amp;gt;
&amp;amp;lt;/head&amp;amp;gt;
&amp;amp;lt;body&amp;amp;gt;
&amp;amp;lt;div id=&amp;amp;quot;output&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;script type=&amp;amp;quot;text/javascript&amp;amp;quot;&amp;amp;gt;
// Instantiating the Worker
var myHelloWorker = new Worker(&amp;#39;helloworkers.js&amp;#39;);
// Getting ready to handle the message sent back
// by the worker myHelloWorker.addEventListener(&amp;amp;quot;message&amp;amp;quot;, function (event) {
document.getElementById(&amp;amp;quot;output&amp;amp;quot;).textContent = event.data;
}, false);
// Starting the worker by sending a first message
myHelloWorker.postMessage(&amp;amp;quot;David&amp;amp;quot;);
// Stopping the worker via the terminate() command myHelloWorker.terminate();
&amp;amp;lt;/script&amp;amp;gt;
&amp;amp;lt;/body&amp;amp;gt;
&amp;amp;lt;/html&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行的结果将是：”Hello David from a separate thread!”，你被打动了，有木有？&lt;/p&gt;

&lt;p&gt;你要注意worker会一直存活直到你终止它。&lt;/p&gt;

&lt;p&gt;既然没有自动垃圾收集，那么控制它们的状态就全靠你自己了。并且你要记住，初始化一个worker会消耗一定的内存…而且也不要忽略冷启动时间。要想停止一个worker，有两种可能的方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;从主调用页面调用terminate（）命令。&lt;/li&gt;

&lt;li&gt;在worker内部通过调用close（）命令。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;演示：&lt;/strong&gt;你可以在浏览器中测试这个稍微增强了一点的例子： &lt;a href='http://david.blob.core.windows.net/html5/HelloWebWorkers_EN.htm'&gt;http://david.blob.core.windows.net/html5/HelloWebWorkers_EN.htm&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='json'&gt;通过JSON发送消息&lt;/h2&gt;

&lt;p&gt;当然，大多数时候我们会发送更加结构化的数据给Workers。（顺便说一下，Web Workers也可以通过&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://www.w3.org/TR/webmessaging/#messagechannel'&gt;Message channels&lt;/a&gt;进行通讯）&lt;/p&gt;

&lt;p&gt;但是使用JSON格式是唯一可以给worker发送结构化消息的方法。幸运的是，浏览器现在支持worker的程度已经与原生支持JSON的程度一样好了。他们真是太好了！&lt;/p&gt;

&lt;p&gt;让我们拿出之前的代码例子。我们打算增加一个WorkerMessage类型的对象。这种类型将被用来向Web Workers发送一些带参数的命令。&lt;/p&gt;

&lt;p&gt;我们使用下面这个简化版的HelloWebWorkersJSON_EN.htm页面：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;!DOCTYPE html&amp;amp;gt;
&amp;amp;lt;html&amp;amp;gt;
&amp;amp;lt;head&amp;amp;gt;
&amp;amp;lt;title&amp;amp;gt;Hello Web Workers&amp;amp;lt;/title&amp;amp;gt;
&amp;amp;lt;/head&amp;amp;gt;
&amp;amp;lt;body&amp;amp;gt;
&amp;amp;lt;div id=&amp;amp;quot;output&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;script type=&amp;amp;quot;text/javascript&amp;amp;quot;&amp;amp;gt;
// Instantiating the Worker
var myHelloWorker = new Worker(&amp;#39;helloworkers.js&amp;#39;);
// Getting ready to handle the message sent back
// by the worker
myHelloWorker.addEventListener(&amp;amp;quot;message&amp;amp;quot;, function (event) {
document.getElementById(&amp;amp;quot;output&amp;amp;quot;).textContent = event.data;
}, false);
// Starting the worker by sending a first message
myHelloWorker.postMessage(&amp;amp;quot;David&amp;amp;quot;);
// Stopping the worker via the terminate() command
myHelloWorker.terminate();
&amp;amp;lt;/script&amp;amp;gt;
&amp;amp;lt;/body&amp;amp;gt;
&amp;amp;lt;/html&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们使用一种非侵入式的JavaScript方法来帮助我们分离表现层和逻辑层。然后绑定的逻辑就存在于HelloWebWorkersJSON_EN.js文件中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// HelloWebWorkersJSON_EN.js associated to HelloWebWorkersJSON_EN.htm
// Our WorkerMessage object will be automatically
// serialized and de-serialized by the native JSON parser
function WorkerMessage(cmd, parameter) {
this.cmd = cmd; this.parameter = parameter;
}
// Output div where the messages sent back by the worker will be displayed
var _output = document.getElementById(&amp;quot;output&amp;quot;);
/* Checking if Web Workers are supported by the browser */
if (window.Worker) {
// Getting references to the 3 other HTML elements
var _btnSubmit = document.getElementById(&amp;quot;btnSubmit&amp;quot;);
var _inputForWorker = document.getElementById(&amp;quot;inputForWorker&amp;quot;);
var _killWorker = document.getElementById(&amp;quot;killWorker&amp;quot;);
// Instantiating the Worker
var myHelloWorker = new Worker(&amp;#39;helloworkersJSON_EN.js&amp;#39;);
// Getting ready to handle the message sent back
// by the worker
myHelloWorker.addEventListener(&amp;quot;message&amp;quot;, function (event) {
_output.textContent = event.data;
}, false);
// Starting the worker by sending it the &amp;#39;init&amp;#39; command
myHelloWorker.postMessage(new WorkerMessage(&amp;#39;init&amp;#39;, null));
// Adding the OnClick event to the Submit button
// which will send some messages to the worker
_btnSubmit.addEventListener(&amp;quot;click&amp;quot;, function (event) {
// We&amp;#39;re now sending messages via the &amp;#39;hello&amp;#39; command
myHelloWorker.postMessage(new WorkerMessage(&amp;#39;hello&amp;#39;, _inputForWorker.value));
}, false);
// Adding the OnClick event to the Kill button
// which will stop the worker. It won&amp;#39;t be usable anymore after that.
_killWorker.addEventListener(&amp;quot;click&amp;quot;, function (event) {
// Stopping the worker via the terminate() command
myHelloWorker.terminate();
_output.textContent = &amp;quot;The worker has been stopped.&amp;quot;;
}, false);
} else {
_output.innerHTML = &amp;quot;Web Workers are not supported by your browser. Try with IE10: &amp;lt;a href=\&amp;quot;http://ie.microsoft.com/testdrive\&amp;quot;&amp;gt;download the latest IE10 Platform Preview&amp;lt;/a&amp;gt;&amp;quot;;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再次说明，这个例子是非常基础的。但是，它可以帮助你理解背后的逻辑。当然，没人能阻止你发送一些可以被人工智能或者物理引擎处理的游戏元素。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;演示：&lt;/strong&gt;你可以在这儿测试JSON的例子： &lt;a href='http://david.blob.core.windows.net/html5/HelloWebWorkersJSON_EN.htm'&gt;http://david.blob.core.windows.net/html5/HelloWebWorkersJSON_EN.htm&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='id1'&gt;浏览器支持&lt;/h2&gt;

&lt;p&gt;Web Workers刚刚出现在IE10平台预览版。Firefox（3.6以上），Safari（4.0以上），Chrome和Opera11也都支持。然而，这些浏览器的手机版并不支持。如果你想获得更详尽的浏览器支持列表，可以看看这里：&lt;a href='http://caniuse.com/#search=worker'&gt;http://caniuse.com/#search=worker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;为了实时地了解你的代码的支持情况，请使用&lt;strong&gt;特性监测机制&lt;/strong&gt;。（你不应该使用神马用户代理嗅探！）&lt;/p&gt;

&lt;p&gt;为了帮助你实现，这里有2个可用的解决方案。第一个是用这样一小段代码，你自己简单地测试特性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* Checking if Web Workers are supported by the browser */ if (window.Worker) { // Code using the Web Workers }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二个是使用著名的&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://www.modernizr.com/'&gt;Modernizr&lt;/a&gt;库（现在已经原生的移到了ASP.NET的MVC3项目模版中）。然后，只要用下面这样一段代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;script type=&amp;amp;quot;text/javascript&amp;amp;quot;&amp;amp;gt;
 var divWebWorker = document.getElementById(&amp;amp;quot;webWorkers&amp;amp;quot;);
if (Modernizr.webworkers) {
divWebWorker.innerHTML = &amp;amp;quot;Web Workers ARE supported&amp;amp;quot;;
} else {
divWebWorker.innerHTML = &amp;amp;quot;Web Workers ARE NOT supported&amp;amp;quot;;
}
&amp;amp;lt;/script&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如，这里就是你的浏览器支持情况：Web Workers &lt;strong&gt;are not&lt;/strong&gt; supported inside your browser.（原文页面对当前浏览器支持情况进行监测并将结果展示在这里。&lt;a href='http://laserji.com/'&gt;译者&lt;/a&gt;注。）&lt;/p&gt;

&lt;p&gt;这将使你的应用产生两个版本。如果Web Workers不被支持，你就正常执行你的JavaScript代码。如果是在大多数现代浏览器中，Web Workers是被支持的，你就可以推送一些JavaScript代码给workers用来加强你的应用的性能。这样你就不必中断任何事情或者仅仅为最新的浏览器单独建立一个版本了。它在全部浏览器中都能工作，只是性能稍有差别。&lt;/p&gt;

&lt;h2 id='workerworker'&gt;Worker不能访问的元素（Worker不能干什么）&lt;/h2&gt;

&lt;p&gt;与其看看你用Workers不能干什么，不如让我们了解一下你只能用worker干点儿什么：&lt;/p&gt;

&lt;p&gt;（下面是几个表格）&lt;/p&gt;

&lt;p&gt;Method Description void close(); Terminates the worker thread. void importScripts(urls); A comma-separated list of additional JavaScript files. void postMessage(data); Sends a message to or from the worker thread.&lt;/p&gt;

&lt;p&gt;Attributes Type Description location WorkerLocation Represents an absolute URL, including protocol, host, port, hostname, pathname, search, and hash components. navigator WorkerNavigator Represents the identity and onLine state of the user agent client. self WorkerGlobalScope The worker scope, which includes the WorkerLocation and WorkerNavigator objects.&lt;/p&gt;

&lt;p&gt;Event Description onerror A runtime error occurred. onmessage Message data received.&lt;/p&gt;

&lt;p&gt;Method Description void clearInterval(handle); Cancels a timeout identified by handle. void clearTimeout(handle); Cancels a timeout identified by handle. long setInterval(handler, timeout value, arguments); Schedules a timeout to be run repeatedly after the specified number of milliseconds. Note that you can now pass additional arguments directly to the handler. If handler is a DOMString, it is compiled as JavaScript. Returns a handle to the timeout. Clear with clearInterval. long setTimeout(handler, timeout value, arguments); Schedules a timeout to run after the specified number of milliseconds. Note that you can now pass additional arguments directly to the handler. If handler is a DOMString, it is compiled as JavaScript. Returns a handle to the timeout. Clear with clearTimeout.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;这些表格是从MSDN文档中引用的：&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://msdn.microsoft.com/fr-fr/ie/hh272905.aspx#_HTML5WebWorker'&gt;HTML5 Web Worker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;总之，你&lt;strong&gt;没有操作DOM的权限&lt;/strong&gt;。这有一个非常好的图表作为总结：&lt;/p&gt;

&lt;p&gt;&lt;img alt='原文配图' src='http://www.codeproject.com/KB/solution-center/HTML5-Web-Workers/image007.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;例如，既然你在worker中没有对window对象的操作权限，你就不能操作本地存储（Local Storage，反正看起来也不像线程安全的）。那些限制对于在其他环境中使用多线程操作的开发者来说或许看起来过于严格了。然而，最大的优点是我们不会陷入我们经常遇到的问题：死锁，竞争条件等。对于这些，在Web Workers中我们都不用考虑。这使得当使用Web Workers在一些特殊的场景中允许一些有趣的性能增强时变得非常好用。&lt;/p&gt;

&lt;h2 id='id2'&gt;错误处理与调试&lt;/h2&gt;

&lt;p&gt;处理Web Workers的错误非常容易。你只需要用与注册OnMessage事件同样方法注册一个OnError事件即可：&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myWorker.addEventListener(&amp;quot;error&amp;quot;, function (event) { _output.textContent = event.data; }, false);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是Web Worker能给你的帮助你调试代码的最好的原生支持了…不过这个非常有限不是吗？&lt;/p&gt;

&lt;h2 id='f12'&gt;通过F12开发工具获得更好的调试体验&lt;/h2&gt;

&lt;p&gt;为了突破这些局限，&lt;strong&gt;IE10在它的脚本调试器中为你提供了一个直接调试Web Workers代码的功能&lt;/strong&gt;，就像调试其他脚本一样。&lt;/p&gt;

&lt;p&gt;对此，你需要通过F12健运行开发者工具栏，并且点击“脚本“页卡。你应该还看不到与你的worker相关的JS文件。但是一旦点击”开始调试“按钮，它就应该神奇地出现了：&lt;/p&gt;

&lt;p&gt;&lt;img alt='原文配图' src='http://www.codeproject.com/KB/solution-center/HTML5-Web-Workers/image008-1.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;下一步就是像调试你以往的JavaScript代码一样调试你的worker了！&lt;/p&gt;

&lt;p&gt;&lt;img alt='原文配图' src='http://www.codeproject.com/KB/solution-center/HTML5-Web-Workers/image009-1.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;IE10是目前唯一支持这样调试的浏览器。如果你想了解更多关于这个特性的细节，你可以读一下这篇文章：&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://blogs.msdn.com/b/ie/archive/2011/07/12/debugging-web-workers-in-ie10.aspx'&gt;Debugging Web Workers in IE10&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='consolelog'&gt;一个用来模拟console.log()的有趣方法&lt;/h2&gt;

&lt;p&gt;最后，你要知道在worker中是不能使用console对象的。因此，如果你需要通过.log()方法来跟踪worker内部发生了什么，它将不会工作，因为console对象没有定义。幸好，我找到一个有趣的方法，通过MessageChannel：&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://www.davidflanagan.com/2011/01/consolelog-for.html'&gt;console.log() for Web Workers&lt;/a&gt;.可以&lt;strong&gt;模拟console.log()&lt;/strong&gt;行为。该方法在IE10，Chrome和Opera中工作良好，但是在Firefox中还不行，因为Firefox还不支持MessageChannel。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;为了使这个链接中的例子在IE10下能工作，你需要把下面这行代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;console.log.apply(console,args); // Pass the args to the real log&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;console.log.apply(console, args); // Pass the args to the real log&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，你应该可以得到这样的结果：&lt;/p&gt;

&lt;p&gt;&lt;img alt='原文配图' src='http://www.codeproject.com/KB/solution-center/HTML5-Web-Workers/image010.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;例子：&lt;/strong&gt;如果你想使用这个console.log()模拟，请到这里：&lt;a href='http://david.blob.core.windows.net/html5/HelloWebWorkersJSONdebug.htm'&gt;http://david.blob.core.windows.net/html5/HelloWebWorkersJSONdebug.htm&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='id3'&gt;用例分析与如何识别潜在的候选者（使用场景）&lt;/h2&gt;

&lt;p&gt;-Web Workers 用在什么场景？&lt;/p&gt;

&lt;p&gt;当你在网上查找Web Workers的例子时，你总会找到一类的例子：强化的数学/科学计算。然后你会看到一些JavaScript光线跟踪，分形，素数之类的东西。虽然是理解Workers工作方式的很好的例子，但是很少能给我们一些关于如何在”真实的世界“中的应用中使用它们具体观点。&lt;/p&gt;

&lt;p&gt;确实，我们上面所看到的这些Web Workers自身的不足缩小了能使用Web Workers的有趣场景的范围。尽管如此，如果你花点儿时间仔细想想，你就会发现一些新的有趣用途：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;图像处理&lt;/strong&gt; 通过使用从&amp;amp;lt；canvas&amp;amp;gt；或者&lt;code&gt;&amp;amp;lt;video&amp;amp;gt;&lt;/code&gt;元素中获取的数据。你可以把图像分割成几个不同的区域并且把它们推送给并行的不同Workers。这样你就会在新一代的多核处理器中受益。你受益越多，你运行的就越快。&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;大量数据&lt;/strong&gt; 检索，你需要在调用 XMLHTTPRequest后处理大量的数据。如果处理这些数据所需的时间长短非常重要，你最好在Web Worker中来做这些，避免冻结UI线程。这样你可以保持一个可交互的应用。&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;背景数据分析：&lt;/strong&gt;由于在使用Web Workers的时候，我们有更多潜在的CPU可用时间，我们现在可以考虑一下JavaScript中的新应用场景。例如，我们可以想像在不影响UI体验的情况下实时处理用户输入。利用这样一种可能，我们可以想像一个像Word（Office Web Apps 套装）一样的应用：当用户打字时后台在词典中进行查找，帮助用户自动纠错等等。&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;针对本地数据的并发请求&lt;/strong&gt;。IndexDB 将提供本地存储（Local Storage）所不能提供给我们的特性：一个针对Web Workers的线程安全的存储环境。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此外，如果你想转到视频游戏的世界，你可以考虑推送人工智能或者物理引擎的数据到Web Workers。例如，我做了这样一个小实验：&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://extremelysatisfactorytotalitarianism.com/blog/?p=932'&gt;On Web Workers, GWT, and a New Physics Demo &lt;/a&gt;，该实验使用&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://box2d-js.sourceforge.net/'&gt;Box2D physic engine&lt;/a&gt;和Workers。对于你的人工智能引擎，这也意味着你可以使用同样的时间帧来处理更多的数据（例如在棋类游戏中预测更多的步数）。&lt;/p&gt;

&lt;p&gt;我的一些同事或许会说唯一的限制就是你的想象力！&lt;/p&gt;

&lt;p&gt;但是一般来说，只要你不需要DOM，任可能影响用户体验的耗时的JavaScript代码都是一个使用Web Workers很好的候选。然而，使用Workers时你还需要注意以下三点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;worker的初始化时间和通讯时间不应该比自身的处理时间长。&lt;/li&gt;

&lt;li&gt;使用多个Workers时的内存消耗。 3. 代码块之间的依赖关系，你可能需要一些同步的逻辑。并行没那么简单我的朋友！&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;从我们的角度，我们最近发布了一个演示，叫做&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://ie.microsoft.com/testdrive/Graphics/WorkerFountains/Default.html'&gt;Web Workers Fountains&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img alt='原文配图' src='http://www.codeproject.com/KB/solution-center/HTML5-Web-Workers/image011.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;这个例子展示了一些颗粒效果（喷泉）并且对每个喷泉使用一个Web Worker来尽可能快地计算这些粒子。每个Worker的结果汇总后显示在&lt;code&gt;&amp;amp;lt;canvas&amp;amp;gt;&lt;/code&gt;元素中。Web Workers也可以在通过 Message Channels 在它们之间交换信息。在该例中，这被用来询问每个Workers何时改变喷泉的颜色。我们之后循环这组颜色数组：红色，橙色，黄色，绿色，蓝色，紫色和粉色，这都归功于Message Channels。如果你对细节感兴趣，请跳到 Demo3.js 文件中的 LightManager() 函数部分。&lt;/p&gt;

&lt;p&gt;而且，你可以在随意在 Internet Exploer 10 中运行这个例子，非常好玩！&lt;/p&gt;

&lt;h2 id='id4'&gt;如何识别你代码中的热点&lt;/h2&gt;

&lt;p&gt;为了追踪代码的瓶颈并且识别代码中的哪部分可以发送给Web Workers，你可以使用IE9/10中提供的F12工具栏里面的脚本探查器。它可以帮助你识别你代码中的热点。然而，识别一个热点并不意味着你已经找到一个适合Web Workers的好候选。为了更好地理解这些，我们来review两个有趣的案例。&lt;/p&gt;

&lt;h2 id='1'&gt;案例1：&lt;code&gt;&amp;amp;lt;canvas&amp;amp;gt;&lt;/code&gt;中的速读动画演示&lt;/h2&gt;

&lt;p&gt;这个演示是从 &lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://ie.microsoft.com/testdrive/'&gt;IE Test Drive&lt;/a&gt;获取的，并且可以直接在这儿找到：&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://ie.microsoft.com/testdrive/Performance/SpeedReading/Default.html'&gt;Speed Reading&lt;/a&gt;。该例试图使用&lt;code&gt;&amp;amp;lt;canvas&amp;amp;gt;&lt;/code&gt;来尽可能快地显示字符。其目的是强调你的浏览器执行硬件加速层的质量。但是除此之外，把一些操作分割成线程能获得更好的性能吗？我们需要做一些分析来验证一下。&lt;/p&gt;

&lt;p&gt;如果你在IE9/10中运行这个例子，你可以同时在几秒之内打开探查器。下面是你得到的结果：&lt;/p&gt;

&lt;p&gt;&lt;img alt='enter image description here' src='http://www.codeproject.com/KB/solution-center/HTML5-Web-Workers/image013.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;如果你降序排列那些比较耗时的方法，你会清楚地看到那些最先出现的方法：DrawLoop()，Draw()和drawImage()。如果你双击Draw这一行，就会跳到这个方法对应的代码。你会看到几个这种类型的调用：&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;surface.drawImage(imgTile, 0, 0, 70, 100, this.left, this.top, this.width, this.height);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里surface对象引用了一个&lt;code&gt;&amp;amp;lt;canvas&amp;amp;gt;&lt;/code&gt;元素。&lt;/p&gt;

&lt;p&gt;通过简短的分析，我们可以得到一个初步的结论，这个例子通过drawImage()方法花费了大部分的时间在Canvas内部绘图。由于Web Worker无法获取&lt;code&gt;&amp;amp;lt;canvas&amp;amp;gt;&lt;/code&gt;元素，我们无法将这个耗时的任务分离到其他的线程中（例如我们可以想像一些并发处理&lt;code&gt;&amp;amp;lt;canvas&amp;amp;gt;&lt;/code&gt;元素的方法）。这个例子就不是一个很好的用Web Workers处理并行的候选。&lt;/p&gt;

&lt;p&gt;但是它很好地说明了你应该落实的操作过程。如果经过一些探查工作后，你发现耗时的脚本的主要部分与DOM对象紧密耦合，那么Web Workers就没办法帮你的Web app增强性能了。&lt;/p&gt;

&lt;h2 id='2'&gt;案例2：&lt;code&gt;&amp;amp;lt;canvas&amp;amp;gt;&lt;/code&gt;元素中的光线追踪&lt;/h2&gt;

&lt;p&gt;我们再举一个简单的例子帮助理解。我们拿一个这样的光线追踪的例子进行说明：&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://labs.flog.co.nz/raytracer/'&gt;Flog.RayTracer Canvas Demo&lt;/a&gt;。光线追踪使用一些CPU密集型的数学计算，据此来模拟光线的路径。这个主意是用来模拟一些诸如反射，折射，材质等效果的。&lt;/p&gt;

&lt;p&gt;当我们运行脚本探察器时，你应该得到类似这样的结果：&lt;/p&gt;

&lt;p&gt;&lt;img alt='原文配图' src='http://www.codeproject.com/KB/solution-center/HTML5-Web-Workers/image014.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;再一次的，如果我们降序排列这些方法，有2个方法明显地占用了大多数时间：renderScene()和getPixelColor()。&lt;/p&gt;

&lt;p&gt;getPixelColor()方法的目的是计算当前的像素。光线追踪是一个像素一个像素的渲染场景。这个getPixelColor()方法之后再调用rayTrace()方法接管渲染阴影，环境光等等操作。这是我们的应用的核心部分。并且如果你review一下rayTrace()这个方法的代码，你就会发现它是100%原汁原味的JavaScript。这些代码没有任何DOM依赖。好吧，我相信你懂的：这个例子非常适合并行处理。此外，我们很容易将图像渲染拆分到几个线程中（也因此可能在几个CPU中），由于每个像素的计算之间没有同步进行的必要。每个像素的操作与它们的邻居是独立的，因为在本例中没有使用抗锯齿。&lt;/p&gt;

&lt;p&gt;这样一来，如果我们发现一些使用Web Workers实现光线追踪的例子就不会奇怪了，比如这个：&lt;a href='http://nerget.com/rayjs-mt/rayjs.html'&gt;http://nerget.com/rayjs-mt/rayjs.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用IE10探查这个光线追踪例子，我们可以看出不使用Worker和使用4个Worker的显著区别：&lt;/p&gt;

&lt;p&gt;&lt;img alt='enter image description here' src='http://www.codeproject.com/KB/solution-center/HTML5-Web-Workers/image015.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;在第一个截图中，processRenderCommand()方法几乎占据了全部可用CPU，并且场景绘制耗时2.854秒。&lt;/p&gt;

&lt;p&gt;使用4个Web Workers之后，processRenderCommand()方法在4个并行的线程中执行。我们甚至可以在右侧一栏看到它们的Worker Id。这次场景绘制耗时1.473秒。受益是真实存在的：场景绘制快了一倍！&lt;/p&gt;

&lt;h2 id='id5'&gt;结论&lt;/h2&gt;

&lt;p&gt;关于Web Workers，没有什么神奇的或者新的概念用来回顾/构建你的JavaScript代码使之可以并行执行的。你需要将代码中的加强部分独立出来。它需要与你页面中的其他逻辑相对独立，避免等待同步的任务执行。并且最重要的部分是：代码不能跟DOM有耦合。如果所有这些条件都具备了，那就考虑一下Web Workers。它们绝对可以提高你的Web app的总体性能！&lt;/p&gt;

&lt;h2 id='id6'&gt;附加资源&lt;/h2&gt;

&lt;p&gt;这有一些有趣的附加资源，有兴趣可以读一下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://blogs.msdn.com/b/ie/archive/2011/07/01/web-workers-in-ie10-background-javascript-makes-web-apps-faster.aspx'&gt;Web Workers: Background JavaScript Makes Web Apps Faster&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://cggallant.blogspot.com/2010/08/introduction-to-html-5-web-workers.html'&gt;An Introduction to HTML 5 Web Workers&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://cggallant.blogspot.com/2010/08/deeper-look-at-html-5-web-workers.html'&gt;A Deeper Look at HTML 5 Web Workers&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://wearehugh.com/public/2010/08/html5-web-workers/'&gt;A very nice illustration of Web Workers&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://www.w3.org/TR/workers/'&gt;Official W3C Web Workers Spec&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://ad.doubleclick.net/click%3bh%3dv8/3bf2/3/0/%2a/f%3b247991221%3b0-0%3b1%3b65699690%3b5046-1/3%3b44798311/44816099/1%3b%3b~sscs%3d%3fhttp://msdn.microsoft.com/en-us/ie/hh272905.aspx#_HTML5WebWorker'&gt;Web Workers in IE10: Developer Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>歌曲《何日君再来》中的故事</title>
   <link href="http://44ux.com/blog/2011/12/29/story-of-a-song"/>
   <updated>2011-12-29T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2011/12/29/story-of-a-song</id>
   <content type="html">&lt;p&gt;这几天看电视剧《铁面歌女》里面张娜拉反复地唱着那首经典的歌曲《何日君再来》，一直以为这首歌是邓丽君原唱，但是电影中是三十年代的大上海，不应该有邓丽君的歌呀，所以就上网查了一下，发现这首歌里还有很多的故事呢。居然是华语歌曲的经典冤案，还跟抗日扯上了关系！下面大家就来了解一下当年究竟发生了什么吧！&lt;/p&gt;

&lt;p&gt;以下内容摘自百度知道部分内容：&lt;/p&gt;

&lt;p&gt;歌曲《何日君再来》的命途多舛，也可算是华语歌曲的经典冤案。这首带有浓重探戈味道的歌曲，出生于1936年，是由创作过无数爱国抗战歌曲的作曲家&lt;a href='http://baike.baidu.com/view/21486.htm'&gt;刘雪庵&lt;/a&gt;为一部广告宣传歌舞片《三星伴月》所写，而导演&lt;a href='http://baike.baidu.com/view/1696813.htm'&gt;方沛霖&lt;/a&gt;未经刘雪庵同意，就让编导&lt;a href='http://baike.baidu.com/view/3142490.htm'&gt;黄嘉谟&lt;/a&gt;填写了歌词，对此刘雪庵极为不满，但碍于朋友情面未公开抗议，却为他将来的坎坷命运埋下伏笔。电影中的演唱者为周璇。&lt;/p&gt;

&lt;p&gt;1939年香港一部抗战电影《孤岛天堂》将《何日君再来》选为插曲(黎莉莉演唱)，描述青年男子参军前与女友依依不舍的情景，歌曲韵味恰到好处。此后这首歌被李香兰翻唱并收入唱片，很快就家喻户晓，所以至今许多人仍认为《何日君再来》是李香兰首唱的经典歌曲。&lt;/p&gt;

&lt;p&gt;但是，就在抗日战争的前期。日本人生怕这首歌是中国的老百姓期待中国军队反攻的一首抗日宣传歌曲，于是就将这首歌曲列为禁歌（何日“军”再来）。就在日本人在战场上节节败退的时候，小日本不甘心他们就此失败，于是便在文化上动起了歪脑筋，他们将这首歌改成了《“贺日军”再来》。很快国民政府的情报部门发现了这首歌曲。于是，蒋介石将这首歌曲也同样列为禁歌，就此这首歌曲开始了多难的命运。转眼到了文革期间，这首流传极广《何日君再来》被别有用心的人配上有政治意味的歌词，一时风行。当时更有人指这首由李香兰唱红的歌曲是刘雪庵为汉奸所作。刘雪庵就因这首移花接木的《何日君再来》被错划为右派，关进“牛棚”22年，受尽折磨导致双目失明，文革结束9年后才获平反，冤案因此产生。&lt;/p&gt;

&lt;p&gt;《何日君再来》在上世纪80年代初因邓丽君的翻唱进入大陆而再度走红，却被错误认为是“精神污染”、“汉奸歌曲”因此被禁，同样是一桩历史冤案。如今刘雪庵被平反，《何日君再来》已解禁，其中体现出的开放与包容，值得人民欢欣鼓舞，改变使人进步。&lt;/p&gt;

&lt;p&gt;但事过境迁后回头一看，《何日君再来》太过冤枉。作曲家刘雪庵创作了包括《&lt;a href='http://baike.baidu.com/view/1501262.htm'&gt;流亡三部曲&lt;/a&gt;》在内的大量爱国歌曲，获得全国人民一致赞誉；演唱者黎莉莉，不仅是当时的著名影星，更是被誉为“龙潭三杰”的优秀共产党员钱壮飞的女儿；电影《孤岛天堂》更是一部以抗战为题材爱国电影，虽然《何日君再来》歌词略为轻佻，不算根正苗红，但也确实不应该被禁。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mac系统隐藏文件（Finder）的两种方法</title>
   <link href="http://44ux.com/blog/2011/12/29/mac-show-hidden-files-in-finder"/>
   <updated>2011-12-29T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2011/12/29/mac-show-hidden-files-in-finder</id>
   <content type="html">&lt;p&gt;&lt;a href='http://jiguang.github.com/index.php/tag/mac/'&gt;mac&lt;/a&gt;系统的Finder中默认是不显示隐藏文件的，搜索也搜不到。下面介绍两种显示和隐藏文件的办法。&lt;/p&gt;

&lt;p&gt;打开终端，通过下面的两行命令可以控制是否显示隐藏文件，注意大小写：&lt;/p&gt;

&lt;p&gt;显示Mac隐藏文件的命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defaults write com.apple.finder AppleShowAllFiles -bool true&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;隐藏Mac隐藏文件的命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defaults write com.apple.finder AppleShowAllFiles -bool false&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;键入相应命令后回车，然后关闭终端并重启Finder后才能生效。&lt;/p&gt;

&lt;p&gt;另外还有一条终端命令可以直接控制文件或文件夹的显隐：&lt;/p&gt;

&lt;p&gt;隐藏文件/文件夹命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chflags hidden (文件/文件夹的相对或绝对路径)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chflags hidden /Users/jiguang/Desktop/test&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以隐藏桌面上的test文件夹&lt;/p&gt;

&lt;p&gt;显示文件/文件夹命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chflags nohidden (文件/文件夹的相对或绝对路径)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chflags nohidden /Users/jiguang/Desktop/test&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以显示刚才隐藏掉的test文件夹了。&lt;/p&gt;

&lt;p&gt;这两种方法都只是设置Finder中的文件的显隐的，对于会使用终端的同学就不管用了。所以，还是换个地方把&lt;a href='http://www.baidu.com/s?bs=mac%CF%B5%CD%B3%C8%E7%BA%CE%CF%D4%CA%BE%BA%CD%D2%FE%B2%D8%CE%C4%BC%FE&amp;amp;f=8&amp;amp;rsv_bp=1&amp;amp;rsv_spt=3&amp;amp;wd=%B2%D4%BE%AE%BF%D5&amp;amp;inputT=1572'&gt;苍井空&lt;/a&gt;、&lt;a href='http://www.baidu.com/s?bs=%B2%D4%BE%AE%BF%D5&amp;amp;f=3&amp;amp;rsv_bp=1&amp;amp;rsv_spt=3&amp;amp;wd=%CC%EC%BA%A3%D2%ED&amp;amp;oq=%CC%EC%BB%B9%D2%D4&amp;amp;rsp=0&amp;amp;rsv_sug2=0&amp;amp;inputT=3695'&gt;天海翼&lt;/a&gt;、&lt;a href='http://www.baidu.com/s?bs=%CC%EC%BA%A3%D2%ED&amp;amp;f=8&amp;amp;rsv_bp=1&amp;amp;rsv_spt=3&amp;amp;wd=%D0%A1%D4%F3%C2%EA%C0%FB%D1%C7&amp;amp;inputT=2213'&gt;小泽玛利亚&lt;/a&gt;等姐妹们好好保管吧。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>AppleScript实现保护视力小程序</title>
   <link href="http://44ux.com/blog/2011/12/08/applescript-eye-sight-protect"/>
   <updated>2011-12-08T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2011/12/08/applescript-eye-sight-protect</id>
   <content type="html">&lt;p&gt;每天用电脑不知时光飞逝，一不小心就在电脑前坐了几个小时不动，对身体实在不好。于是&lt;a href='http://jiguang.github.com'&gt;laser&lt;/a&gt;在网上搜索类似&lt;a href='http://jiguang.github.com/index.php/tag/mac/'&gt;mac&lt;/a&gt;下的保护视力的软件，收获不多。刚好今天了解了一下AppleScript，于是就想到用AppleScript折腾一段小代码出来。原理很简单，就是每隔45分钟弹出一个窗口，提示你该休息了，至于你到底休不休息那还得看自觉了。&lt;/p&gt;

&lt;p&gt;代码中的各个参数不言自明，可以任意修改时间间隔，提示话语等。&lt;/p&gt;

&lt;p&gt;另外AppleScript还有很多强大的功能，以后再慢慢发掘，我这里恐怕是大材小用了。先看看代码吧：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;on reminder()
	--time to close the dialog
	set closeDelay to 5

	--words to say
	set tips to &amp;quot;Honey, it&amp;#39;s time to rest your eyes&amp;quot;

	--say someting
	say tips

	--show dialog to remind you
	display dialog tips giving up after closeDelay

end reminder

on idle

	--interval to remind
	set interval to 45

	--repeat
	reminder()

	--set interval time
	return interval * 60

end idle

on quit

	display dialog &amp;quot;You sure wanna quit?&amp;quot; buttons {&amp;quot;Yes&amp;quot;, &amp;quot;No&amp;quot;}

	if button returned of result = &amp;quot;Yes&amp;quot; then

		continue quit

	end if

end quit&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中on xxx就相当于定义了一个函数，on idle是比较特殊的，可以每隔一段时间执行一次，而on quit显而易见，是退出时进行的操作了。这段代码没有多少好解释的，只是一个小练习而已，感兴趣的同学可以搜索一下AppleScript的相关资料，真的很强大的。&lt;/p&gt;

&lt;p&gt;这里还有打包后的脚本，与Mac上的其他App一样，解压后双击即可使用 &lt;a href='http://blog.laserji.com/content/uploads/2011/12/timeReminder.zip'&gt;timeReminder&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;另外，也可以打开Mac的Date&amp;amp;Time Preferences，选择Announce the time即可开启整点报时的功能，每隔一个固定时间就会有一个声音提示你当前时间，声音还可以自定义，唯一的不足就是只能选择整点或半点等几个固定选项。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mac 快速休眠关机重启锁屏</title>
   <link href="http://44ux.com/blog/2011/12/06/mac-quick-start-shutdown-reboot-lock"/>
   <updated>2011-12-06T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2011/12/06/mac-quick-start-shutdown-reboot-lock</id>
   <content type="html">&lt;p&gt;&lt;a href='http://jiguang.github.com/index.php/tag/mac/'&gt;mac&lt;/a&gt; 的几个功能键可以组合出各种快速操作，下面详细介绍：&lt;/p&gt;

&lt;p&gt;操作：Ctrl+Shift+Eject&lt;/p&gt;

&lt;p&gt;作用：关闭显示器休眠，如果在“系统偏好设置” –&amp;gt; “安全性”中有设定进入睡眠后唤醒要输入密码，就等于是锁屏&lt;/p&gt;

&lt;p&gt;操作：Option+Command+Eject&lt;/p&gt;

&lt;p&gt;作用：让Mac直接进入睡眠状态&lt;/p&gt;

&lt;p&gt;操作：Ctrl+Option+Command+Eject&lt;/p&gt;

&lt;p&gt;作用：直接关机&lt;/p&gt;

&lt;p&gt;操作：Control+Eject&lt;/p&gt;

&lt;p&gt;作用：选择重启、睡眠、关机的对话框&lt;/p&gt;

&lt;p&gt;操作：Control+Command+Eject&lt;/p&gt;

&lt;p&gt;作用：退出所有应用程序，并重新启动计算机&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Intellij IDEA配置自动同步到FTP服务器</title>
   <link href="http://44ux.com/blog/2011/12/06/intellij-idea-could-not-show-ftp-file-list"/>
   <updated>2011-12-06T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2011/12/06/intellij-idea-could-not-show-ftp-file-list</id>
   <content type="html">&lt;p&gt;&lt;a href='http://www.jetbrains.com/idea/'&gt;Intellij IDEA&lt;/a&gt; 是一款非常强大到跨平台的IDE，可以在任何主流操作系统中使用并且保证一致的操作习惯。但是这款优秀的IDE的相关中文教程却少得可怜，大部分使用者都是在慢慢摸索、互相学习才得以熟练使用。&lt;/p&gt;

&lt;p&gt;这里&lt;a href='http://jiguang.github.com'&gt;laser&lt;/a&gt;介绍一下 FTP 服务器自动同步的配置和一些注意事项，希望能对你有所帮助。&lt;/p&gt;

&lt;p&gt;首先前提是你已经创建了一个本地的工程，然后假设我在工程目录里新建一个文件夹叫做wordpress，我们将用它来同步我的 FTP 服务器上的文件。&lt;/p&gt;

&lt;p&gt;打开“Tools -&amp;gt; Deployment -&amp;gt; Configuration…”，然后点击左上角的小加号新建一个服务器，在“Connection”页卡下填好各项参数。&lt;/p&gt;

&lt;p&gt;填写完“FTP host”和“User name”、“Password”之后，可以选择“Test FTP connection…”测试一下设置是否正确，如果提示“Successfully connected to xx.xx.xx.xx”则说明连接成功。&lt;/p&gt;

&lt;p&gt;还有一项“Root path”可以选择“Autodetect…”，但要注意一定要在连接测试成功以后才能点，你也可以点击旁边的省略号按钮，手动指定“Root path”。&lt;/p&gt;

&lt;p&gt;注意：这里有的FTP服务器无法自动检测，当点击旁边的省略号按钮时也无法列出服务器文件目录，这时你需要点击“Advanced options…”，然后将“Passiv mode”勾选上即可。&lt;/p&gt;

&lt;p&gt;填完这些以后我们就有了一个有效的服务器连接了，下面转到“Mappings”页卡，这里有三个输入框，第一个“Local path”当然就是你本地的路径了，你可以点省略号按钮，选择刚刚创建的wordpress目录。&lt;/p&gt;

&lt;p&gt;第二个输入框是“Deployment path on server ‘xxx’”，这个就是你希望部署在服务器上的哪个目录，一般跟“Connection”页卡下的“Root path”是相同的，如果是默认的根目录就是一个斜杠“/”。当然你也可以部署到其他目录。这个目录部署后，本地的 wordpress 文件夹里面的文件，在上传时就会保存到这个目录中。&lt;/p&gt;

&lt;p&gt;第三个输入框是“Web path on server ‘xxx’”，这个是通过你的网址可以访问到的路径，因为有的时候部署的路径不一定是实际的访问路径。如果部署的路径与实际的访问路径相同，则此处只填一个英文句点“.”即可，代表当前路径。&lt;/p&gt;

&lt;p&gt;当完成这些以后，点击下方的“Apply”，然后点“Ok”关闭对话框。&lt;/p&gt;

&lt;p&gt;这时，在Project列表中右键点击创建的wordpress文件夹，应该会多出一个“Deployment”选项，里面的子选项即为上传和下载文件或目录，这说明本地的文件夹已经和 FTP 服务器上的路径建立了联系。&lt;/p&gt;

&lt;p&gt;如果想要设置在本地保存后自动同步到 FTP 服务器，可以先左键单击 wordpress 目录，然后选择“Tools -&amp;gt; Deployment -&amp;gt; Configuration…”打开刚才设置服务器的对话框，在左侧选择此服务器，然后单击上方四个小图标最右侧服务器模样的图标，点击后可以看到服务器的名字加粗了，这样就将该服务器设置成了wordpress目录首要使用的服务器连接，完成后关闭对话框。&lt;/p&gt;

&lt;p&gt;再次打开“Tools -&amp;gt; Deployment ”，单击下方的“Automatic Upload”，这样就完成了自动同步的设置，当本地的 wordpress 目录中有文件修改并保存时，将自动同步到服务器（前提是本地与服务器上目录结构一致且文件名相同）。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mac Lion系统配置php环境</title>
   <link href="http://44ux.com/blog/2011/11/22/mac-lion-apache-php-environment"/>
   <updated>2011-11-22T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2011/11/22/mac-lion-apache-php-environment</id>
   <content type="html">&lt;p&gt;这里介绍的是利用 &lt;a href='http://jiguang.github.com/index.php/tag/mac/' title='mac'&gt;mac&lt;/a&gt; 系统自带的 Apache 和 PHP 进行配置，而不使用如 &lt;a href='http://www.mamp.info/en/index.html'&gt;MAMP&lt;/a&gt; 或者 &lt;a href='http://www.apachefriends.org/en/xampp-macosx.html'&gt;XAMPP&lt;/a&gt; 这样的集成环境。关于集成环境的安装非常简单，可以仔细阅读一下官方的文档，这里不再赘述。&lt;/p&gt;

&lt;p&gt;Mac OS X 系统自带就有 Apache 和 PHP ，可以直接使用。这里有两种方式可以启动 Apache：&lt;/p&gt;

&lt;p&gt;第一种：打开“System Preferences -&amp;gt; Sharing ”，勾选“Web Sharing”；&lt;/p&gt;

&lt;p&gt;第二种：打开“终端（terminal）”，运行“sudo apachectl start”，再输入你的管理员密码即可运行 Apache了。&lt;/p&gt;

&lt;p&gt;关于 apachectl 这个命令，它是Apache超文本传输协议服务器的前端程序。 其设计意图是帮助管理员控制Apache httpd 后台的功能，你可以在终端中输入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;man apachectl&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来查看命令手册，或者&lt;a href='http://www.google.com.hk/search?hl=zh-CN&amp;amp;newwindow=1&amp;amp;safe=strict&amp;amp;q=apachectl&amp;amp;oq=apachectl&amp;amp;aq=f&amp;amp;aqi=&amp;amp;aql=&amp;amp;gs_sm=e&amp;amp;gs_upl=1853533l1857914l0l1858055l18l11l0l0l0l0l0l0ll0l0'&gt;在网上搜索 apachectl&lt;/a&gt;这个命令。&lt;/p&gt;

&lt;p&gt;此时，你可以继续在终端中输入如下命令，来查看localhost的响应：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl localhost&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果有响应内容，说明 Apache 服务器已经成功启动，或者直接打开浏览器，输入 &lt;a href='http://localhost'&gt;http://localhost&lt;/a&gt; ，如果出现了 “It Works！”就说明启动成功了，文件目录就在“/Library/WebServer/Documents/”目录中，这个目录是Apache的默认根目录。&lt;/p&gt;

&lt;p&gt;下面配置 PHP 环境，打开终端，运行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vi /etc/apache2/httpd.conf&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用vi命令 “/php5” 搜索到这样一句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#LoadModule php5_module libexec/apache2/libphp5.so&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将这句前面的＃号删掉，然后 Esc -&amp;gt; :w! -&amp;gt; Enter -&amp;gt; :q 退出 vi 编辑返回终端即可。&lt;/p&gt;

&lt;p&gt;下面还要新建一个 PHP 的配置文件，方便以后进行个性化的配置，运行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo cp /etc/php.ini.default /etc/php.ini&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就创建了一个配置文件，目录如命令中所示，你一定可以找到它。&lt;/p&gt;

&lt;p&gt;最后一步，重启 Apache 服务器：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apachectl restart&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此， Apache 和 PHP 的环境就配置完成了，下面就可以在 /Library/WebServer/Documents/ 这个目录放置你的PHP文件进行测试了。&lt;/p&gt;

&lt;p&gt;PS: 写完本文后才发现&lt;a href='http://dancewithnet.com/about/'&gt;秦歌&lt;/a&gt;已经写过一篇非常详尽的文章&lt;a href='http://dancewithnet.com/2010/05/09/run-apache-php-mysql-in-mac-os-x/'&gt;《在Mac OS X中配置Apache ＋ PHP ＋ MySQL》&lt;/a&gt;，网上大部分都是抄袭他的博客的内容。大家可以参照这篇文章里的步骤安装 MySQL 和 PhpMyAdmin 等，我就不再赘述了。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mac下安装 nodejs 的几种方法</title>
   <link href="http://44ux.com/blog/2011/11/19/mac-install-nodejs-with-macports-or-homebrew"/>
   <updated>2011-11-19T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2011/11/19/mac-install-nodejs-with-macports-or-homebrew</id>
   <content type="html">&lt;p&gt;在 &lt;a href='http://jiguang.github.com/index.php/tag/mac/' title='mac'&gt;mac&lt;/a&gt; 下安装 &lt;a href='http://jiguang.github.com/index.php/tag/nodejs-2/' title='nodejs'&gt;nodejs&lt;/a&gt; 相对来说是比较方便的，如果你之前安装过类似 &lt;a href='http://www.macports.org/install.php'&gt;Macports&lt;/a&gt; 或者 &lt;a href='http://mxcl.github.com/homebrew/'&gt;homebrew&lt;/a&gt; 这样的工具，只需要简单的一句话就可以安装。如果使用的是 Macports，那么在终端执行如下命令即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install node&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果使用的是 homebrew，则执行下面的命令即可安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo port install nodejs&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你没有使用过这两个工具，建议去尝试使用一下，可以像 linux 下面的 apt-get 一样安装软件，非常方便。&lt;/p&gt;

&lt;p&gt;如果你还没有使用过这两个工具，那么就只能手动安装了。Mac 下默认没有安装 gcc，无法直接从源码编译安装，&lt;a href='http://jiguang.github.com' title='姬光'&gt;laser&lt;/a&gt; 尝试了单独安装 gcc 的方法，没有成功。最好的建议是直接从 AppStore 下载安装 Xcode，安装之后常用的开发工具包就都有了。不过下载 Xcode 时间比较长，网速比较好的话可能也要 4 个小时以上。&lt;/p&gt;

&lt;p&gt;安装好 Xcode 后，系统就有了 gcc 的功能，下面可以继续安装 &lt;a href='http://jiguang.github.com/index.php/tag/git/' title='git'&gt;git&lt;/a&gt;，从 Git clone 下来源码进行编译安装。关于 Git 是什么和如何安装 Git，网上已经有无数的资料，laser 这里就不再赘述了，推荐去看 &lt;a href='http://help.github.com/win-set-up-git/'&gt;Github 的帮助文档&lt;/a&gt;，讲解很详细，只不过是英文的。从 Git 安装的步骤如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/joyent/node.git nodejs
cd nodejs
./configure
make
sudo make install&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等待命令成功执行即安装完成了。&lt;/p&gt;

&lt;p&gt;如果你没有安装 Git，那么也可以直接&lt;a href='http://nodejs.org/#download'&gt;下载 nodejs 的源码&lt;/a&gt;，解压缩后放到合适的路径，然后进入该文件夹，仍然执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd nodejs
./configure
make
sudo make install&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即可安装。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Wordpress不能安装插件或主题</title>
   <link href="http://44ux.com/blog/2011/11/18/an-unexpected-http-error-occurred-during-the-api-request-on-wordpress"/>
   <updated>2011-11-18T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2011/11/18/an-unexpected-http-error-occurred-during-the-api-request-on-wordpress</id>
   <content type="html">&lt;p&gt;今天在折腾 WordPress 的时候突然发现不能安装插件了，主题也同样安装不了，在 laserij 解决问题的过程中遇到几个问题，也查找了一些资料，这里整理出来希望能对大家有所帮助。&lt;/p&gt;

&lt;p&gt;首先，我的 WordPress 在插件安装页面出现了以下错误提示：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;An Unexpected HTTP Error occurred during the API request.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大致意思是“在发送API请求时发生了一个未知的HTTP错误”，那么既然是“未知”错误，我们就要想办法一探究竟了！&lt;/p&gt;

&lt;p&gt;首先打开 WordPress 的调试功能，找到 wp-config.php 这个文件，将 WP_DEBUG 设为 true：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;define(&amp;#39;WP_DEBUG&amp;#39;, true);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以看到报错信息了。不过这个错误信息也很神奇，信息内容如下：&lt;/p&gt;

&lt;p&gt;Notice: has_cap was called with an argument that is deprecated since version 2.0! Usage of user levels by plugins and themes is deprecated. Use roles and capabilities instead. in /Users/mikkel/Dropbox/Safe/annikalundgren/wp-includes/functions.php on line 3466&lt;/p&gt;

&lt;p&gt;这个信息大致的意思是“has_cap调用时的一个参数在2.0版本以后就已经过时了！主题或插件中使用用户级别已经过时了。使用角色和对应的能力替代。错误代码在/Users/mikkel/Dropbox/Safe/annikalundgren/wp-includes/functions.php 中第 3466 行”。&lt;/p&gt;

&lt;p&gt;这个错误说明我们安装的某个插件或主题过时了，使用了旧的API接口，所传的参数不正确。那么接下来第一步就是要确定是哪个插件或主题出错了。按照我之前的操作来看，应该是安装的某个插件出了问题，所以先禁止全部插件再说！果然，禁止全部插件后问题消失了。那么接下来就要用鸟枪法挨个试验了，最后确定了居然是“Syntax Highlighter Compress”出错了。&lt;/p&gt;

&lt;p&gt;下面要在插件的文件中找到类似 add_submenu_page 这样的函数，幸好 Intellij IDEA 有个 Find in Path 功能，可以在路径中查找内容，瞬间就找到了函数位置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;add_submenu_page(&amp;#39;options-general.php&amp;#39;, __(&amp;#39;Syntax Highlighter ComPress Options&amp;#39;, &amp;#39;SHC&amp;#39;), $menutitle, 8, basename(__FILE__), &amp;#39;shc_options_subpanel&amp;#39;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里这个参数 8 就是用户权限级别的数字，在2.0版本之后，这里应该传入一个 String 类型的参数，用来表示用户的能力，那么我们将这个参数修改为 “read”，即可解决问题了。即代码为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;add_submenu_page(&amp;#39;options-general.php&amp;#39;, __(&amp;#39;Syntax Highlighter ComPress Options&amp;#39;, &amp;#39;SHC&amp;#39;), $menutitle, &amp;#39;read&amp;#39;, basename(__FILE__), &amp;#39;shc_options_subpanel&amp;#39;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于用户的角色和能力，请参看：&lt;a href='http://codex.wordpress.org/Roles_and_Capabilities'&gt;Roles and Capabilities&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;下面返回插件安装界面，再次刷新，发现 DEBUG 信息消失了，说明程序应该没有出现问题，但是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;An Unexpected HTTP Error occurred during the API request.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;的提示仍然存在，还是安装不了插件。继续搜寻解决方案，有网友提到 HTTP 请求的超时时间的问题，先试一下再说！方法如下：&lt;/p&gt;

&lt;p&gt;找到 /wp-includes/http.php，如果是 WordPress3.0以上，则在 /wp-includes/class-http.php 中，Ctrl+F 搜索，找到如下一行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;#39;timeout&amp;#39; =&amp;gt; apply_filters( &amp;#39;http_request_timeout&amp;#39;, 5),&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;后面的数字5表示请求超时的时间，将这个数值改大一点，比如100，然后将修改后的文件更新到FTP服务器。&lt;/p&gt;

&lt;p&gt;再次刷新插件安装界面，仍然提示错误…我倒…&lt;/p&gt;

&lt;p&gt;又继续研究了一下，据说可能是服务器限制超时时间的原因，于是我咨询了我的服务器提供商，得到的答案是，服务器超时时间为 120 秒，这说明不是服务器的原因。那么，到底是怎么个回事呢？继续搜索…&lt;/p&gt;

&lt;p&gt;看到有的牛人提供了一个可供调试的插件，据说是 WordPress 开发必备之工具，称之为：Core Control &lt;a href='http://wordpress.org/extend/plugins/core-control/'&gt;http://wordpress.org/extend/plugins/core-control/&lt;/a&gt;，可以借助这个工具来查看许多信息。由于 &lt;a href='http://jiguang.github.com'&gt;laser&lt;/a&gt; 目前不能在线安装插件，只好把这个插件下载下来，手动 FTP 传上去。&lt;/p&gt;

&lt;p&gt;选择 HTTP Access module ，然后保存，打开页面上方新出现的 HTTP Tab，在这里可以看到当前 WordPress 正在使用哪种方法进行 HTTP 传输，从给出的报表可以看到，该服务器此时的 PHP Stream 和 PHP fsockopen() 都是 Not Available （不可用）的。于是我把截图给了技术支持的客服，估计他们是不想麻烦了，说给我换服务器，等20分钟。&lt;/p&gt;

&lt;p&gt;经过一番周折后，换了服务器，改了IP，再次进行了尝试，发现偶尔有某个插件可以下载成功，大部分还是下载一半就停止，不过之前的错误总算消失了，这说明服务器方面是有一定原因的，这个问题也算告一段落了。最后，记得关掉 WordPress 的调试模式。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;define(&amp;#39;WP_DEBUG&amp;#39;, false);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在整个解决问题的过程中，任何一个解决步骤都解决了一大批人的问题，可是在我这里一直折腾到最后也还没有很好的解决。那个HTTP错误还是偶尔会出现，所以，我还是有点怀疑是不是 WordPress 本身的 API 服务器现在已经承受不了这么大的负载，偶尔就扛不住挂掉了，或者是API接口的连接数到达上限了，而我们恰好被踢了下来，所以才有这么多人遇到这个问题。&lt;/p&gt;

&lt;p&gt;在网速不是很快的情况下，建议大家还是先下载再用FTP工具上传吧，Wordpress在线下载的貌似不支持断点续传，中间一旦出了什么问题终止了，就得重新再安装。而且在服务器上留下了一些临时文件，还要手动删除。&lt;/p&gt;

&lt;p&gt;如果你也遇到了同样的问题，或者你有什么好的解决办法，欢迎留言交流：）&lt;/p&gt;

&lt;p&gt;参考文献：&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.clickonf5.org/5802/solved-an-unexpected-http-error-wordpress/'&gt;http://www.clickonf5.org/5802/solved-an-unexpected-http-error-wordpress/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.antonkoekemoer.com/wordpress/solution-an-unexpected-http-error-occurred-during-the-api-request/'&gt;http://www.antonkoekemoer.com/wordpress/solution-an-unexpected-http-error-occurred-during-the-api-request/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://wordpress.org/support/topic/an-unexpected-http-error-occurred-during-the-api-request-on-wordpress-3'&gt;http://wordpress.org/support/topic/an-unexpected-http-error-occurred-during-the-api-request-on-wordpress-3&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>A/B测试相关资料汇总</title>
   <link href="http://44ux.com/blog/2011/11/11/abtest-material-summary"/>
   <updated>2011-11-11T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2011/11/11/abtest-material-summary</id>
   <content type="html">&lt;p&gt;前一阵一直在看关于&lt;a href='http://en.wikipedia.org/wiki/A/B_testing'&gt;A/B Test&lt;/a&gt;的内容，因此这里汇总了一些中文或英文的资料。&lt;/p&gt;

&lt;p&gt;关于A/B Test的入门及概念等，可以参看&lt;a href='http://oldj.net'&gt;oldj&lt;/a&gt;的这两篇文章：&lt;/p&gt;

&lt;p&gt;&lt;a href='http://oldj.net/article/AB-Testing-basic-concept/'&gt;A/B测试：基本概念&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://oldj.net/article/AB-Testing-method/'&gt;A/B测试：实现方法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面还有一些其他的A/B Test资料，如果你也对A/B Test感兴趣，可以先看看下面列表中的资料，因为网上的A/B Test资料屈指可数：&lt;/p&gt;

&lt;p&gt;The Ultimate Guide To A/B Testing&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.smashingmagazine.com/2010/06/24/the-ultimate-guide-to-a-b-testing/'&gt;http://www.smashingmagazine.com/2010/06/24/the-ultimate-guide-to-a-b-testing/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A/B测试终极指南&lt;/p&gt;

&lt;p&gt;&lt;a href='http://ucdchina.com/snap/7203'&gt;http://ucdchina.com/snap/7203&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An Introduction to A/B Testing&lt;/p&gt;

&lt;p&gt;&lt;a href='http://20bits.com/articles/an-introduction-to-ab-testing/'&gt;http://20bits.com/articles/an-introduction-to-ab-testing/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Effective A/B Testing&lt;/p&gt;

&lt;p&gt;&lt;a href='http://elem.com/~btilly/effective-ab-testing/Default.aspx?__tencentip=10.16.78.54&amp;amp;amp;__tencentid=1&amp;amp;amp;__tencentrawurl=http://elem.com/~btilly/effective-ab-testing/#slide2'&gt;http://elem.com/~btilly/effective-ab-testing/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ABCs of A/B Testing&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.google.com.hk/ggblog/adsense-zhs/2008/12/ab_09.html'&gt;http://www.google.com.hk/ggblog/adsense-zhs/2008/12/ab_09.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Science Behind A/B Testing&lt;/p&gt;

&lt;p&gt;&lt;a href='http://webdesignledger.com/tips/the-science-behind-ab-testing'&gt;http://webdesignledger.com/tips/the-science-behind-ab-testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Behind the scenes: A/B testing part 3&lt;/p&gt;

&lt;p&gt;&lt;a href='http://37signals.com/svn/posts/2991-behind-the-scenes-ab-testing-part-3-final'&gt;http://37signals.com/svn/posts/2991-behind-the-scenes-ab-testing-part-3-final&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The UX of amzon a/b test&lt;/p&gt;

&lt;p&gt;&lt;a href='http://commadot.com/the-ux-of-amazon-ab-test/'&gt;http://commadot.com/the-ux-of-amazon-ab-test/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to use AB testing, eye tracking and Website Optimizer&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.netmagazine.com/features/how-use-ab-testing-eye-tracking-and-website-optimizer'&gt;http://www.netmagazine.com/features/how-use-ab-testing-eye-tracking-and-website-optimizer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A/B Testing Framework Design&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.slideshare.net/patio11/ab-testing-framework-design-3296257'&gt;http://www.slideshare.net/patio11/ab-testing-framework-design-3296257&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Case Studies &amp;amp; Success Stories&lt;/p&gt;

&lt;p&gt;&lt;a href='http://visualwebsiteoptimizer.com/case-studies.php'&gt;http://visualwebsiteoptimizer.com/case-studies.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Review of New A/B Testing Tools&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.tatvic.com/blog/ab-test-multivariate-test-tools/'&gt;http://www.tatvic.com/blog/ab-test-multivariate-test-tools/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ABtest 前端搭建方法总结(阿里巴巴)&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.html-js.com/?p=626#more-626'&gt;http://www.html-js.com/?p=626#more-626&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;超越AB-Test，算法参数化与Google实验架构&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.wentrue.net/blog/?p=1108'&gt;http://www.wentrue.net/blog/?p=1108&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hidden Secrets of the Amazon Shopping Cart&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.grokdotcom.com/2008/02/26/amazon-shopping-cart/'&gt;http://www.grokdotcom.com/2008/02/26/amazon-shopping-cart/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A Beginner’s Guide to Google Website Optimizer&lt;/p&gt;

&lt;p&gt;&lt;a href='http://blog.kissmetrics.com/guide-google-website-optimizer/'&gt;http://blog.kissmetrics.com/guide-google-website-optimizer/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Multivariate Testing in Action: Five Simple Steps to Increase Conversion Rates&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.smashingmagazine.com/2010/11/24/multivariate-testing-in-action-five-simple-steps-to-increase-conversion-rates/'&gt;http://www.smashingmagazine.com/2010/11/24/multivariate-testing-in-action-five-simple-steps-to-increase-conversion-rates/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A/B Test工具：&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.unbounce.com'&gt;http:www.unbounce.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://visualwebsiteoptimizer.com/'&gt;http://visualwebsiteoptimizer.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.google.com/websiteoptimizer'&gt;http://www.google.com/websiteoptimizer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://phpabtest.com/'&gt;http://phpabtest.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;案例分析与展示：&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.abtests.com/'&gt;http://www.abtests.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以说截至本文书写之时，互联网上关于A/B Test的比较有价值的资料只有这么多了，剩下的还有一些老外的个人博客里面的文章也可作为参考。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>如何清除各种浏览器的DNS缓存</title>
   <link href="http://44ux.com/blog/2011/09/25/how-to-clear-browsers-dns-cache"/>
   <updated>2011-09-25T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2011/09/25/how-to-clear-browsers-dns-cache</id>
   <content type="html">&lt;p&gt;在Web开发调试网页的时候，经常会被各种缓存搞得焦头烂额，虽然有&lt;a href='http://fiddler2.com/fiddler2/'&gt;Fiddler&lt;/a&gt;等得力工具，但是开发起来还是不够方便，而且Fiddler有时候真的很慢。下面就介绍几个原生的方法，通过一些设置禁止DNS缓存，经过测试Firefox和IE的还比较好用，IE在刷新后可以直接展示最新的页面，但FF貌似每次需要几秒钟后刷新才是最新的页面。&lt;/p&gt;

&lt;p&gt;首先介绍一下基本知识，关于DNS与Hosts的概念，请看百度百科：&lt;/p&gt;

&lt;p&gt;DNS &lt;a href='http://baike.baidu.com/view/22276.htm'&gt;http://baike.baidu.com/view/22276.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hosts &lt;a href='http://baike.baidu.com/view/597330.htm'&gt;http://baike.baidu.com/view/597330.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;对于Windows系统的DNS服务，也是有缓存的，可以通过下面的方法清除：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;控制面板 – 管理工具 – 服务   重启DNS Client 和 DHCP client 服务&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;cmd - ipconfig /flushdns&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt='pic1' src='http://jiguang.github.com/content/uploads/2012/02/6cddab8b977758a240b3fa31151d1520.png' /&gt;&lt;/p&gt;

&lt;p&gt;那么，如何清除各种浏览器的DNS缓存呢？ 下面有几种方法可以进行尝试：&lt;/p&gt;

&lt;p&gt;对于全部浏览器：&lt;/p&gt;

&lt;p&gt;解决方案：重启浏览器（废话！）&lt;/p&gt;

&lt;p&gt;对于Chrome：&lt;/p&gt;

&lt;p&gt;解决方案：访问:  &lt;a href='chrome://net-internals/#dns'&gt;chrome://net-internals/#dns&lt;/a&gt;  有清空按钮，反应较慢，要等一会儿才能切换过来&lt;/p&gt;

&lt;p&gt;对于IE：&lt;/p&gt;

&lt;p&gt;解决方案：在注册表的 HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\InternetSettings\ 中创建 DnsCacheTimeout 和 ServerInfoTimeOut ，类型为 DWORD 。都指定为 5 ，浏览器就的 dns cache 过期时间就是 5s 。&lt;/p&gt;

&lt;p&gt;即：&lt;/p&gt;

&lt;p&gt;&lt;span&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;“DnsCacheEnabled”=dword:00000000&lt;/p&gt;

&lt;p&gt;“DnsCacheTimeout”=dword:00000000&lt;/p&gt;

&lt;p&gt;“ServerInfoTimeOut”=dword:00000000&lt;/p&gt;

&lt;p&gt;微软相关文档：&lt;a href='http://support.microsoft.com/kb/318803'&gt;http://support.microsoft.com/kb/318803&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;注意：Windows 2000 以前的 Microsoft 操作系统不包含客户端DNS缓存功能&lt;/p&gt;

&lt;p&gt;对于Firefox：&lt;/p&gt;

&lt;p&gt;解决方案1：安装插件&lt;/p&gt;

&lt;p&gt;DNS Flusher：&lt;a href='https://addons.mozilla.org/zh-CN/firefox/addon/dns-flusher/'&gt;https://addons.mozilla.org/zh-CN/firefox/addon/dns-flusher/&lt;/a&gt;  每次需要点击一次才生效&lt;/p&gt;

&lt;p&gt;HostAdmin：&lt;a href='https://addons.mozilla.org/zh-CN/firefox/addon/hostadmin/'&gt;https://addons.mozilla.org/zh-CN/firefox/addon/hostadmin/&lt;/a&gt;   即时生效，但列出了hosts文件里全部内容，对于我们复杂的环境不好用，个人开发比较合适&lt;/p&gt;

&lt;p&gt;&lt;img alt='pic2' src='http://jiguang.github.com/content/uploads/2012/02/d5196a59909937fdb4936b0d1991dbde.png' /&gt;&lt;/p&gt;

&lt;p&gt;解决方案2：&lt;/p&gt;

&lt;p&gt;打开firefox，输入 “about:config”（点击 “I’ll be careful, i promise” ）.&lt;/p&gt;

&lt;p&gt;右键单击空白处，选择 “New” -&amp;gt; “Integer”&lt;/p&gt;

&lt;p&gt;输入 “&lt;strong&gt;network.dnsCacheExpiration&lt;/strong&gt;” 作为属性名，设置 “0″作为整数值&lt;/p&gt;

&lt;p&gt;再次右键单击空白处，选择 “New” -&amp;gt; “Integer”&lt;/p&gt;

&lt;p&gt;这次输入 “&lt;strong&gt;network.dnsCacheEntries&lt;/strong&gt;” 作为属性名，设置 “0″作为整数值&lt;/p&gt;

&lt;p&gt;Done, 你已经禁止了dns缓存&lt;/p&gt;

&lt;p&gt;这几种方法重在折腾，经过实验IE的修改注册表的方法最好用，切换Hosts后直接刷新即可。Firefox的插件比较好用。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>IE6/7 reflow bug</title>
   <link href="http://44ux.com/blog/2011/08/24/ie67-reflow-bug"/>
   <updated>2011-08-24T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2011/08/24/ie67-reflow-bug</id>
   <content type="html">&lt;p&gt;在调试IE6/7的时候，经常可以遇到这样一种bug，疑似reflow造成的，但具体根源没搞清楚，只是reflow的方法可以解决。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;症状：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;常常发生在JS修改数据或者DOM结构的部分，样式会出现错乱，包括定位错误，宽高错误，文字居中等问题；&lt;/p&gt;

&lt;p&gt;仅在JS修改后才出现问题，一般页面载入时是好的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;确诊：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;利用调试工具在JS修改结构的容器上修改任意属性为任意值，甚至空白均可修复此bug；&lt;/p&gt;

&lt;p&gt;甚至有时候一打开调试工具的瞬间问题就解决了，无法定位到出问题的元素。&lt;/p&gt;

&lt;p&gt;目前&lt;a href='http://44ux.com' title='笔者'&gt;笔者&lt;/a&gt;还没有找到这个问题的根源，大致应该是一个浏览器渲染顺序的问题，JS修改数据的DOM部分的样式可能是它的父级容器或者祖先容器的几个样式叠加的结果。而IE6/7并没能重新计算改变的部分的样式与其祖先的关系，所以导致错误。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果有精力的话，最好从样式本身入手，一般都会是一堆float和position相互作用的结果，但没有找到规律。&lt;/p&gt;

&lt;p&gt;另外一种快速的解决方案是在JS修改DOM结构，或者填充数据之后加上这样一句代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document.body.className = document.body.className;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这句代码可以强制reflow整个body部分，当然其中的body可以换成其他容器，但一定要包含被修改的部分。这个操作会对页面性能有一点影响，但是可以快速解决这个奇怪的bug。&lt;/p&gt;

&lt;p&gt;如果大家有什么更好的解决办法或者有高人知其原理，欢迎留言赐教。&lt;/p&gt;

&lt;p&gt;补充资料20120209：&lt;a href='http://www.cssforest.org/blog/index.php?id=195'&gt;《浏览器工作原理浅析》&lt;/a&gt; from &lt;a href='http://www.cssforest.org/blog/'&gt;CSS森林&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>隧道</title>
   <link href="http://44ux.com/blog/2011/08/23/poem-tunnel"/>
   <updated>2011-08-23T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2011/08/23/poem-tunnel</id>
   <content type="html">&lt;p&gt;班车行驶在高速上&lt;/p&gt;

&lt;p&gt;穿过大半个城市的风景&lt;/p&gt;

&lt;p&gt;守不住半刻对生命的思索&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;隧道遮住电波&lt;/p&gt;

&lt;p&gt;满耳充斥着嘈杂的声音&lt;/p&gt;

&lt;p&gt;无法思考&lt;/p&gt;

&lt;p&gt;世界却无比宁静安详&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;隧道的尽头&lt;/p&gt;

&lt;p&gt;是静谧的田园&lt;/p&gt;

&lt;p&gt;抑或断裂的轨道&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;街边回响着流浪歌手的歌声&lt;/p&gt;

&lt;p&gt;浸人心肺的孤独&lt;/p&gt;

&lt;p&gt;那是城市脆弱的灵魂&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;无论旅途多么孤单漫长&lt;/p&gt;

&lt;p&gt;相信定有某人守候&lt;/p&gt;

&lt;p&gt;在一个不经意的瞬间&lt;/p&gt;

&lt;p&gt;让你找到生命的意义&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Javascript Regular Expressions</title>
   <link href="http://44ux.com/blog/2011/08/19/javascript-regular-expressions"/>
   <updated>2011-08-19T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2011/08/19/javascript-regular-expressions</id>
   <content type="html">&lt;p&gt;This is a brief introducion of Javascript Regular Expressions, hope it will helps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href='http://www.slideshare.net/jiguang/javascript-8911052' title='Javascript正则表达式'&gt;Javascript正则表达式&lt;/a&gt;&lt;/strong&gt; View more &lt;a href='http://www.slideshare.net/'&gt;presentations&lt;/a&gt; from &lt;a href='http://www.slideshare.net/jiguang'&gt;ji guang&lt;/a&gt;&lt;/p&gt;
&lt;iframe allowfullscreen='allowfullscreen' frameborder='0' height='356' marginheight='0' marginwidth='0' scrolling='no' src='http://www.slideshare.net/slideshow/embed_code/8911052' style='border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px' width='427'&gt; &lt;/iframe&gt;&lt;div style='margin-bottom:5px'&gt;&lt;strong&gt;&lt;a href='http://www.slideshare.net/jiguang/javascript-8911052' target='_blank' title='Javascript正则表达式'&gt;Javascript正则表达式&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href='http://www.slideshare.net/jiguang' target='_blank'&gt;ji guang&lt;/a&gt;&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;More:&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.regular-expressions.info/'&gt;http://www.regular-expressions.info/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://regexlib.com/'&gt;http://regexlib.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.regexlab.com/zh/regref.htm'&gt;http://www.regexlab.com/zh/regref.htm&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>JavaScript实现可定制图片的进度条</title>
   <link href="http://44ux.com/blog/2010/10/06/customized-javascript-progress-bar"/>
   <updated>2010-10-06T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2010/10/06/customized-javascript-progress-bar</id>
   <content type="html">&lt;p&gt;目前关于js进度条的应用，多数都是动态载入，或者纯js+css生成的朴素的进度条。有些时候我们需要在页面中展示一个静态的进度即可，比如网盘剩余空间等等，此时最好只给定一个进度的参数，便可生成全部的进度条。为了美观考虑，&lt;a href='http://44ux.com' title='笔者'&gt;笔者&lt;/a&gt;尝试采用图片实现进度条，这种进度条的效果依赖于图片的样式和定制的参数，可以很方便地修改进度条的样式。在展示进度时，只需要给相应的html标签里加一个参数即可。下面是基于YUI实现的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var D=YAHOO.util.Dom, E=YAHOO.util.Event;

//可定制的进度条初始化函数，长度可任意，高度依赖背景图片能展示的高度范围
var initProcess=function( classname, width, height, imgurl){
    if(!classname)return;

    //处理误传入单位的情况
    if(width||height){
        width=width.replace(&amp;#39;px&amp;#39;,&amp;#39;&amp;#39;);
        height=height.replace(&amp;#39;px&amp;#39;,&amp;#39;&amp;#39;);
    }

    //处理未定义宽高的情况
    width=width||100;
    height=height||20;

    //获取所有进度条容器
    var containers=D.getElementsByClassName(classname);
    if(containers){

        //设置容器基本参数
        D.setStyle(containers,&amp;#39;display&amp;#39;,&amp;#39;none&amp;#39;);
        D.setStyle(containers,&amp;#39;width&amp;#39;, width+&amp;#39;px&amp;#39;);
        D.setStyle(containers,&amp;#39;height&amp;#39;, height+&amp;#39;px&amp;#39;);

        //初始化进度
        for(vari=0, j=containers.length; i&amp;lt;j; i++){
            var inner=document.createElement(&amp;#39;div&amp;#39;);

            D.setStyle(inner,&amp;#39;background&amp;#39;,&amp;#39;url(&amp;#39;+imgurl+&amp;#39;) repeat 0 50% #f50&amp;#39;);

            if(D.getAttribute(containers[i],&amp;#39;data-value&amp;#39;)){
                var value=parseInt(D.getAttribute(containers[i],&amp;#39;data-value&amp;#39;));

                if(value&amp;amp;&amp;amp;value&amp;gt;=0&amp;amp;&amp;amp;value&amp;lt;=100){
                    D.setStyle(inner,&amp;#39;width&amp;#39;, (width/100)*value + &amp;#39;px&amp;#39;);
                    D.setStyle(inner,&amp;#39;height&amp;#39;, height+&amp;#39;px&amp;#39;);
                }
            }
            containers[i].appendChild(inner);
        }
        D.setStyle(containers,&amp;#39;display&amp;#39;,&amp;#39;block&amp;#39;);
    }
};

E.onDOMReady(function(){
    //修改参数可以不同样式展示进度条
    initProcess(&amp;#39;process-bar&amp;#39;,&amp;#39;200&amp;#39;,&amp;#39;20&amp;#39;,&amp;#39;bar.png&amp;#39;);
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个例子只是千万种解决方案中的一种，根据你的情况可以酌情使用。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>JavaScript笔试题：统计出现最多的字符次数</title>
   <link href="http://44ux.com/blog/2010/09/28/count-most-shown-character"/>
   <updated>2010-09-28T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2010/09/28/count-most-shown-character</id>
   <content type="html">&lt;p&gt;一小段代码，经常出现在面试笔试题中的：统计一个字符串中出现最多的字符的次数，可以是英文或者数字。&lt;/p&gt;

&lt;p&gt;应用正则表达式的全局匹配，可以匹配出字符出现的次数，比较这些次数，将最大的保存并返回。代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var countMost = function(str){
    if(!str) return;

    var _count = 0, _temp = 0, _reg, _char;

    for(var i = 0; i&amp;lt;str.length; i++){
        _reg = new RegExp(str.charAt(i),&amp;#39;g&amp;#39;);
        _temp = str.match(_reg).length;

        if(_temp &amp;gt; _count){
            _count = _temp;
            _char = str.charAt(i);
        }
    }

    return_count;
    //return {count:_count, char:_char};
};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注释掉的代码可以一并返回出现最多次数的字符。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>JavaScript动态添加Option的几种方式</title>
   <link href="http://44ux.com/blog/2010/08/16/methods-for-insert-options-into-select-with-javascript"/>
   <updated>2010-08-16T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2010/08/16/methods-for-insert-options-into-select-with-javascript</id>
   <content type="html">&lt;p&gt;在处理表单的时候，经常会有这样的需求：给定一定的数据来生成某个select的option，或者更进一步，某些option或许预先选中或者有高亮显示。&lt;/p&gt;

&lt;p&gt;下面我们就来温习一下几种option的创建方式。这个需求要求某些选项要预先有高亮显示，可以通过添加class来处理。&lt;/p&gt;

&lt;p&gt;首先定义一个高亮的class，为了简单处理，只定义红色高亮：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
.hot-games{
    background-color: #f00;
}
&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后预先定义一些用来生成选项的数据：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
var gameOptions = {
    &amp;quot;options&amp;quot;: [
        {
            &amp;quot;name&amp;quot;:&amp;quot;魔兽世界&amp;quot;,
            &amp;quot;value&amp;quot;:&amp;quot;50007361&amp;quot;,
            &amp;quot;isHot&amp;quot;:&amp;quot;false&amp;quot;},
        {
            &amp;quot;name&amp;quot;:&amp;quot;龙之谷&amp;quot;,
            &amp;quot;value&amp;quot;:&amp;quot;50007937&amp;quot;,
            &amp;quot;isHot&amp;quot;:&amp;quot;false&amp;quot;},
        {
            &amp;quot;name&amp;quot;:&amp;quot;永恒之塔&amp;quot;,
            &amp;quot;value&amp;quot;:&amp;quot;50007385&amp;quot;,
            &amp;quot;isHot&amp;quot;:&amp;quot;true&amp;quot;},
        {
            &amp;quot;name&amp;quot;:&amp;quot;奇迹世界&amp;quot;,
            &amp;quot;value&amp;quot;:&amp;quot;50007800&amp;quot;,
            &amp;quot;isHot&amp;quot;:&amp;quot;false&amp;quot;}
    ]
};
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里是select元素，需要制定id和name属性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp;lt;select id=&amp;quot;cat&amp;quot; name=&amp;quot;cat&amp;quot; style=&amp;quot;width:130px;&amp;quot;&amp;amp;gt;&amp;amp;lt;/select&amp;amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大致有三种方案可以增加option，一种是通过new Option() 构造函数，第二种是通过select.add()函数，第三种是通过增加innerHTML。下面比较一下三种方式的异同：&lt;/p&gt;

&lt;p&gt;首先获取到select元素：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var gameCat = document.getElementById(&amp;#39;cat&amp;#39;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一种方案，通过new Option()构造函数，该函数属0级DOM，所有浏览器都支持：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//方案1:new Option()构造函数
for(var i = 0, j = gameOptions.options.length; i&amp;lt;j; i++){
    gameCat.options[i] = new Option(gameOptions.options[i].name, gameOptions.options[i].value);

    if(gameOptions.options[i].isHot == &amp;#39;true&amp;#39;){
        gameCat.options[i].className = &amp;#39;hot-games&amp;#39;;
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;new Option(text, value)第一个参数为显示的文字，第二个为value值，如果想设置其他属性需要单独操作。&lt;/p&gt;

&lt;p&gt;第二种方案，通过document.createElement（）来创建选项，然后再设置选项的属性。在这里w3c标准是可以设置option的 label属性即为显示文本，但事实证明FF并不支持，只是给option增加了一个label属性。而w3c中定义的readonly的属性text，在FF中却可以设置。那么是否需要判断浏览器类型呢？当然不用，该方案代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//方案2:add()
for(var i = 0, j = gameOptions.options.length; i&amp;lt;j; i++) {
    var option = document.createElement(&amp;#39;option&amp;#39;);

    try{
        //二级DOM中该属性为readonly，但FF确可写，且可显示为选项内容
        option.text = gameOptions.options[i].name;
    }catch(e){
        //IE支持label，可以直接显示为选项的文字
        option.label = gameOptions.options[i].name;
    }

    option.value = gameOptions.options[i].value;
    option.className = (gameOptions.options[i].isHot==&amp;#39;true&amp;#39;)?&amp;#39;hot-games&amp;#39;:&amp;#39;&amp;#39;;

    //如果不传第二个参数，FF下会报错
    gameCat.add(option,null);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里要注意的add()函数的第二个参数，该参数为before，可以指定选项插到哪个选项之前，如果为null则插到最后。如果不指定这个参数在IE系不会有问题，FF下会报错，提示Not enough arguments,参数不足，所以最好传个null先。&lt;/p&gt;

&lt;p&gt;第三种方案，比较少用于select元素上，IE下是无效的，但是动态添加其他元素的孩子时经常用到。当然也可以设置元素属性后 appendChild(),同方案二。这里要先把select隐藏掉，这样可以减少浏览器重绘次数，对于display=’none’的元素的操作不会引起重绘或回流。再改变完之后再显示出来：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//方案3：innerHTML
//IE无效，FF可用
gameCat.style.display = &amp;#39;none&amp;#39;;
for(vari=0, j = gameOptions.options.length; i&amp;lt;j; i++) {
    var isHot = (gameOptions.options[i].isHot == &amp;#39;true&amp;#39;)?&amp;#39;&amp;#39;:&amp;#39;&amp;#39;;
    gameCat.innerHTML += &amp;#39;&amp;amp;lt;option value=&amp;#39; + gameOptions.options[i].value + isHot + &amp;#39;&amp;amp;gt;&amp;#39; + gameOptions.options[i].name + &amp;#39;&amp;amp;lt;/option&amp;amp;gt;&amp;#39;;
}
gameCat.style.display = &amp;#39;block&amp;#39;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这三种方式最常用的就是第一种了，没有兼容性问题，其他两种只是在此作为例子，展示创建option的方法。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Javascript万能表单验证</title>
   <link href="http://44ux.com/blog/2010/07/30/javascript-universal-form-validator"/>
   <updated>2010-07-30T00:00:00+08:00</updated>
   <id>http://44ux.com/blog/2010/07/30/javascript-universal-form-validator</id>
   <content type="html">&lt;p&gt;大家都知道验证表单采用正则表达式，在表单是固定的情况下，或者已知可以生成什么样的表单的情况下比较容易操作。但是有些情况下，或许表单是有一组定制的数据生成的，我们无法预知表单的类型，id等信息，那么是不是就只能后台验证了呢？这里&lt;a href='http://44ux.com' title='笔者'&gt;笔者&lt;/a&gt;做了一个简单的验证程序，可以大致验证input和select必须有值，radio和checkbox至少要选中一项，代码中用到了几个YUI的函数，也可以自己用原生js或其他的库改写一下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var D = YAHOO.util.Dom;

var checkAll = function(aClass){
    var list = D.getElementsByClassName(aClass),
        tempName = &amp;#39;&amp;#39;,count,tempValue = false,value = true;

    for(var i = 0, j = list.length; i&amp;lt;j; i++){
        if((list[i].name != &amp;#39;&amp;#39;)&amp;amp;&amp;amp;(list[i].type == &amp;#39;radio&amp;#39;||list[i].type == &amp;#39;checkbox&amp;#39;)){

            if(list[i].name != tempName){
                tempName = list[i].name;
                tempValue = false;
                count = document.getElementsByName(tempName).length-1;
                tempValue = tempValue||(list[i].checked);
            }else{
                tempValue = tempValue||(list[i].checked);
            }

            if(count != 0){
                count--;
            }else{
                value = value &amp;amp;&amp;amp; tempValue;
                tempValue = false;
                tempName = &amp;#39;&amp;#39;;
            }

        }else if(list[i].type == &amp;#39;text&amp;#39;||list[i].type == &amp;#39;password&amp;#39;||list[i].type == &amp;#39;select-one&amp;#39;){
            value=value&amp;amp;&amp;amp;(list[i].value!=&amp;#39;&amp;#39;);
        }

    }
    return value;
};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PS：这个需求有点儿蛋疼了，不过在实际工作中，什么奇怪的需求都会遇到，你懂的。&lt;/p&gt;</content>
 </entry>
 
 
</feed>